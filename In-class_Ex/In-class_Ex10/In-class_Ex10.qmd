---
title: "In-Class Exercise 10"
subtitle: "In this exercise, we will recap on the use of geocoding and learn how to work with Open Government Data."
# draft: true
date: "Nov 04, 2024"
date-modified: "last-modified"
author: Teng Kok Wai (Walter)
execute:
  echo: true # Include the source code in output
  eval: true
  freeze: auto
  message: false
  warning: false # if false, don't include warnings in the output
format:
  html:
    code-link: true
    toc: true
number-sections: true
number-offset: 1
editor: visual
---

## Exercise Reference

- [ISSS626 Geospatial Analytics and Applications â€“ In-class Exercise 10: Working with Open Government Data](https://isss626-ay2024-25aug.netlify.app/in-class_ex/in-class_ex10/in-class_ex10#/title-slide)

## Learning Outcome

In this exercise, we will recap on the use of geocoding and learn how to work with Open Government Data.

## Import the R Packages

```{r}
pacman::p_load(tidyverse, sf, tmap, httr, performance)
```

## Geocoding

The HDB resale data can be downloaded from [here](https://data.gov.sg/datasets?query=resale&page=1&resultId=d_8b84c4ee58e3cfc0ece0d773c8ca6abc). The dataset contains resale flat prices based on registration date from Jan 2017 to Sep 2024.

The code below reads the raw CSV file containing the resale flat data and filters it to include only records from January 2023 to September 2024.

```{r}
resale <- read_csv("data/raw_data/resale.csv") %>%
  filter(month >= "2023-01" & month <= "2024-09")
```

The following code tidies the data by creating new columns: - `address`: Combines `block` and `street_name` to form a complete address. - `remaining_lease_yr`: Extracts the remaining lease years as an integer. - `remaining_lease_mth`: Extracts the remaining lease months as an integer.

```{r}
resale_tidy <- resale %>%
  mutate(address = paste(block,street_name)) %>%
  mutate(remaining_lease_yr = as.integer(
    str_sub(remaining_lease, 0, 2)))%>%
  mutate(remaining_lease_mth = as.integer(
    str_sub(remaining_lease, 9, 11)))
```

Next, we filter the tidy dataset to include only records from September 2024 and take the first 10 addresses as an example.

```{r}
resale_selected <- resale_tidy %>%
  filter(month == "2024-09")

first_10_resale <- head(resale_selected, 10)
```

Then, we generate a sorted list of unique addresses from the filtered dataset. This will be used to retrieve geographical coordinates.

```{r}
add_list <- sort(unique(first_10_resale$address))
add_list
```

In the code below, we will perform geocoding and save the output into 2 data frames, `found` and `not_found`.

`found` data frames contains data from successful API calls and `not_found` contains data with api errors etc. These data require additional care and manual geocoding may be required.


```{r}
url <- "https://onemap.gov.sg/api/common/elastic/search"
found <- data.frame()
not_found <- data.frame()

for (address in add_list){
  query <- list('searchVal'=address, 'returnGeom'='Y', 
                'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query=query)
  
  if ((content(res)$found)!=0){
    tmp_df <- data.frame(content(res))[4:13]
    tmp_df$address<- address
    found <- rbind(found, tmp_df)

  } else {
    not_found <- rbind(not_found, data.frame(address = address))
  }
  
}
```


```{r}
found
```

```{r}
not_found
```

In this example, we get all successful calls and 0 failures when performing geocoding.

Next, we tidy the field names.

```{r}
colnames(found)
```

```{r}
found_filtered <- found %>%
  select(results.BLK_NO, results.ROAD_NAME, results.POSTAL, results.X, results.Y, address) %>%
  rename(
    POSTAL = results.POSTAL,
    XCOORD = results.X,
    YCOORD = results.Y,
    BLK_NO = results.BLK_NO,
    ROAD_NAME = results.ROAD_NAME
  )
found_filtered 
```
Next, we join `resale` with `found` to form `resale_geocoded`. Then we convert this tibble dataframe to sf point feature data frame.


```{r}
# we need to add an address column for joining
first_10_resale <- first_10_resale %>%
  mutate(address = paste(block, street_name))
```

```{r}
resale_geocoded = left_join(
  first_10_resale, found_filtered, 
  by = c('address' = 'address'))

resale_geocoded
```

To convert to sf:
```{r}
resale_geocoded_sf <- st_as_sf(resale_geocoded, 
                            coords = c("XCOORD",
                                       "YCOORD"),
                            crs=3414)
```

Next we check for overlapping point features.

```{r}
overlapping_points <- resale_geocoded_sf %>%
  mutate(overlap = lengths(st_equals(., .)) > 1)
```

In the code below, `st_jitter()` of sf package is used to move the point features by 5m to avoid overlapping point features.

```{r}
resale_geocoded_sf <- resale_geocoded_sf %>%
  st_jitter(amount = 5)

resale_geocoded_sf
```
