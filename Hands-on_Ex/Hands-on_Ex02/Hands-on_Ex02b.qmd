---
title: "2B: 2nd Order Spatial Point Patterns Analysis"
subtitle: "In this exercise, we will learn to apply 2nd-order spatial point pattern analysis methods in R, including G, F, K, and L functions, to evaluate spatial point distributions and perform hypothesis testing using the spatstat package."
# draft: true
date: "Aug 29, 2024"
date-modified: "last-modified"
author: Teng Kok Wai (Walter)
execute:
  echo: true
  eval: true
  freeze: true
  message: false
  warning: false
format:
  html:
    toc: true
number-sections: true
number-offset: 1
editor: visual
---

## Exercise 2B Reference

[R for Geospatial Data Science and Analytics - 5  2nd Order Spatial Point Patterns Analysis Methods](https://r4gdsa.netlify.app/chap05.html)

## Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or
-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?\
-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

This hands-on exercise continues from [Hands-on Exercise 2A](/hands-on_ex/hands-on_ex02/hands-on_ex02a)

## Learning Outcome

- Importing and managing geospatial data using `sf` and `spatstat` packages.
- Converting spatial data formats from `sf` to `spatstat`'s `ppp` format.
- Handling and correcting duplicate spatial points in datasets.
- Defining and applying spatial windows (`owin` objects) for focused analysis.
- Conducting 2nd-order spatial point pattern analyses using G, F, K, and L functions.
- Performing Monte Carlo simulations and hypothesis testing to assess spatial randomness.
- Visualizing spatial patterns and statistical results using appropriate plotting functions.

## The Data

| Dataset                 | Description                                                         | Source                         | Format         |
|-------------------------|---------------------------------------------------------------------|--------------------------------|----------------|
| **CHILDCARE**           | Point data containing location and attributes of childcare centers. | Data.gov.sg                    | GeoJSON        |
| **MP14_SUBZONE_WEB_PL** | Polygon data with URA 2014 Master Plan Planning Subzone boundaries. | Data.gov.sg                    | ESRI Shapefile |
| **CoastalOutline**      | Polygon data representing Singapore's national boundary.            | Singapore Land Authority (SLA) | ESRI Shapefile |


## Installing and Loading the R Packages

The following R packages will be used in this exercise:

| Package      | Purpose                                                                           | Use Case in Exercise                                                                                       |
|--------------|-----------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|
| **sf**       | Imports, manages, and processes vector-based geospatial data.                     | Handling vector geospatial data in R.                                                                      |
| **spatstat** | Provides tools for point pattern analysis.                                        | Performing 1st- and 2nd-order spatial point pattern analysis and deriving kernel density estimation (KDE). |
| **raster**   | Reads, writes, and manipulates gridded spatial data (raster).                     | Converting image outputs from `spatstat` into raster format.                                               |
| **maptools** | Offers tools for manipulating geographic data.                                    | Converting spatial objects into `ppp` format for use with `spatstat`.                                      |
| **tmap**     | Creates static and interactive thematic maps using cartographic quality elements. | Plotting static and interactive point pattern maps.                                                        |

To install and load these packages in R, use the following code:

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

## Reproducibility

As this document involves Monte Carlo simulations, we will set the seed to ensure reproducibility

```{r}
set.seed(1234)
```

## Spatial Data Wrangling

### Importing the Spatial Data

To import the three geographical datasets, we will use `st_read()` from `sf`.

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson")
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data",
                layer = "MP14_SUBZONE_WEB_PL")
```

### Inspect and Reproject to Same Projection System

Before we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.

First, we check the childcare dataset.

```{r}
st_crs(childcare_sf)
```

This dataset is using the WGS84 crs. We will reproject all the dataset to SVY21 crs for standardization and analysis.

```{r}
childcare_sf <- st_transform(childcare_sf , crs = 3414)
st_crs(childcare_sf)
```

The childcare dataset has been reprojected to SVY21 successfully.

Next, we inspect the Coastal Outline dataset.

```{r}
st_crs(sg_sf)
```

Notice that this dataset is using SVY21 crs, however the ID provided is `EPSG:9001` does not match the intended ID, `EPSG:3414` of SVY21. In this case, we will set the crs to the correct ID using the code block below.

```{r}
sg_sf <- st_set_crs(sg_sf, 3414)
st_crs(sg_sf)
```

Similarly, we will inspect the Master Plan Subzone Dataset.

```{r}
st_crs(mpsz_sf)
```

Since the ID is also `EPSG:9001`, we will set the crs to `EPSG:3414` too.

```{r}
mpsz_sf <- st_set_crs(mpsz_sf, 3414)
st_crs(mpsz_sf)
```

## Mapping the Geospatial Datasets

After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.

### Static Map

```{r}
# add polygon layer of the coastal outline of sg island
tm_shape(sg_sf)+ tm_polygons() +
# add polygon layer of the subzone based on sg masterplan
tm_shape(mpsz_sf) + tm_polygons() +
# add dot layer to show the locations of childcare centres
tm_shape(childcare_sf) + tm_dots() +
tm_layout()
```

When all the 3 datasets are overlayed together, it shows the locations of childcare centres on the Singapore island. Since all the geospatial layers are within the same map context, it means their referencing system and coordinate values are referred to similar spatial context. This consistency is crucial for accurate geospatial analysis.

### Interactive Map

Alternatively, we can also prepare a pin map by using the code block below.

```{r}
tmap_mode('view')

# tm_basemap("Esri.WorldGrayCanvas") +
# tm_basemap("OpenStreetMap") +
tm_basemap("Esri.WorldTopoMap") +
tm_shape(childcare_sf) +
  tm_dots(alpha = 0.5)
```

```{r}
tmap_mode('plot')
```

In interactive mode, `tmap` uses the Leaflet for R API, allowing you to freely navigate, zoom, and click on features for detailed information. You can also change the map's background using layers like ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap, with ESRI.WorldGrayCanvas as the default.

::: callout-tip
Remember to switch back to plot mode after interacting to avoid connection issues and limit interactive maps to fewer than 10 in RMarkdown documents for Netlify publishing.
:::

## Geospatial Data Wrangling

While simple feature data frames are becoming more popular compared to `sp`'s Spatial\* classes, many geospatial analysis packages still require data in the Spatial\* format. This section will show you how to convert a simple feature data frame to `sp`'s Spatial\* class.

### Converting sf data frames to sp’s Spatial\* class

The code block below uses [`as_Spatial()`](https://r4gdsa.netlify.app/chap04.html) of **sf** package to convert the three geospatial data from simple feature data frame to sp's Spatial\* class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

After the sf dataframe to sp Spatial\* conversion, let's inspect the Spatial\* classes.

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

The geospatial data have been converted into their respective sp’s Spatial\* classes.

### Converting the Spatial\* Class into Generic sp Format

**spatstat** requires the analytical data in ***ppp*** object form. There is no straightforward way to convert a Spatial\* classes into ***ppp*** object. We need to convert the ***Spatial*** **classes**\* into ***Spatial*** object first.

::: callout-tip
`ppp` refers to **planar point pattern**. It is used to represent spatial point patterns in `spatstat`; it contains the event locations with possibly associated marks, and the observation window where the events occur.

see [Chapter 18 The spatstat package \| Spatial Statistics for Data Science: Theory and Practice with R](https://www.paulamoraga.com/book-spatial/the-spatstat-package.html#creating-spatial-point-patterns)
:::

The codes block below converts the Spatial\* classes into generic sp objects.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

Next, we can display the sp objects properties.

```{r}
childcare_sp
sg_sp
```

Let's further inspect the differences between Spatial\* classes and generic sp object with the example of `childcare` and `childcare_sp` object.

```{r}
head(childcare)
```

```{r}
head(childcare_sp)
```

Note that the Spatial\* classes contain more attribute data as compared its generic sp object counterpart.

::: callout-tip
**Differences between Spatial\* classes and generic sp object**

-   **Data Storage**: SpatialPoints stores only the coordinates, while SpatialPointsDataFrame stores both coordinates and additional attribute data

-   **Functionality**: SpatialPointsDataFrame allows for more complex operations and analyses due to the additional data it holds

see [Introduction to spatial points in R - Michael T. Hallworth, Ph.D.](https://mhallwor.github.io/_pages/basics_SpatialPoints#:~:text=The%20difference%20between,about%20the%20point.)
:::

### Converting the Generic sp Format into spatstat’s ppp Format

Now, we will use `as.ppp()` function of **spatstat** to convert the spatial data into **spatstat**'s ***ppp*** object format.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Let's examine the difference by plotting *childcare_ppp*:

```{r}
plot(childcare_ppp)
```

We can also view the summary statistics of the newly created ppp object by using the code block below.

```{r}
summary(childcare_ppp)
```

::: callout-tip
Be aware of the warning message regarding duplicates. In spatial point pattern analysis, duplicates can be a significant issue. The statistical methods used for analyzing spatial point patterns often assume that the points are distinct and non-coincident.
:::

### Handling Duplicated Points

We can check the duplication in a **ppp** object by using the `duplicated` function with different configurations.

::: callout-tip
**Tips on using `duplicated`**

If rule="spatstat" (the default), two points are deemed identical if their coordinates are equal according to ==, and their marks are equal according to ==. This is the most stringent possible test. If rule="unmark", duplicated points are determined by testing equality of their coordinates only, using ==. If rule="deldir", duplicated points are determined by testing equality of their coordinates only, using the function duplicatedxy in the package deldir, which currently uses duplicated.data.frame. Setting rule="deldir" will ensure consistency with functions in the deldir package.

see [R: Determine Duplicated Points in a Spatial Point Pattern](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/duplicated.ppp.html)
:::

```{r}
# duplicated(childcare_ppp)
# any(duplicated(childcare_ppp))
rules <- c("spatstat", "deldir", "unmark")

duplicate_counts <- list()
for (rule in rules) {
  duplicates <- duplicated(childcare_ppp, rule = rule)
  num_duplicates <- sum(duplicates)
  duplicate_counts[[rule]] <- num_duplicates
}

print(duplicate_counts)
```

Using `unmark`, we can find 74 duplicates.

We can also use [anyDuplicated(x)](https://rdrr.io/cran/spatstat.geom/man/duplicated.ppp.html#:~:text=anyDuplicated(x)%20is%20a%20faster%20version%20of%20any(duplicated(x)).) as it is a faster version of `any(duplicated(x))`.

```{r}
sum(anyDuplicated(childcare_ppp, rule="unmark"))
```

To count the number of [coincident points](https://www.quora.com/What-is-exactly-coincident-points-and-lines-as-per-SMSG-postulates-1-According-to-this-points-and-lines-are-different-objects-or-same-say-line-is-made-of-set-of-points-What-about-coincident-lines-in-this-context#:~:text=Coincident%20points%20and%20lines%20are,that%20share%20the%20same%20points.), we will use the `multiplicity()` function as shown in the code block below. see [R: Multiplicity](https://search.r-project.org/CRAN/refmans/mlr3pipelines/html/Multiplicity.html) for more info.

```{r eval=FALSE}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
# double check
coincident_points <- duplicated(childcare_ppp,  rule="deldir")
coincident_coordinates <- childcare_ppp[coincident_points]
print(coincident_coordinates)
```

The output shows that there are ~~128~~(???) 0 duplicated point events.

```{r}
tmap_mode('view')
tm_basemap("Esri.WorldTopoMap") +
tm_shape(childcare) +
  tm_dots(alpha=0.4,
          size=0.05)
tmap_mode('plot')
```

### How to Spot Duplicate Points on the Map

There are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

The third solution is to make each point "unique" and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

#### Jittering

The code block below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry=TRUE,
                             nsim=1,
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

### Creating *owin* Object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code block below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(sg_sf)
```

The output object can be displayed by using `plot()` function:

```{r}
plot(sg_owin)
```

And using `summary()` function of Base R:

```{r}
summary(sg_owin)
```

## Combining Point Events Object and Owin Object

For the last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code block below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

## First-order Spatial Point Patterns Analysis

In this section, you will learn how to perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,
-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

### Kernel Density Estimation

In this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.

#### Computing Kernel Density Estimation Using Automatic Bandwidth Selection Method

-   [*bw.diggle()*](https://rdrr.io/cran/spatstat/man/bw.diggle.html) automatic bandwidth selection method. Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).\
-   The smoothing kernel used is *gaussian*, which is the default. Other smoothing methods are: "epanechnikov", "quartic" or "disc".\
-   The intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is *FALSE*.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian")
```

The *plot()* function of Base R is then used to display the kernel density derived.

```{r}
plot(kde_childcareSG_bw)
```

The density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of SVY21 is in meter. As a result, the density values computed is in "number of points per square meter".

Before we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code block below.

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### Rescaling KDE values

`rescale.ppp()` is used below to convert the unit of measurement from meter to kilometer:

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

Now, we can re-run `density()` using the resale data set and plot the output kde map.

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

Since we just did a rescaling operation, the output image looks identical to the earlier version with the only changes in terms of data values.

### Working with Different Automatic Bandwidth Methods

Beside `bw.diggle()`, there are 3 other **spatstat** functions can be used to determine the bandwidth, they are: `bw.CvL()`, `bw.scott()`, and `bw.ppl()`.

Let us take a look at the bandwidth return by these automatic bandwidth calculation methods by using:

```{r}
 bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

Baddeley et al. (2016) suggest using the `bw.ppl()` algorithm, as it tends to produce more appropriate values when the pattern consists predominantly of tight clusters. However, they also note that if the aim of a study is to detect a single tight cluster amidst random noise, the `bw.diggle()` method is likely to be more effective.

To compare the output of using `bw.diggle` and `bw.ppl` methods:

```{r fig.width=16, fig.height=6}
kde_childcareSG.ppl <- density(childcareSG_ppp.km,
                               sigma=bw.ppl,
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))

plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

## 6.3 Working with Different Kernel Methods

By default, the kernel method used in `density.ppp()` is gaussian. But there are three other options, namely: *Epanechnikov*, *Quartic* and *Dics*. Let us take a look at what they look like:

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="gaussian"),
     main="Gaussian")

plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="epanechnikov"),
     main="Epanechnikov")

plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="quartic"),
     main="Quartic")

plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="disc"),
     main="Disc")
```

**Observations:** In this dataset, the choice of kernel function has only a minor impact on the overall density plots. The Gaussian, Epanechnikov, and Quartic kernels produce smoother transitions and distribute the density over a broader area. In contrast, the Disc kernel provides a more localized density estimation with sharper boundaries and less smoothness.

## Fixed and Adaptive KDE

### Computing KDE by using Fixed Bandwidth

Next, we will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code block below, the sigma value used is 0.6. This is because the unit of measurement of ***childcareSG_ppp.km*** object is in kilometer, hence the 600m is 0.6km.

In this section, we will learn how to derive adaptive kernel density estimation by using [`density.adaptive()`](https://rdrr.io/cran/spatstat/man/adaptive.density.html) of **spatstat**.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

We can compare the fixed and adaptive kernel density estimation outputs by using:

```{r fig.width=16, fig.height=6}
par(mfrow=c(1,2))

plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### Converting KDE Output into Grid Object

To achieve the same result, we convert the object to a format suitable for mapping:

```{r}
#| eval: false
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```

#### Converting Grided Output into Raster

Next, we will convert the gridded kernel density objects into RasterLayer object by using *raster()* of **raster** package.

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
```

Let us take a look at the properties of *kde_childcareSG_bw_raster* RasterLayer.

```{r}
kde_childcareSG_bw_raster
```

Note that the crs property is NA.

#### Assigning Projection Systems

To include the CRS information on kde_childcareSG_bw_raster RasterLayer, we will do the following:

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

Now, the crs property is completed.

### Visualising the output in **tmap**

Finally, we will display the raster in cartographic quality map using `tmap` package.

```{r}
tm_shape(kde_childcareSG_bw_raster) +
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

```{r}
#| eval: false
values(kde_childcareSG_bw_raster)
```

Note that the raster values are encoded explicitly onto the raster pixel using the values in "v" field.

### Comparing Spatial Point Patterns using KDE

In this section, we will learn how to compare KDE of childcare at Punggol, Tampines, Chua Chu Kang and Jurong West planning areas.

#### Extracting Study Area

The code block below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting the target planning areas:

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

#### Creating ***owin*** object

Now, we will convert these sf objects into owin objects that is required by **spatstat**.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

#### Combining Childcare Points and the Study Area

To extract childcare that is within the specific region for analysis, we can use:

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, `rescale.ppp()` function is used to transform the unit of measurement from meter to kilometer.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code block below is used to plot the four study areas and the locations of the childcare centres.

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))

plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```


## Second-Order Spatial Point Pattern Analysis

In this section, we will analyze spatial point patterns using various functions: G-Function, F-Function, K-Function, and L-Function.

### Analysing Spatial Point Process Using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will learn how to compute G-function estimation by using [`Gest()`](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

#### Choa Chu Kang Planning Area

##### Computing G-function Estimation

To compute G-function using `Gest()` of **spatstat** package:

::: callout-note
`correction` is an optional argument in `Gest()`

Optional. The edge correction(s) to be used to estimate . A vector of character strings selected from "none", "rs", "km", "Hanisch" and "best". Alternatively correction="all" selects all options.

see [Gest function - RDocumentation](https://www.rdocumentation.org/packages/spatstat.core/versions/2.3-1/topics/Gest)
:::

```{r}
# rs and border has the same effect
G_CK = Gest(childcare_ck_ppp, correction = "rs")
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

We can also use the "all" option in correction to display all forms of edge corrections from "none", "rs", "km", "Hanisch" and "best".

```{r}
G_CK_all = Gest(childcare_ck_ppp, correction = "all")
plot(G_CK_all, xlim=c(0,500))
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$= The distribution of childcare services at Choa Chu Kang are **not** randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function:

::: callout-note
The [envelope function](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) calculates overall and pointwise confidence envelopes for a curve based on bootstrap replicates of the curve evaluated at a number of fixed points.

In other words, It helps you determine if your observed spatial pattern (e.g., locations of points in a study area) is significantly different from what you would expect under a random or theoretical distribution.

**How It Works:** 1. Simulate Data: It generates multiple simulated datasets (often by randomizing the locations of points) based on the null hypothesis (e.g., complete spatial randomness). 2. Compute Statistics: For each simulated dataset, it computes a spatial statistic (e.g., G-function, F-function) and creates a distribution of these statistics. 3. Compare: It compares the observed statistic from your actual data to the distribution of statistics from the simulated datasets. 4. Envelope Plot: It plots the range (envelope) of the simulated statistics along with the observed statistic, allowing you to see if your observed statistic falls outside the range of what is expected under the null hypothesis.

**When to Use It?** Use the envelope function when you want to:

1.  Test if the observed spatial pattern deviates significantly from a random pattern or other theoretical patterns.
2.  Assess the statistical significance of spatial features or clustering in your data.
3.

**Choice of `nsim`:**
The choice of 39 simulations (nsim = 39) in Monte Carlo techniques for spatial analysis is often a practical compromise between computational efficiency and statistical robustness.

- **Computational Efficiency:** Running a large number of simulations can be computationally expensive, especially for complex spatial analyses. We can strike a balance between obtaining reliable results and keeping computational costs manageable by selecting *absolute minimum sample size*.

The minimum number of simulations $m$ required for a Monte Carlo test at a particular significance level can be determined by:

$\alpha = \frac{1}{m+1}$

for a one-tailed test and

$\alpha = \frac{2}{m+1}$

Thus, a one-tailed test at a significance level of 5% would require **a minimum of 19 simulations**, a two-tailed test at a significance level of 5% would require **a minimum of** 39 simulations.

see [Going beyond the required number of simulations required for a particular significance level when conducting a Monte Carlo test - Cross Validated](https://stats.stackexchange.com/questions/302428/going-beyond-the-required-number-of-simulations-required-for-a-particular-signif), [spatial statistics - Simulation envelopes and significance levels - Geographic Information Systems Stack Exchange](https://gis.stackexchange.com/questions/16754/simulation-envelopes-and-significance-levels)
:::

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim=39)
```

```{r}
plot(G_CK.csr)
```

#### Tampines Planning Area

##### Computing G-function Estimation

We will use the `best` edge correction for this example.

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

```{r}
G_tm_all = Gest(childcare_tm_ppp, correction = "all")
plot(G_tm_all)
```

### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are **not** randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim=39)
```

```{r}
plot(G_tm.csr)
```

### Analysing Spatial Point Process Using F-Function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will learn how to compute F-function estimation by using [`Fest()`](https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/Fest) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

#### Choa Chu Kang Planning Area

##### Computing F-function estimation

::: callout-note
`Fest()` has the same correction option as `Gest()`.
:::

```{r}
F_CK_all = Fest(childcare_ck_ppp, correction = "all")
plot(F_CK_all)
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$ = The distribution of childcare services at Choa Chu Kang are **not** randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function:

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim=39)
```

```{r}
plot(F_CK.csr)
```

#### Tampines Planning Area

##### Computing F-function estimation

Monte Carlo test with F-function:

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are **not** randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim=39)
```

```{r}
plot(F_tm.csr)
```

### Analysing Spatial Point Process Using K-Function

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [`Kest()`](https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/Kest) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

::: callout-note
`Kest()`'s `correction option is different from`Gest()`and`Fest()\`.

`correction:` Optional. A character vector containing any selection of the options "none", "border", "bord.modif", "isotropic", "Ripley", "translate", "translation", "rigid", "none", "good" or "best". It specifies the edge correction(s) to be applied. Alternatively correction="all" selects all options.

see [Kest function - RDocumentation](https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/Kest)
:::

#### Choa Chu Kang Planning Area

##### Computing K-Function Estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$ = The distribution of childcare services at Choa Chu Kang are **not** randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim=39, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

#### Tampines Planning Area

##### Computing K-function Estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r,
     ylab= "K(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
```

### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim=39, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r,
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### Analysing Spatial Point Process Using L-Function

In this section, you will learn how to compute L-function estimation by using [`Lest()`](https://www.rdocumentation.org/packages/spatstat.core/versions/2.3-1/topics/Lest) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

#### Choa Chu Kang Planning Area

##### Computing L-function Estimation

::: callout-note
`Lest()` has the same correction options as `Kest()`.
:::

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r,
     ylab= "L(d)-r", xlab = "d(m)")
```

##### Performing Complete Spatial Randomness Test

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$ = The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim=39, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

#### Tampines Planning Area

##### Computing L-function Estimate

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r,
     ylab= "L(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
```

### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim=39, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r,
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
