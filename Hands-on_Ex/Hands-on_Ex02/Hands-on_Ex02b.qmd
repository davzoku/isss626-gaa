---
title: "2B: 2nd Order Spatial Point Patterns Analysis"
subtitle: "In this exercise, we will learn to apply 2nd-order spatial point pattern analysis methods in R, including G, F, K, and L functions, to evaluate spatial point distributions and perform hypothesis testing using the spatstat package."
# draft: true
date: "Aug 29, 2024"
date-modified: "last-modified"
author: Teng Kok Wai (Walter)
execute:
  echo: true
  eval: true
  freeze: true
  message: false
  warning: false
format:
  html:
    toc: true
number-sections: true
number-offset: 1
editor: visual
---

## Exercise 2B Reference

[R for Geospatial Data Science and Analytics - 5  2nd Order Spatial Point Patterns Analysis Methods](https://r4gdsa.netlify.app/chap05.html)

## Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or
-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of [spatstat](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?\
-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

This hands-on exercise continues from [Hands-on Exercise 2A](/hands-on_ex/hands-on_ex02/hands-on_ex02a)

Here's the improved section with relevant information presented in table format:

## The Data

The following data sources will be used in this exercise:

| Dataset                 | Description                                                                 | Source                         | Format         |
|-------------------------|-----------------------------------------------------------------------------|--------------------------------|----------------|
| **CHILDCARE**           | Point data containing location and attributes of childcare centres.         | Data.gov.sg                    | GeoJSON        |
| **MP14_SUBZONE_WEB_PL** | Polygon data representing URA 2014 Master Plan Planning Subzone boundaries. | Data.gov.sg                    | ESRI Shapefile |
| **CoastalOutline**      | Polygon data showing the national boundary of Singapore.                    | Singapore Land Authority (SLA) | ESRI Shapefile |

## Installing and Loading the R Packages

The following R packages will be used in this exercise:

| Package      | Purpose                                                                                   | Use Case in Exercise                                                                                       |
|--------------|-------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|
| **sf**       | Importing, managing, and processing vector-based geospatial data.                         | Handling vector geospatial data in R.                                                                      |
| **spatstat** | Tools for point pattern analysis.                                                         | Performing 1st- and 2nd-order spatial point pattern analysis and deriving kernel density estimation (KDE). |
| **raster**   | Reading, writing, manipulating, analyzing, and modeling of gridded spatial data (raster). | Converting image outputs generated by `spatstat` into raster format.                                       |
| **maptools** | Tools for manipulating geographic data.                                                   | Converting spatial objects into `ppp` format for use with `spatstat`.                                      |
| **tmap**     | Functions for plotting cartographic quality static or interactive maps.                   | Creating static and interactive point pattern maps.                                                        |

To install and load these packages in R, use the following code:

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

## Spatial Data Wrangling

### Importing the Spatial Data

To import the three geographical datasets, we will use `st_read()` from `sf`.

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson")
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data",
                layer = "MP14_SUBZONE_WEB_PL")
```

### Inspect and Reproject to Same Projection System

Before we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.

First, we check the childcare dataset.

```{r}
st_crs(childcare_sf)
```

This dataset is using the WGS84 crs. We will reproject all the dataset to SVY21 crs for standardization and analysis.

```{r}
childcare_sf <- st_transform(childcare_sf , crs = 3414)
st_crs(childcare_sf)
```

The childcare dataset has been reprojected to SVY21 successfully.

Next, we inspect the Coastal Outline dataset.

```{r}
st_crs(sg_sf)
```

Notice that this dataset is using SVY21 crs, however the ID provided is `EPSG:9001` does not match the intended ID, `EPSG:3414` of SVY21. In this case, we will set the crs to the correct ID using the code block below.

```{r}
sg_sf <- st_set_crs(sg_sf, 3414)
st_crs(sg_sf)
```

Similarly, we will inspect the Master Plan Subzone Dataset.

```{r}
st_crs(mpsz_sf)
```

Since the ID is also `EPSG:9001`, we will set the crs to `EPSG:3414` too.

```{r}
mpsz_sf <- st_set_crs(mpsz_sf, 3414)
st_crs(mpsz_sf)
```

## Mapping the Geospatial Datasets

After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.

### Static Map

```{r}
# add polygon layer of the coastal outline of sg island
tm_shape(sg_sf)+ tm_polygons() +
# add polygon layer of the subzone based on sg masterplan
tm_shape(mpsz_sf) + tm_polygons() +
# add dot layer to show the locations of childcare centres
tm_shape(childcare_sf) + tm_dots() +
tm_layout()
```

When all the 3 datasets are overlayed together, it shows the locations of childcare centres on the Singapore island. Since all the geospatial layers are within the same map context, it means their referencing system and coordinate values are referred to similar spatial context. This consistency is crucial for accurate geospatial analysis.

### Interactive Map

Alternatively, we can also prepare a pin map by using the code block below.

```{r}
tmap_mode('view')

# tm_basemap("Esri.WorldGrayCanvas") +
# tm_basemap("OpenStreetMap") +
tm_basemap("Esri.WorldTopoMap") +
tm_shape(childcare_sf) +
  tm_dots(alpha = 0.5)
```

```{r}
tmap_mode('plot')
```

In interactive mode, `tmap` uses the Leaflet for R API, allowing you to freely navigate, zoom, and click on features for detailed information. You can also change the map's background using layers like ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap, with ESRI.WorldGrayCanvas as the default.

::: callout-tip
Remember to switch back to plot mode after interacting to avoid connection issues and limit interactive maps to fewer than 10 in RMarkdown documents for Netlify publishing.
:::

## Geospatial Data Wrangling

While simple feature data frames are becoming more popular compared to `sp`'s Spatial\* classes, many geospatial analysis packages still require data in the Spatial\* format. This section will show you how to convert a simple feature data frame to `sp`'s Spatial\* class.

### Converting sf data frames to sp’s Spatial\* class

The code block below uses [`as_Spatial()`](https://r4gdsa.netlify.app/chap04.html) of **sf** package to convert the three geospatial data from simple feature data frame to sp's Spatial\* class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

After the sf dataframe to sp Spatial\* conversion, let's inspect the Spatial\* classes.

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

The geospatial data have been converted into their respective sp’s Spatial\* classes.

### Converting the Generic sp Format into spatstat’s ppp Format

Now, we will use `as.ppp()` function of **spatstat** to convert the spatial data into **spatstat's** `ppp` object format.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Let's examine the difference by plotting *childcare_ppp*:

```{r}
plot(childcare_ppp)
```

We can also view the summary statistics of the newly created ppp object by using the code block below.

```{r}
summary(childcare_ppp)
```

::: callout-tip
Be aware of the warning message regarding duplicates. In spatial point pattern analysis, duplicates can be a significant issue. The statistical methods used for analyzing spatial point patterns often assume that the points are distinct and non-coincident.
:::

### Handling Duplicated Points

We can check the duplication in a **ppp** object by using the `duplicated` function with different configurations.

::: callout-tip
**Tips on using `duplicated`**

If rule="spatstat" (the default), two points are deemed identical if their coordinates are equal according to ==, and their marks are equal according to ==. This is the most stringent possible test. If rule="unmark", duplicated points are determined by testing equality of their coordinates only, using ==. If rule="deldir", duplicated points are determined by testing equality of their coordinates only, using the function duplicatedxy in the package deldir, which currently uses duplicated.data.frame. Setting rule="deldir" will ensure consistency with functions in the deldir package.

see [R: Determine Duplicated Points in a Spatial Point Pattern](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/duplicated.ppp.html)
:::

```{r}
# duplicated(childcare_ppp)
# any(duplicated(childcare_ppp))
rules <- c("spatstat", "deldir", "unmark")

duplicate_counts <- list()
for (rule in rules) {
  duplicates <- duplicated(childcare_ppp, rule = rule)
  num_duplicates <- sum(duplicates)
  duplicate_counts[[rule]] <- num_duplicates
}

print(duplicate_counts)
```

Using `unmark`, we can find 74 duplicates.

We can also use [anyDuplicated(x)](https://rdrr.io/cran/spatstat.geom/man/duplicated.ppp.html#:~:text=anyDuplicated(x)%20is%20a%20faster%20version%20of%20any(duplicated(x)).) as it is a faster version of `any(duplicated(x))`.

```{r}
sum(anyDuplicated(childcare_ppp, rule="unmark"))
```

To count the number of [coincident points](https://www.quora.com/What-is-exactly-coincident-points-and-lines-as-per-SMSG-postulates-1-According-to-this-points-and-lines-are-different-objects-or-same-say-line-is-made-of-set-of-points-What-about-coincident-lines-in-this-context#:~:text=Coincident%20points%20and%20lines%20are,that%20share%20the%20same%20points.), we will use the `multiplicity()` function as shown in the code block below. see [R: Multiplicity](https://search.r-project.org/CRAN/refmans/mlr3pipelines/html/Multiplicity.html) for more info.

```{r eval=FALSE}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event:

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
# double check
coincident_points <- duplicated(childcare_ppp,  rule="deldir")
coincident_coordinates <- childcare_ppp[coincident_points]
print(coincident_coordinates)
```

The output shows that there are ~~128~~(???) 0 duplicated point events.

```{r}
tmap_mode('view')
tm_basemap("Esri.WorldTopoMap") +
tm_shape(childcare) +
  tm_dots(alpha=0.4,
          size=0.05)
tmap_mode('plot')
```

### How to Spot Duplicate Points on the Map

There are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

The second solution is use *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

The third solution is to make each point "unique" and then attach the duplicates of the points to the patterns as **marks**, as attributes of the points. Then you would need analytical techniques that take into account these marks.

#### Jittering

The code block below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry=TRUE,
                             nsim=1,
                             drop=TRUE)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

### Creating *owin* Object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In **spatstat**, an object called ***owin*** is specially designed to represent this polygonal region.

The code block below is used to covert *sg* SpatialPolygon object into owin object of **spatstat**.

```{r}
sg_owin <- as.owin(sg_sf)
```

The output object can be displayed by using `plot()` function:

```{r}
plot(sg_owin)
```

And using `summary()` function of Base R:

```{r}
summary(sg_owin)
```

### Combining Point Events Object and Owin Object

For the last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code block below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

#### Extracting Study Area

The code block below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting the target planning areas:

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

#### Converting sf objects into ***owin*** objects

Now, we will convert these sf objects into owin objects that is required by **spatstat**.

```{r}

pg_owin = as.owin(pg)

tm_owin = as.owin(tm)

ck_owin = as.owin(ck)

jw_owin = as.owin(jw)

```

#### Combining Childcare Points and the Study Area

To extract childcare that is within the specific region for analysis, we can use:

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, `rescale()` function is used to transform the unit of measurement from meter to kilometer.

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

The code block below is used to plot the four study areas and the locations of the childcare centres.

```{r fig.width=16, fig.height=10}
par(mfrow=c(2,2))

plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

## Second-Order Spatial Point Pattern Analysis

In this section, we will analyze spatial point patterns using various functions: G-Function, F-Function, K-Function, and L-Function.

### Analysing Spatial Point Process Using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will learn how to compute G-function estimation by using [`Gest()`](https://rdrr.io/cran/spatstat/man/Gest.html) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

#### Choa Chu Kang Planning Area

##### Computing G-function Estimation

To compute G-function using `Gest()` of **spatstat** package:

::: callout-note
`correction` is an optional argument in `Gest()`

Optional. The edge correction(s) to be used to estimate . A vector of character strings selected from "none", "rs", "km", "Hanisch" and "best". Alternatively correction="all" selects all options.

see [Gest function - RDocumentation](https://www.rdocumentation.org/packages/spatstat.core/versions/2.3-1/topics/Gest)
:::

```{r}
# rs and border has the same effect
G_CK = Gest(childcare_ck_ppp, correction = "rs")
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

We can also use the "all" option in correction to display all forms of edge corrections from "none", "rs", "km", "Hanisch" and "best".

```{r}
G_CK_all = Gest(childcare_ck_ppp, correction = "all")
plot(G_CK_all, xlim=c(0,500))
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$= The distribution of childcare services at Choa Chu Kang are **not** randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function:

::: callout-note
The [envelope function](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) calculates overall and pointwise confidence envelopes for a curve based on bootstrap replicates of the curve evaluated at a number of fixed points.

In other words, It helps you determine if your observed spatial pattern (e.g., locations of points in a study area) is significantly different from what you would expect under a random or theoretical distribution.

**How It Works:** 1. Simulate Data: It generates multiple simulated datasets (often by randomizing the locations of points) based on the null hypothesis (e.g., complete spatial randomness). 2. Compute Statistics: For each simulated dataset, it computes a spatial statistic (e.g., G-function, F-function) and creates a distribution of these statistics. 3. Compare: It compares the observed statistic from your actual data to the distribution of statistics from the simulated datasets. 4. Envelope Plot: It plots the range (envelope) of the simulated statistics along with the observed statistic, allowing you to see if your observed statistic falls outside the range of what is expected under the null hypothesis.

**When to Use It?** Use the envelope function when you want to:

1.  Test if the observed spatial pattern deviates significantly from a random pattern or other theoretical patterns.
2.  Assess the statistical significance of spatial features or clustering in your data.
:::

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

#### Tampines Planning Area

##### Computing G-function Estimation

We will use the `best` edge correction for this example.

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

```{r}
G_tm_all = Gest(childcare_tm_ppp, correction = "all")
plot(G_tm_all)
```

### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are **not** randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

### Analysing Spatial Point Process Using F-Function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will learn how to compute F-function estimation by using [`Fest()`](https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/Fest) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

#### Choa Chu Kang Planning Area

##### Computing F-function estimation

::: callout-note
`Fest()` has the same correction option as `Gest()`.
:::

```{r}
F_CK_all = Fest(childcare_ck_ppp, correction = "all")
plot(F_CK_all)
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$ = The distribution of childcare services at Choa Chu Kang are **not** randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function:

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

#### Tampines Planning Area

##### Computing F-function estimation

Monte Carlo test with F-function:

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are **not** randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

### Analysing Spatial Point Process Using K-Function

K-function measures the number of events found up to a given distance of any particular event. In this section, you will learn how to compute K-function estimates by using [`Kest()`](https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/Kest) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

::: callout-note
`Kest()`'s `correction option is different from`Gest()`and`Fest()\`.

`correction:` Optional. A character vector containing any selection of the options "none", "border", "bord.modif", "isotropic", "Ripley", "translate", "translation", "rigid", "none", "good" or "best". It specifies the edge correction(s) to be applied. Alternatively correction="all" selects all options.

see [Kest function - RDocumentation](https://www.rdocumentation.org/packages/spatstat/versions/1.64-1/topics/Kest)
:::

#### Choa Chu Kang Planning Area

##### Computing K-Function Estimate

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

##### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$ = The distribution of childcare services at Choa Chu Kang are **not** randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

#### Tampines Planning Area

##### Computing K-function Estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r,
     ylab= "K(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
```

### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r,
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### Analysing Spatial Point Process Using L-Function

In this section, you will learn how to compute L-function estimation by using [`Lest()`](https://www.rdocumentation.org/packages/spatstat.core/versions/2.3-1/topics/Lest) of **spatstat** package. We will also learn how to perform monte carlo simulation test using [`envelope()`](https://www.rdocumentation.org/packages/boot/versions/1.3-30/topics/envelope) of **spatstat** package.

#### Choa Chu Kang Planning Area

##### Computing L-function Estimation

::: callout-note
`Lest()` has the same correction options as `Kest()`.
:::

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r,
     ylab= "L(d)-r", xlab = "d(m)")
```

##### Performing Complete Spatial Randomness Test

$H_0$ = The distribution of childcare services at Choa Chu Kang are randomly distributed.

$H_1$ = The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code block below is used to perform the hypothesis testing.

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

#### Tampines Planning Area

##### Computing L-function Estimate

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r,
     ylab= "L(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
```

### Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

$H_0$ = The distribution of childcare services at Tampines are randomly distributed.

$H_1$ = The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r,
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
