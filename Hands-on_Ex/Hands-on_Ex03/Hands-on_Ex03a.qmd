---
title: "3A: Network Constrained Spatial Point Patterns Analysis"
subtitle: "In this exercise, we will learn to use R and the `spNetwork` package for analyzing network-constrained spatial point patterns, focusing on kernel density estimation and G- and K-function analysis."
# draft: true
date: "Sep 01, 2024"
date-modified: "last-modified"
author: Teng Kok Wai (Walter)
execute:
  echo: true
  eval: true
  freeze: true
  message: false
  warning: false
format:
  html:
    toc: true
number-sections: true
number-offset: 1
editor: visual
---

## Exercise 3A Reference

[R for Geospatial Data Science and Analytics - 7Â  Network Constrained Spatial Point Patterns Analysis](https://r4gdsa.netlify.app/chap07)

## Overview

::: callout-note
**What is NetKDE and Why is it important?** Network Constrained Kernel Density Estimation (NetKDE) is an advanced spatial analysis technique used to estimate the density of spatial events (such as crime incidents, traffic accidents, wildlife sightings, etc.) while accounting for the underlying network structure, such as roads, railways, or rivers. Unlike traditional Kernel Density Estimation (KDE), which assumes that events are distributed freely in a 2D plane, NetKDE restricts the analysis to a network, providing a more accurate representation when events are constrained to specific pathways or routes.

NetKDE provides a more realistic density estimation for data constrained to a network, avoiding misleading results that might arise from traditional KDE. For example, traffic accidents or crime hotspots along a road network are better analyzed using NetKDE since it restricts the analysis to the roads themselves.
:::

**Network constrained Spatial Point Patterns Analysis (NetSPAA)** is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.

In this hands-on exercise, you are going to gain hands-on experience on using appropriate functions of **spNetwork** package:

-   to derive **network kernel density estimation (NKDE)**, and
-   to perform network G-function and k-function analysis

## Learning Outcome

-   Understand and perform Network Constrained Spatial Point Patterns Analysis (NetSPAA) for events on networks (e.g., traffic accidents, childcare centers).
-   Use `spNetwork` to derive network kernel density estimation (NKDE) for spatial analysis.
-   Conduct network G- and K-function analyses to test for complete spatial randomness (CSR).
-   Visualize geospatial data using `tmap` for interactive and high-quality mapping.
-   Prepare data by importing geospatial datasets using the `sf` package and managing CRS information.
-   Use `lixelize_lines()` to cut lines into lixels for NKDE analysis.
-   Apply NKDE methods (`simple`, `discontinuous`, `continuous`) to analyze point patterns on networks.
-   Visualize NKDE results by rescaling densities for effective mapping.
-   Perform CSR tests using the `kfunctions()` from `spNetwork` to analyze spatial interactions among events.

## The Data

This study will analyze the spatial distribution of childcare centers in the [Punggol planning area](https://en.wikipedia.org/wiki/Punggol) using the following geospatial datasets:

| Dataset        | Description                                                                                     | Format         |
|------------------|-----------------------------------|------------------|
| **Punggol_St** | Line feature data representing the road network within Punggol Planning Area.                   | ESRI Shapefile |
| **Punggol_CC** | Point feature data representing the location of childcare centers within Punggol Planning Area. | ESRI Shapefile |

## Installing and Loading the R Packages

The following R packages will be used in this exercise:

| Package       | Purpose                                                                                                                                      | Use Case in Exercise                                                                               |
|------------------|--------------------------------|----------------------|
| **spNetwork** | Provides functions for Spatial Point Patterns Analysis (e.g., KDE, K-function) on networks and spatial matrix building for spatial analysis. | Conducting spatial point pattern analysis and building spatial weights based on network distances. |
| **sf**        | Offers functions to manage, process, and manipulate Simple Features for geospatial data handling.                                            | Handling and processing geospatial data in Simple Features format.                                 |
| **tmap**      | Creates cartographic quality static and interactive maps using the Leaflet API.                                                              | Plotting high-quality static and interactive maps for spatial analysis.                            |

To install and load these packages, use the following code:

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse)
```

## Import Data and Preparation

The code block below uses `st_read()` of **sf** package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.

```{r}
network <- st_read(dsn="data/geospatial", 
                   layer="Punggol_St")
```

```{r}
childcare <- st_read(dsn="data/geospatial",
                     layer="Punggol_CC")
```

### Examine Data Content

We can examine the structure of the output simple features data tables in RStudio. Alternatively, we can print basic information on the data as shown below.

::: panel-tabset
### Network

```{r}
network
```

```{r}
dim(network)
```

```{r}
str(network)
```

```{r}
st_crs(network)
```

### Childcare

```{r}
childcare
```

```{r}
dim(childcare)
```

```{r}
str(childcare)
```

```{r}
st_crs(childcare)
```
:::

## Visualising Geospatial Data

To visualise geospatial data, we can use `plot()` from base R. Alternatively, we can visualise the geospatial data with high cartographic quality and interactive manner using the **tmap** package.

::: panel-tabset
## Using Plot

```{r}
plot(st_geometry(network))

plot(childcare,
     add=T,
     col='red',
     pch = 19)
```

## Using Tmap

```{r}
tmap_mode('view')

tm_shape(childcare) + 
  tm_dots(col = 'red') + 
  tm_shape(network) +
  tm_lines()

```
:::

```{r}
#| echo: false

tmap_mode('plot')
```

## Network Constrained KDE (NKDE) Analysis using **spNetwork**

In this section, we will perform NKDE analysis by using appropriate functions provided in **spNetwork** package.

### Preparing the Lixels Objects

Before computing NKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) of **spNetwork** as shown in the code block below.

```{r}
lixels <- lixelize_lines(lines=network, 
                         lx_length=700, 
                         mindist = 375)
```

::: callout-note
**Arguments**

-   lines: The sf object with linestring geometry type to modify

-   lx_length: The length of a lixel

-   mindist: The minimum length of a lixel. After cut, if the length of the final lixel is shorter than the minimum distance, then it is added to the previous lixel. if NULL, then mindist = maxdist/10. Note that the segments that are already shorter than the minimum distance are not modified

There is another function called `lixelize_lines.mc()` which provide multicore support.
:::

### Generating Line Centre Points

Next, we will use `lines_center()` of **spNetwork** to generate a SpatialPointsDataFrame (i.e. samples) with line centre points.

```{r}
samples <- lines_center(lixels)
```

The points are located at center of the line based on the length of the line.

### Performing NKDE

To compute the NKDE:

```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1, nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  # agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
```

::: callout-note
-   spNetwork supports various kernel methods, including `quartic, triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov, or uniform`. In this case, `quartic` kernel is used.

-   *method* argument indicates that `simple` method is used to calculate the NKDE. Currently, spNetwork support three popular methods, they are:

    -   method="simple". This first method was presented by Xie et al. (2008) and proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an areal unit.
    -   method="discontinuous". The method is proposed by Okabe et al (2008), which equally "divides" the mass density of an event at intersections of lixels.
    -   method="continuous". If the discontinuous method is unbiased, it leads to a discontinuous kernel function which is a bit counter-intuitive. Okabe et al (2008) proposed another version of the kernel, that divide the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.

For more info, refer to the user guide of **spNetwork** package.
:::

### Visualising NKDE

To visualise the NKDE values, we have to perform a few preparation steps.

1.  Insert the computed density values (i.e. densities) into samples and lixels objects as density field.

```{r}
samples$density <- densities
lixels$density <- densities
```

2.  rescale the density values if required.

Since svy21 projection system is in meter, the computed density values are very small i.e. 0.0000005. We should rescale the density values from number of events per meter to number of events per kilometer.

```{r}
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

3.  Use **tmap** to plot interactive map

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
```

::: callout-note
Road segments with relatively higher density of childcare centres is shown in darker color (refer to legend). Road segments with relatively lower density of childcare centre is shown in lighter color.
:::

## Network Constrained G- and K-Function Analysis

In this section, we are going to perform Complete Spatial Randomness (CSR) test by using *kfunctions()* of **spNetwork** package.

The CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.

**Null Hypothesis** ($H_0$): The observed spatial point events (i.e., distribution of childcare centres) exhibit a uniform distribution over a street network in Punggol Planning Area.

If this hypothesis is rejected, we may infer that the distribution of childcare centres are spatially interacting and dependent on each other; as a result, they may form non-random patterns.

```{r}
# set seed for reproducibility
set.seed(1234)
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 39, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

::: callout-note
**Explanation on Arguments used**

-   `lines`: A SpatialLinesDataFrame with sampling points.
-   `points`: A SpatialPointsDataFrame representing points on the network.
-   `start`: Start value for evaluating the k and g functions.
-   `end`: Last value for evaluating the k and g functions.
-   `step`: Jump between two evaluations of the k and g functions.
-   `width`: Width of each donut for the g-function.
-   `nsim`: Number of Monte Carlo simulations (39 simulations in this example, more simulation may be required for inference).
-   `resolution`: Resolution for simulating random points on the network.
-   `conf_int`: Width of the confidence interval (default = 0.05).
-   For additional arguments, refer to the user guide of the spNetwork package.
:::

We can visualise the ggplot2 object of k-function by using the code chunk below.

```{r}
kfun_childcare$plotk + 
  labs(title ="K-Function") +
  theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5))
```

::: callout-note
**Intepretation of `kfunctions()` outputs**

-   `plotk`: A ggplot2 object representing the values of the k-function

-   `plotg`: A ggplot2 object representing the values of the g-function

-   `values`: A DataFrame with the values used to build the plots

see [kfunctions function - RDocumentation](https://www.rdocumentation.org/packages/spNetwork/versions/0.4.3.8/topics/kfunctions)

**Intepretation of the graph output**

The blue line is the empirical network K-function of the childcare centres in Punggol planning area. The gray envelope represents the results of the 39 simulations in the interval 2.5% - 97.5%.

Since the blue line between the distance of 250m-400m are below the gray area, we can infer that the childcare centres in Punggol planning area resemble regular pattern at the distance of 250m-400m.
:::
