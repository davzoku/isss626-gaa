---
title: "1A: Geospatial Data Wrangling with R"
subtitle: "In this exercise, we will learn to use R for geospatial data handling, including importing, transforming, wrangling, and visualizing data with sf, tidyverse, and ggplot2."
date: "Aug 24, 2024"
date-modified: "last-modified"
author: Teng Kok Wai (Walter)
execute:
  echo: true
  eval: true
  freeze: auto
  message: false
  warning: false
format:
  html:
    code-link: true
    toc: true
number-sections: true
number-offset: 1
editor: visual
---

## Exercise 1A Reference

[R for Geospatial Data Science and Analytics - 1Â  Geospatial Data Science with R](https://r4gdsa.netlify.app/chap01)

## Learning Outcome

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,
-   importing geospatial data by using appropriate functions of **sf** package,
-   importing aspatial data by using appropriate function of **readr** package,
-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,
-   assigning or transforming coordinate systems by using using appropriate *sf* functions,
-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,
-   performing geoprocessing tasks by using appropriate functions of **sf** package,
-   performing data wrangling tasks by using appropriate functions of **dplyr** package and
-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

## The Data

| Dataset                                     | Source                                                                            | Description                                              |
|---------------------------------------------|-----------------------------------------------------------------------------------|----------------------------------------------------------|
| **Master Plan 2014 Subzone Boundary (Web)** | [data.gov.sg](https://data.gov.sg/)                                               | Geospatial boundaries for Singapore's planning subzones. |
| **Pre-Schools Location**                    | [data.gov.sg](https://data.gov.sg/)                                               | Location data for pre-schools in Singapore.              |
| **Cycling Path**                            | [LTA DataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html) | Geospatial data for cycling paths in Singapore.          |
| **Singapore Airbnb Listings**               | [Inside Airbnb](http://insideairbnb.com/get-the-data.html)                        | Latest listing data for Airbnb properties in Singapore.  |

## Installing and Loading the R Packages

Two main R packages will be used in this exercise:

| Package       | Purpose                                              | Use Case in Exercise                          |
|---------------|------------------------------------------------------|-----------------------------------------------|
| **sf**        | Importing, managing, and processing geospatial data. | Handling and processing geospatial data in R. |
| **tidyverse** | Comprehensive set of tools for data science tasks.   | Importing, wrangling, and visualizing data.   |

### Tidyverse Sub-packages

The `tidyverse` package includes the following sub-packages used in this exercise:

| Sub-package | Purpose                          |
|-------------|----------------------------------|
| **readr**   | Importing CSV data.              |
| **readxl**  | Importing Excel worksheets.      |
| **tidyr**   | Manipulating and tidying data.   |
| **dplyr**   | Transforming and wrangling data. |
| **ggplot2** | Visualizing data.                |

To install and load these packages, use the following code:

```{r}
pacman::p_load(sf, tidyverse)
```

## Import Geospatial Data

The code block below uses st_read() function of sf package to import the `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame.

-   `dsn` refers to data source name
-   `layer` points to the file name.
-   more details: [st_read function - RDocumentation](https://www.rdocumentation.org/packages/sf/versions/0.2-2/topics/st_read)

### Import polygon feature data in shapefile format

```{r}
mpsz = st_read(dsn = "data/geospatial",
                  layer = "MP14_SUBZONE_WEB_PL")
```

::: callout-note
**Output Explanation:** The geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.
:::

### Import polyline feature data in shapefile format

The code block below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial",
                         layer = "CyclingPathGazette")
```

::: callout-note
**Output Explanation:** There are a total of 3138 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **svy21** projected coordinates system too.
:::

### Import GIS data in kml format

As compared to `st_read` for shapefiles, we need to pass the file extension when importing kml files.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

::: callout-note
**Output Explanation:** The `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.
:::

## Checking the Content of A Simple Feature Data Frame

There are different ways to retrieve information related to the content of a simple feature data frame.

### Working with *st_geometry()*

The column in the sf data.frame that contains the geometries is a list, of class `sfc`.

The code block below shows the general way to use `st_geometry()`. Alternative is mpsz\$geom or mpsz\[\[1\]\] to retrieve the geometry list-column.

```{r}
st_geometry(mpsz)
```

::: callout-note
**Output Explanation:** The print only displays *basic information* of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.
:::

### Working with *glimpse()*

To learn more about the associated attribute information in the data frame, we can use `glimpse` from `dplyr`.

```{r}
glimpse(mpsz)
```

::: callout-note
**Output Explanation:** *glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.
:::

### Working with *head()*

To reveal complete information of a feature object, we can use `head()` from R.

```{r}
head(mpsz, n=5)
```

::: callout-note
**Output Explanation:** It shows the top 5 rows from `mpsz`.
:::

## Plotting the Geospatial Data

This section covers visualization of geospatial features using `plot()` of R graphic.

```{r}
plot(mpsz)
```

::: callout-note
**Output Explanation:** The default plot of an sf object is a *multi-plot of all attributes*, up to a reasonable maximum as shown above.
:::

Alternatively, we can also choose the plot the sf object by *using a specific attribute* as shown in the code block below.

```{r}
plot(mpsz["PLN_AREA_N"])
```

::: callout-tip
For high cartographic quality plot, other R package such as tmap should be used.
:::

## Working with Map Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, **we need to ensure that both geospatial data are projected using similar coordinate system.**

**Projection transformation** is a method to project a simple feature data frame from one coordinate system to another coordinate system.

### Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code block below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code block below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

**Output Explanation:** Note that the EPSG code is 3414 now.

### Transforming the projection of preschool from wgs84 to svy21.

It is very common in geospatial analytics to transform the original data from geographic coordinate system (gcs) to projected coordinate system (pcs). **This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.**

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r echo=FALSE}
st_geometry(preschool)
```

**This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used.** This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code block below.

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
preschool3414 <- st_transform(preschool,
                              crs = 3414)
```

> Note: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.

Next, let us display the content of preschool3414 sf data frame as shown below.

```{r echo=FALSE}
st_geometry(preschool3414)
```

::: callout-note
**Output Explanation:** Note that it is in svy21 projected coordinate system now. Furthermore, for the *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.
:::

## Importing and Converting An Aspatial Data

In this section, we will learn how to process aspatial data such as `listing` of Inside Airbnb. It is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

We will first import the aspatial data and save it as a tibble dataframe and convert it into a simple feature dataframe.

### Import the aspatial data

Since `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code block below.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

**Output Explanation:** The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code block below shows *list()* of Base R instead of *glimpse()* is used to do the job.

```{r}
list(listings)
```

::: callout-note
**Output Explanation:** The. `listing` tibble data frame consists of 4252 rows and 16 columns. We will use the `latitude` and `longtitude` fields. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.
:::

The code block below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages

```{r}
listings_sf <- st_as_sf(listings,
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords*: argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
-   *crs*: argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).
-   *%\>%*: is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

::: callout-note
**Output Explanation:**: The table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.
:::

## Geoprocessing with *sf*

In addition to offering tools for managing geospatial data (such as importing, exporting, assigning, and transforming projections), the sf package also includes a wide range of geoprocessing functions for GIS analysis.

**Scenario:**

The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 meters of reserved land on both sides of the current cycling path. You are tasked with determining the extent of the land that needs to be acquired and its total area.

**Solution:**

Firstly, the [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) function of the **sf** package is used to compute the 5-meter buffers around the cycling paths.

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
buffer_cycling <- st_buffer(cyclingpath,
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code block below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

**Scenario:**

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**Solution:**

The code block below performs two operations at one go.

1.  identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html).
2.  [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

> **Warning**: You should not confuse with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).

The summary statistics of the newly derived *PreSch Count* field by using *summary()* is shown in the code block below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

Next *top_n()* from dplyr package is used with n=1 to list the planning subzone with the highest number of pre-school.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

**Exercise: Calculate the density of pre-school by planning subzone.**

To determine the **density of pre-schools by planning subzone**, the *st_area()* function from the **sf** package is used to calculate the area of each planning subzone, and the result is stored in a new `Area` column.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/index.html) package is used to compute the density by using the code block below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis (EDA)

In this section, we will learn how to use `ggplot2` to create functional and yet truthful statistical graphs for EDA purposes.

1.  We will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code block below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code block below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414,
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

**Exercise: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.**

```{r}
ggplot(data=mpsz3414,
       aes(y = `PreSch Count`,
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black",
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

::: callout-note
**Output Explanation:** The scatterplot shows a positive relationship between pre-school density (per kmÂ²) and pre-school count, showing that areas with higher density tend to have a greater number of pre-schools.
:::
