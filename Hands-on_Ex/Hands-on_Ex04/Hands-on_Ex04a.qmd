---
title: "4A: Spatial Weights and Applications"
subtitle: "In this exercise, we will learn to compute spatial weights, visualize spatial distributions, and create spatially lagged variables using various functions from R packages such as sf,spdep, and tmap."
# draft: true
date: "Sep 08, 2024"
date-modified: "last-modified"
author: Teng Kok Wai (Walter)
execute:
  echo: true
  eval: true
  freeze: true
  message: false
  warning: false
format:
  html:
    toc: true
number-sections: true
number-offset: 1
editor: visual
---

## Exercise 4A Reference

[R for Geospatial Data Science and Analytics - 8Â  Spatial Weights and Applications](https://r4gdsa.netlify.app/chap08.html)

## Overview

In this exercise, we will learn to compute spatial weights, visualize spatial distributions, and create spatially lagged variables using various functions from R packages such as **sf**, **spdep**, and **tmap**.

## Learning Outcome

-   Import geospatial data using functions from the **sf** package.
-   Import CSV data using functions from the **readr** package.
-   Perform relational joins using functions from the **dplyr** package.
-   Compute spatial weights with functions from the **spdep** package.
-   Calculate spatially lagged variables using functions from the **spdep** package.

## The Data

The following 2 datasets will be used in this exercise.

| **Data Set**                | **Description**                                                  | **Format**     |
|-----------------|---------------------------------------|-----------------|
| Hunan county boundary layer | Geospatial data set representing the county boundaries of Hunan  | ESRI Shapefile |
| Hunan_2012.csv              | Contains selected local development indicators for Hunan in 2012 | CSV            |

## Installing and Loading the R Packages

The following R packages will be used in this exercise:

| **Package**   | **Purpose**                                                                                                | **Use Case in Exercise**                                                                                  |
|--------------|------------------------|----------------------------------|
| **sf**        | Imports, manages, and processes vector-based geospatial data.                                              | Handling vector geospatial data such as the Hunan county boundary layer in shapefile format.              |
| **spdep**     | Provides functions for spatial dependence analysis, including spatial weights and spatial autocorrelation. | Computing spatial weights and creating spatially lagged variables.                                        |
| **tmap**      | Creates static and interactive thematic maps using cartographic quality elements.                          | Visualizing regional development indicators and plotting maps showing spatial relationships and patterns. |
| **tidyverse** | A collection of packages for data science tasks such as data manipulation, visualization, and modeling.    | Importing CSV files, wrangling data, and performing relational joins.                                     |
| **knitr**     | Enables dynamic report generation and integration of R code with documents.                                | Formatting output, creating tables, and generating reports for the exercise.                              |

To install and load these packages, use the following code:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Import Data and Preparation

In this section, we will perform 3 necessary steps to prepare the data for analysis.

### Import Geospatial Shapefile

Firstly, we will use [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

```{r}
dim(hunan)
```

### Import Aspatial csv File

Next, we will import *Hunan_2012.csv* into R by using `read_csv()` of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

```{r}
dim(hunan2012)
```

### Perform Relational Join

Before we perform relational join, let's observe the columns in each dataset and only select the columns that we need.

1.  `hunan` columns:

```{r}
print(colnames(hunan))
```

2.  `hunan2012` columns:

```{r}
print(colnames(hunan2012))
```

After merging:

```{r}
hunan_joined <- left_join(hunan,hunan2012)
print(colnames(hunan_joined))
```

Then only select the columns that we need:

```{r}
hunan <- hunan_joined %>%
  select(1:4, 7, 15)

print(colnames(hunan))
```

In the code above, we use the `left_join()` function to merge the `hunan` `SpatialPolygonsDataFrame` with the `hunan2012` dataframe. The join is based on the column named `County`, which is common to both datasets. This allows us to match rows by their corresponding counties.

After the join, the `select()` function is used to retain a subset of columns from the merged dataset. We can briefly observe the joined output below.

```{r}
head(hunan)
```

## Visualising Regional Development Indicator

To visualize the regional development indicator, we can prepare a base map and a choropleth map to show the distribution of GDPPC 2012 (GDP per capita) by using `qtm()` of **tmap** package.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

::: callout-note
**Intepretation** 

The choropleth map on the right visualizes the distribution of GDP per capita (GDPPC) for the year 2012 across the different counties in Hunan.

The counties are shaded in varying colors, ranging from light to dark, to represent different GDP per capita ranges. Darker shades indicate higher GDP per capita values, while lighter shades represent lower values. This visualization helps to identify regional economic disparities and highlights areas with higher or lower economic activity within Hunan province.

For example, we can observe that Changsha has the highest GDP per capital values in the Hunan region.
:::

## Computing Contiguity Spatial Weights

In this section, we will use [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.

::: callout-note
Contiguity means that two spatial units share a common border of non-zero length.


![Geographic adjacency based neighbors](img/queen-vs-rook-contiguity.png) 
From [Lab 7: Spatial Autocorrelation](https://crd230.github.io/lab7.html)

Operationally, we can further distinguish between a **rook** and a **queen** criterion of contiguity, in analogy to the moves allowed for the such-named pieces on a chess board.

The rook criterion defines neighbors by the existence of a common edge between two spatial units. The queen criterion is somewhat more encompassing and defines neighbors as spatial units sharing a common edge or a common vertex.

Using `poly2nb()` we can use the `queen` flag to toggle between queen and rook criteria.

For more info, see [Chapter 6 Contiguity-Based Spatial Weights \| Hands-On Spatial Data Science with R](https://spatialanalysis.github.io/handsonspatialdata/contiguity-based-spatial-weights.html)
:::

> The number of neighbors according to the queen criterion will always be at least as large as for the rook criterion.

First, we will compute the Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

::: callout-note
**Intepretation of Summary Reports**

1.  Both reports shows that there are 88 area units in Hunan.

2.  As expected, the total number of links (neighbor relationships) is slightly higher for the queen criterion (448) than for the rook criterion (440).

3.  Based on both criteria, the most connected region is **Region 85** with 11 links (using Queen criteria) and 10 links (using Rook criteria)

4.  Similarly, based on both criteria, the least connected region is **Region 30 and 65** with 1 links (using Queen and Rook criteria)
:::

For each polygon in the polygon object, `wm_q` and `wm_r` lists all neighboring polygons. For example, we can identify the most connected region.

```{r}
cat("The most connected county is", hunan$County[85])
```

To reveal the county names of the neighboring polygons, we can do the following:

```{r}
neighbour_counties <- wm_q[[85]]
print(neighbour_counties)

cat("Using Queen's method, the neighbours of ", hunan$County[85]," is", hunan$NAME_3[neighbour_counties])

```

We can also retrieve the GDPPC of these counties:

```{r}
hunan$GDPPC[neighbour_counties]
```

The printed output above shows that the GDPPC of Taoyuan's neighbouring counties.

To display the complete weight matrix, we can use `str()`.

```{r}
#| eval: false
#| output: false
str(wm_q)
```

## Visualising Contiguity Weights

To create a connectivity graph, we need points that represent each polygon, and we'll draw lines to connect neighboring points. Since we're working with polygons, we first need to find their central points, called **centroids**. We'll calculate these centroids using the **sf** package before creating the connectivity graph.

**Getting Latitude and Longitude of Polygon Centroids**

To make the connectivity graph, we must first obtain the points (centroids) for each polygon. This is more than just running `st_centroid` on our spatial object (`us.bound`). We need to store the coordinates in a separate data frame.

We'll use a mapping function to achieve this. The mapping function applies a specific function to each element in a vector and returns a vector of the same length. In this case, our input vector will be the geometry column of `us.bound`, and the function will be `st_centroid`. We'll use the `map_dbl` function from the **purrr** package to do this.

For longitude, we access the first coordinate value using \[\[1\]\], and for latitude, we access the second coordinate value using \[\[2\]\].

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Then, we use `cbind()` to combine longitude and lattude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

To verify that, the data is formatted correctly, we can observe the first few instances.

```{r}
head(coords)
```

To plot the continguity-based neighbours map, we can do the following:

```{r fig.width=12, fig.height=6}
par(mfrow=c(1,2))

plot(hunan$geometry, 
     main="Queen Contiguity")
plot(wm_q, 
     coords, 
     pch = 19, 
     cex = 0.6, 
     add = TRUE, 
     col= "red")

plot(hunan$geometry, 
     main="Rook Contiguity")
plot(wm_r, 
     coords, 
     pch = 19, 
     cex = 0.6, 
     add = TRUE, 
     col = "red")
```

![](img/queen-vs-rook.png) 

::: callout-note 

As observed from the previous sections, we understand that more links will be formed with the Queen's method. This is evident in the plot above.Some of these differences has been marked with blue boxes for better visualization. 

:::

## Computing Distance-based Neighbours

In this section, we will create distance-based weight matrices using the [`dnearneigh()`](https://r-spatial.github.io/spdep/reference/dnearneigh.html) function from the **spdep** package.

This function identifies neighboring region points based on their Euclidean distance. We can specify a range for the distances using the `bounds` argument, which takes lower (`d1=`) and upper (`d2=`) limits.

If the coordinates are not projected (i.e., in latitude and longitude) and are specified in the `x` object or provided as a two-column matrix with `longlat=TRUE`, the function will calculate great circle distances in kilometers, assuming the WGS84 reference ellipsoid.

### Determine the Cut-off Distance

Firstly, we need to determine the upper limit for distance band by using the steps below:

1.  Use the [`knearneigh()`](https://r-spatial.github.io/spdep/reference/knearneigh.html) function from the **spdep** package to create a matrix with the indices of the k nearest neighbors for each point.

```{r}
# get k nearest neighbour where k = 1 (default)
knearneigh(coords, k=1)
```

2.  Convert the `knn` object returned by `knearneigh()` into a neighbor list (`nb` class) using the [`knn2nb()`](https://r-spatial.github.io/spdep/reference/knn2nb.html) function. This list contains integer vectors representing the IDs of neighboring regions.

```{r}
# convert knn matrix to neighbour list for k = 1
k1 <- knn2nb(knearneigh(coords))
k1
```

3.  Calculate the length of neighbor relationship edges with the [`nbdists()`](https://r-spatial.github.io/spdep/reference/nbdists.html) function from **spdep**. The distances will be in the units of the coordinates if projected, or in kilometers if not.

```{r}
nbdists(k1, coords, longlat = TRUE)
```

4.  Simplify the list structure of the returned object using the [`unlist()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist) function from the base R package.

```{r}
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

::: callout-note
Using the summary report, we can observe that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.
:::

### Plotting Fixed Distance Weight Matrix

```{r}
# get max dist from k1dists rounded up to integer
max_dist <- as.integer(ceiling(max(k1dists)))

wm_d62 <- dnearneigh(x=coords, d1=0, d2=max_dist, longlat = TRUE)
wm_d62
```

::: callout-note
**Output Intepretation**

1.  The weight matrix shows 88 regions (counties).
2.  There are a total of 324 connections between all regions.
3.  The formula for **Percentage nonzero weights**:

$\text{Percentage nonzero weights} = \left( \frac{\text{Number of nonzero links}}{\text{Total possible links}} \right) \times 100$

and the total possible links can be computed as $n \times n=88 \times 88 = 7744$

Plugging in the numbers, we will get $\text{Percentage nonzero weights} = \left( \frac{324}{7744} \right) \times 100 \approx 4.18\%$

4.  The formula for average number of links: $\text{Average number of links} = \frac{\text{Total number of nonzero links}}{\text{Number of regions}} = \frac{324}{88} \approx 3.68$
:::

We can also use `str()` to display the content of `wm_d62` weight matrix.

```{r}
#| eval: false
#| output: false
str(wm_d62)
```

Another way to display the structure of the weight matrix is to combine [`table()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [`card()`](https://r-spatial.github.io/spdep/reference/card.html) of **spdep**.

```{r}
table(hunan$County, 
      card(wm_d62))
```

`n.comp.nb()` finds the number of disjoint connected subgraphs in the graph depicted by `nb.obj`.

see [Graph Components function - RDocumentation](https://www.rdocumentation.org/packages/spdep/versions/0.1-9/topics/Graph%20Components)

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

Above shows the number of connected components in the spatial neighbour network. The output of 1 indicates there is 1 connected component.

```{r}
table(n_comp$comp.id)
```

And this connected component comprises of 88 regions, indicating all regions are part of a single interconnected group.

### Plotting Fixed Distance Weight Matrix

We can plot the distance weight matrix as shown below:

```{r fig.width=8, fig.height=6}
par(mfrow=c(1,2))

plot(hunan$geometry, border="lightgrey", main="1st Nearest Neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)

plot(hunan$geometry, border="lightgrey", main="Distance Link")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

On the left plot, the red lines show the links of 1st nearest neighbours.

On the right plot, the red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

### Computing Adaptive Distance Weight Matrix

A fixed distance weight matrix typically shows that densely populated areas (like urban regions) have more neighbors, while sparsely populated areas (such as rural counties) have fewer neighbors. When there are many neighbors, the relationships between them are spread across a larger number of connections, creating a smoother effect.

To control the number of neighbours, we can set the `k` value.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Each county has exactly 6 neighbours.

```{r}
#| eval: false
#| output: false
str(knn6)
```

#### Computing Adaptive Distance Weight Matrix

```{r fig.width=8, fig.height=6}
plot(hunan$geometry, border="lightgrey", main="6 Nearest Neighbours")
plot(knn6, coords, add = TRUE, col = "red")
```

## Weights based on Inversed Distance Weight (IDW) Method

In this section, you will learn how to derive a spatial weight matrix based on Inversed Distance Weights method.

::: callout-note
In order to conform to Toblerâs first law of geography, a distance decay effect must be respected.

The inverse distance weight method assigns weights to neighbors based on their distance: closer neighbors get higher weights, and further ones get lower weights.

It works by taking the distance between two locations and calculating the weight as 1 divided by that distance.

For more info, see [Spatial Weights as Distance Functions](https://spatialanalysis.github.io/lab_tutorials/Spatial_Weights_as_Distance_Functions.html#creating-inverse-distance-functions-for-distance-bands).
:::

```{r}
dist <- nbdists(wm_q, 
                coords, 
                longlat = TRUE)
# apply 1/x on every element on list objects
ids <- lapply(dist, function(x) 1/(x))
```

## Row-standardised Weights Matrix

Next, we need to assign weights to each neighboring polygon. In this case, we'll use equal weights (style="W"), where each neighboring polygon gets a weight of **1/(number of neighbors)**. This means we take the value for each neighbor and divide it by the total number of neighbors, then sum these weighted values to calculate a summary measure, such as weighted income.

While this equal weighting approach is straightforward and easy to understand, it has a limitation: **polygons on the edges of the study area have fewer neighbors, which can lead to over- or underestimation of the actual spatial relationships (spatial autocorrelation) in the data.**

::: callout-tip
For simplicity, we use the style="W" option in this example, but keep in mind that other, potentially more accurate methods are available, such as style="B".
:::

```{r}
# note we are using queen's method here
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

::: callout-tip
The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.
:::

To see the weight of the 85th polygonâs 11 neighbors type:

```{r}
rswm_q$weights[85]
```

Each neighbor is assigned a 0.0909 of the total weight. This means that when R computes the average neighboring income values, each neighborâs income will be multiplied by 0.0909 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix by using the code block below.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[85]
```

Notice that the output has different weight of each neighbour. We can use summary report to observe the differences.

```{r}
summary(unlist(rswm_q$weights))
cat("\n-----------------------------\n")
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix

In this section, we will create 4 different spatial lagged variables:

1.  spatial lag with row-standardized weights,
2.  spatial lag as a sum of neighbouring values,
3.  spatial window average, and
4.  spatial window sum.

### Spatial Lag with Row-standardized Weights

Weâll compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

In the previous section, we retrieved the GDPPC of these 11 counties by using the code block below.

```{r}
nb1 <- wm_q[[85]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

> Question: Can you see the meaning of Spatial lag with row-standardized weights now? Spatial lag represents the average or sum of a variable (GDPPC) for a region's neighbors. In this context, the spatial lag for a region gives an idea of how that region's GDPPC relates to the GDPPC of its neighboring regions.
>
> With row-standardized weights (style="W"), each neighboring region is assigned an equal weight of 1/(number of neighbors). This ensures that the weights for all neighbors of a region sum to 1.

We can append the spatially lag GDPPC values onto hunan sf data frame by using the code block below:

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
head(hunan)
```

Next, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code block below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

Recall that in our previous observation, we made the statement that Changsha has the highest GDP per capital values in the Hunan region.

Using spatial lag values, we can observe that Yueyang has the *highest spatial lag GDP per capita, meaning its neighbors (on average) have the highest GDP per capita.*

### Spatial Lag as a Sum of Neighboring Values

To calculate spatial lag as the sum of neighboring values, we can assign binary weights (where each neighbor gets a weight of 1).

To do this, we go back to our list of neighbors and use a function to assign these binary weights. We then use the `glist` argument in the `nb2listw` function to set these weights explicitly.

We start by using `lapply` to assign a weight of 1 to each neighbor. `lapply` is a function we have been using to work with the neighbors list in previous notebooks; it applies a specified function to each value in the neighbors list.

```{r}
# Create binary weights for each neighbor
# uses lapply to go through each element of the neighbors list (wm_q).
# The function '0 * x + 1' assigns a weight of 1 to each neighbor.
b_weights <- lapply(wm_q, function(x) 0*x + 1)

# Convert the neighbor list to a spatial weights list object
# 'nb2listw' converts the neighbors list (wm_q) into a weights list.
# 'glist = b_weights' explicitly sets the weights to the binary weights created above.
# 'style = "B"' specifies binary weighting style, where each neighbor has equal weight (1).
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw` to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

> Question: Can you understand the meaning of Spatial lag as a sum of neighboring values now?
>
> By assigning binary weights (where each neighbor is given a weight of 1), we calculate the spatial lag by summing the values of this variable for all neighbors. This means that the spatial lag reflects the combined influence or total value contributed by the neighboring regions, providing an idea of the overall regional context or neighborhood effect around a specific area.

Next, we will append the `lag_sum` GDPPC field into `hunan` sf data frame by using the code block below.

```{r}
hunan <- left_join(hunan, lag.res)
```

Now, we can plot the GDPPC, Spatial Lag GDPPC, Spatial Lag Sum GDPPC for comparison using the code block below.

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_gdppc, lag_sum_gdppc, asp=1, ncol=3)
```

### Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
```

Let us take a good look at the neighbour list of area 85 by using the code block below.

```{r}
wm_qs[[85]]
```

Notice that now region 85 has 12 neighbours instead of 11.

Now we obtain weights with `nb2listw()`.

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

::: callout-note
The third command line on the code chunk above renames the field names of *lag_wm_q1.res* object into *NAME_3* and *lag_window_avg GDPPC* respectively.
:::

Next, the code chunk below will be used to append *lag_window_avg GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, `qtm()` of **tmap** package is used to plot the **lag_gdppc** and **w_ave_gdppc** maps next to each other for quick comparison.

```{r fig.width=12, fig.height=8}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

::: callout-tip
For more effective comparison, it is advisable to use the core tmap mapping functions.
:::

### Spatial Window Sum

> The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Notice that now region 85 has 12 neighbours instead of 11.

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with `lag.listw()`.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Note: The second command line on the code chunk above renames the field names of *w_sum_gdppc.res* object into *NAME_3* and *w_sum GDPPC* respectively.

Next, the code chunk below will be used to append *w_sum GDPPC* values onto *hunan* sf data.frame by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, `qtm()` of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r fig.width=12, fig.height=8}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
