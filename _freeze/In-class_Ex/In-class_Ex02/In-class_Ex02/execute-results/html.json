{
  "hash": "4c83f98bbcd407bc7fb3c41bac847ba1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 2\"\nsubtitle: \"#todo\"\ndate: \"Sep 02, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true # Include the source code in output\n  eval: true\n  freeze: auto\n  message: false\n  warning: false # if false, don't include warnings in the output\nformat:\n  html:\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n\n## Exercise Reference\n\n[ISSS626 Geospatial Analytics and Applications - In-class Exercise 2: Spatial Point Patterns Analysis: spatstat methods](https://isss626-ay2024-25aug.netlify.app/in-class_ex/in-class_ex02/in-class_ex02-sppa)\n\n## Learning Outcome\n\n### Short Sentence\n\n\"In this exercise, we will learn to analyze spatial point patterns using `spatstat` methods, including installing necessary packages, creating spatial objects, performing kernel density estimation, and applying edge correction methods.\"\n\n### Point Form\n\n**Learning Outcomes:**\n\n- Understand how to handle the retired R package such as **maptools**\n- Understand the difference in usage of `st_combine()` and `st_union()` in the **sf** package.\n- Recap on usage of the **spatstat** package for analyzing two-dimensional spatial point patterns.\n- Recap on conversion steps of **sf** data frames to **ppp** and **owin** objects using `as.ppp()` and `as.owin()` functions for point pattern analysis.\n- Recap on Kernel Density Estimation (KDE) on spatial point events and visualize results using`spatstat.geom` methods.\n- Understand importance of setting random seed for reproducible results when applying Monte Carlo simulations for spatial analysis.\n- Practice importing and visualizing data from regional data sources in preparation for Take Home Assignment 1\n\n## How to Handle Retired R Packages\n\nIn our work, we might need to use retired R packages. In this section, we will see how we can use a retired package such as **maptools**.\n\nAlthough **maptools** is retired and removed from CRAN, we can still download from [Posit Public Package Manager](https://packagemanager.posit.co/client/#/repos/cran/setup?snapshot=2023-10-13&distribution=windows&r_environment=ide) snapshots by using the code block below.\n\n::: callout-tip\nInclude `#| eval: false` in the installation code block to avoid repetitively downloads of **maptools** whenever the Quarto document is rendered.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\n\n\n## Understanding the Salient Differences Between `st_combine()` and `st_union()`\n\nIn **sf** package, there are two functions allow us to combine multiple simple features into one simple features. They are [`st_combine()`](https://r-spatial.github.io/sf/reference/geos_combine.html) and `st_union()`.\n\n::: callout-tip\n-   `st_combine()` returns a single, combined geometry, with no resolved boundaries; returned geometries may well be invalid.\n\n-   If y is missing, `st_union(x)` returns a single geometry with resolved boundaries, else the geometries for all unioned pairs of x\\[i\\] and y\\[j\\].\n\nsee [Combine or union feature geometries — geos_combine • sf](https://r-spatial.github.io/sf/reference/geos_combine.html#:~:text=st_combine%20returns%20a%20single%2C%20combined,%5D%20and%20y%5Bj%5D%20.)\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Understanding the `spatstat` Package\n\n[**spatstat**](https://spatstat.org/) R package is a comprehensive open-source toolbox for analysing Spatial Point Patterns. Focused mainly on two-dimensional point patterns, including multitype or marked points, in any spatial region.\n\nIt comprises of many sub-packages for specific usage.\n\n| **Package**                                                                                       | **Description**                                                                                      |\n|---------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------|\n| [**spatstat**](https://cran.r-project.org/web/packages/spatstat/index.html)                       | Contains documentation and introductory material, including beginner’s guides, vignettes, and demos.  |\n| [**spatstat.data**](https://cran.r-project.org/web/packages/spatstat.data/index.html)              | Contains all datasets required for the `spatstat` package.                                            |\n| [**spatstat.utils**](https://cran.r-project.org/web/packages/spatstat.utils/index.html)            | Provides basic utility functions for use within `spatstat`.                                           |\n| [**spatstat.univar**](https://cran.r-project.org/web/packages/spatstat.univar/spatstat.univar.pdf) | Contains functions for estimating and manipulating probability distributions of 1-dimensional random variables. |\n| [**spatstat.sparse**](https://cran.r-project.org/web/packages/spatstat.sparse/spatstat.sparse.pdf) | Functions for handling sparse arrays and performing linear algebra operations.                       |\n| [**spatstat.geom**](https://cran.r-project.org/web/packages/spatstat.geom/index.html)             | Defines spatial objects (e.g., point patterns, windows, pixel images) and includes geometrical operations. |\n| [**spatstat.random**](https://cran.r-project.org/web/packages/spatstat.random/index.html)          | Functions for generating random spatial patterns and simulating models.                               |\n| [**spatstat.explore**](https://cran.r-project.org/web/packages/spatstat.explore/index.html)        | Code for exploratory data analysis and nonparametric spatial data analysis.                           |\n| [**spatstat.model**](https://cran.r-project.org/web/packages/spatstat.model/index.html)            | Code for model-fitting, diagnostics, and formal inference within spatial data analysis.               |\n| [**spatstat.linnet**](https://cran.r-project.org/web/packages/spatstat.linnet/index.html)          | Defines spatial data on linear networks and performs geometrical operations and statistical analysis. |\n\n## Creating `ppp` Objects from sf data.frame\n\nWe can derive an `ppp` object layer directly from a sf tibble data.frame using [`as.ppp()`](https://search.r-project.org/CRAN/refmans/spatstat.geom/html/as.ppp.html) from [**spatstat.geom**](https://cran.r-project.org/web/packages/spatstat.geom/spatstat.geom.pdf).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\nplot(childcare_ppp)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(childcare_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n```\n\n\n:::\n:::\n\n\n\nFrom the output above, we can observe the properties of the `ppp` objects.\n\n## Creating ***owin*** object from sf data.frame\n\nWe can create **owin** object from polygon sf tibble data.frame using `as.owin()` of **spatstat.geom**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\nplot(sg_owin)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sg_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWindow: polygonal boundary\n80 separate polygons (35 holes)\n                  vertices         area relative.area\npolygon 1            14650  6.97996e+08      8.93e-01\npolygon 2 (hole)         3 -2.21090e+00     -2.83e-09\npolygon 3              285  1.61128e+06      2.06e-03\npolygon 4 (hole)         3 -2.05920e-03     -2.63e-12\npolygon 5 (hole)         3 -8.83647e-03     -1.13e-11\npolygon 6              668  5.40368e+07      6.91e-02\npolygon 7               44  2.26577e+03      2.90e-06\npolygon 8               27  1.50315e+04      1.92e-05\npolygon 9              711  1.28815e+07      1.65e-02\npolygon 10 (hole)       36 -4.01660e+04     -5.14e-05\npolygon 11 (hole)      317 -5.11280e+04     -6.54e-05\npolygon 12 (hole)        3 -3.41405e-01     -4.37e-10\npolygon 13 (hole)        3 -2.89050e-05     -3.70e-14\npolygon 14              77  3.29939e+05      4.22e-04\npolygon 15              30  2.80002e+04      3.58e-05\npolygon 16 (hole)        3 -2.83151e-01     -3.62e-10\npolygon 17              71  8.18750e+03      1.05e-05\npolygon 18 (hole)        3 -1.68316e-04     -2.15e-13\npolygon 19 (hole)       36 -7.79904e+03     -9.97e-06\npolygon 20 (hole)        4 -2.05611e-02     -2.63e-11\npolygon 21 (hole)        3 -2.18000e-06     -2.79e-15\npolygon 22 (hole)        3 -3.65501e-03     -4.67e-12\npolygon 23 (hole)        3 -4.95057e-02     -6.33e-11\npolygon 24 (hole)        3 -3.99521e-02     -5.11e-11\npolygon 25 (hole)        3 -6.62377e-01     -8.47e-10\npolygon 26 (hole)        3 -2.09065e-03     -2.67e-12\npolygon 27              91  1.49663e+04      1.91e-05\npolygon 28 (hole)       26 -1.25665e+03     -1.61e-06\npolygon 29 (hole)      349 -1.21433e+03     -1.55e-06\npolygon 30 (hole)       20 -4.39069e+00     -5.62e-09\npolygon 31 (hole)       48 -1.38338e+02     -1.77e-07\npolygon 32 (hole)       28 -1.99862e+01     -2.56e-08\npolygon 33              40  1.38607e+04      1.77e-05\npolygon 34 (hole)       40 -6.00381e+03     -7.68e-06\npolygon 35 (hole)        7 -1.40545e-01     -1.80e-10\npolygon 36 (hole)       12 -8.36709e+01     -1.07e-07\npolygon 37              45  2.51218e+03      3.21e-06\npolygon 38             142  3.22293e+03      4.12e-06\npolygon 39             148  3.10395e+03      3.97e-06\npolygon 40              75  1.73526e+04      2.22e-05\npolygon 41              83  5.28920e+03      6.76e-06\npolygon 42             211  4.70521e+05      6.02e-04\npolygon 43             106  3.04104e+03      3.89e-06\npolygon 44             266  1.50631e+06      1.93e-03\npolygon 45              71  5.63061e+03      7.20e-06\npolygon 46              10  1.99717e+02      2.55e-07\npolygon 47             478  2.06120e+06      2.64e-03\npolygon 48             155  2.67502e+05      3.42e-04\npolygon 49            1027  1.27782e+06      1.63e-03\npolygon 50 (hole)        3 -1.16959e-03     -1.50e-12\npolygon 51              65  8.42861e+04      1.08e-04\npolygon 52              47  3.82087e+04      4.89e-05\npolygon 53               6  4.50259e+02      5.76e-07\npolygon 54             132  9.53357e+04      1.22e-04\npolygon 55 (hole)        3 -3.23310e-04     -4.13e-13\npolygon 56               4  2.69313e+02      3.44e-07\npolygon 57 (hole)        3 -1.46474e-03     -1.87e-12\npolygon 58            1045  4.44510e+06      5.68e-03\npolygon 59              22  6.74651e+03      8.63e-06\npolygon 60              64  3.43149e+04      4.39e-05\npolygon 61 (hole)        3 -1.98390e-03     -2.54e-12\npolygon 62 (hole)        4 -1.13774e-02     -1.46e-11\npolygon 63              14  5.86546e+03      7.50e-06\npolygon 64              95  5.96187e+04      7.62e-05\npolygon 65 (hole)        4 -1.86410e-02     -2.38e-11\npolygon 66 (hole)        3 -5.12482e-03     -6.55e-12\npolygon 67 (hole)        3 -1.96410e-03     -2.51e-12\npolygon 68 (hole)        3 -5.55856e-03     -7.11e-12\npolygon 69             234  2.08755e+06      2.67e-03\npolygon 70              10  4.90942e+02      6.28e-07\npolygon 71             234  4.72886e+05      6.05e-04\npolygon 72 (hole)       13 -3.91907e+02     -5.01e-07\npolygon 73              15  4.03300e+04      5.16e-05\npolygon 74             227  1.10308e+06      1.41e-03\npolygon 75              10  6.60195e+03      8.44e-06\npolygon 76              19  3.09221e+04      3.95e-05\npolygon 77             145  9.61782e+05      1.23e-03\npolygon 78              30  4.28933e+03      5.49e-06\npolygon 79              37  1.29481e+04      1.66e-05\npolygon 80               4  9.47108e+01      1.21e-07\nenclosing rectangle: [2667.54, 56396.44] x [15748.72, 50256.33] units\n                     (53730 x 34510 units)\nWindow area = 781945000 square units\nFraction of frame area: 0.422\n```\n\n\n:::\n:::\n\n\n\nAs shown above, we can display the summary information of the owin object class.\n\n## Combining point events object and owin object\n\nTo combine point events object and owin object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp = childcare_ppp[sg_owin]\nplot(childcareSG_ppp)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Kernel Density Estimation of Spatial Point Event\n\nIn this section, we will show why we should re-scale to appropriate unit of measurement before performing KDE.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_adaptive_m <- adaptive.density(\n  childcareSG_ppp,\n  method=\"kernel\")\n\nchildcareSG_ppp.km <- rescale.ppp(childcareSG_ppp,\n                                  1000,\n                                  \"km\")\n\nkde_childcareSG_adaptive_km <- adaptive.density(\n  childcareSG_ppp.km,\n  method=\"kernel\")\n\n\npar(mfrow=c(1,2))\n\nplot(kde_childcareSG_adaptive_m)\nplot(kde_childcareSG_adaptive_km)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-8-1.png){width=1536}\n:::\n:::\n\n\n\n\nFrom the output above, we can notice that the plot on the right has a more interpretable scale range from 0-40km range as compared to the left plot where rescaling was not performed.\n\n## Kernel Density Estimation\n\nThere is 2 different ways to convert KDE output into grid object. `spatstat.geom` is preferred.\n\n::: panel-tabset\n### spatstat.geom method\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_ad <- as(\n  kde_childcareSG_adaptive_km,\n  \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_ad)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n### maptools method\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_ad <- maptools::as.SpatialGridDataFrame.im(\n  kde_childcareSG_adaptive_km)\nspplot(gridded_kde_childcareSG_ad)\n```\n:::\n\n\n\n:::\n\n## Kernel Density Estimation\n\n### Visualising KDE using `tmap`\n\nTo visualize KDE in raster output using `tmap`:\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kde_childcareSG_ad_raster) +\n  tm_raster(palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n## Extracting Study Area Using `sf` Objects\n\nTo extract and create an ppp object showing child care services and within Punggol Planning Area:\n\n::: callout-tip\n`filter()` of dplyr package should be used to extract the target planning areas.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg_owin <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"PUNGGOL\") %>%\n  as.owin()\n\nchildcare_pg = childcare_ppp[pg_owin]\n\nplot(childcare_pg)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n## Monte Carlo Simulation\n\n::: callout-tip\nIn order to ensure reproducibility, it is important to include the code block below before using spatstat functions involve Monte Carlo simulation\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n\n## Edge Correction Methods of `spatstat`\n\nIn spatstat, edge correction methods are used to **handle biases that arise when estimating spatial statistics near the boundaries of a study region**. These corrections are **essential for ensuring accurate estimates in spatial point pattern analysis**, especially for summary statistics like the K-function, L-function, pair correlation function, etc.\n\n\n| Method       | Description                                                                                                                                               |\n|--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **none**     | No edge correction is applied. Assumes no bias at the edges, which may lead to underestimation of statistics near the boundaries.                          |\n| **isotropic**| Corrects for edge effects by assuming the point pattern is isotropic (uniform in all directions) and compensates for missing neighbors outside the boundary.|\n| **translate**| (Translation Correction) Uses translation correction by translating the observation window so every point lies entirely within it, then averaging statistics over all translations.|\n| **Ripley**   | (Ripley’s Correction) Similar to isotropic correction, but specifically tailored for Ripley’s K-function and related functions. Adjusts the expected number of neighbors near edges based on the window's shape and size.|\n| **border**   | Border correction reduces bias by only considering points far enough from the boundary so that their neighborhood is fully contained within the window, minimizing edge effects. |\n\n\n## Geospatial Analytics for Social Good: Thailand Road Accident Case Study\n\nThis section is in preparation of [Take-home Exercise 1: Geospatial Analytics for Public Good](https://isss626-ay2024-25aug.netlify.app/take-home_ex01)\n\n### Background\n\nFor an overview of the road traffic accidents in Thailand, you may refer to:\n\n-   [Road traffic injuries](https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries), WHO.\n-   [Road traffic deaths and injuries in Thailand](https://cdn.who.int/media/docs/default-source/thailand/roadsafety/overview-en-final-25-7-19.pdf?sfvrsn=f9d7a862_2)\n\n### The Study Area\n\nThe study area is [Bangkok Metropolitan Region](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region).\n\n![](img/BMR.png)\n\n::: callout-note\nThe projected coordinate system of Thailand is **WGS 84 / UTM zone 47N** and the EPSG code is [32647](https://epsg.io/32647).\n:::\n\n### The Data\n\nFor the purpose of this exercise, three basic data sets are needed, they are:\n\n- [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n- [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n- [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n#### Traffic Accident Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"data/geospatial/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %>%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(rdacc_sf)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Administrative Boundary\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# country\nadminboundary0 <- st_read(dsn = \"data/geospatial\",\n                layer = \"tha_admbnda_adm0_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm0_rtsd_20220121' from data source \n  `/Users/walter/code/isss626/isss626-gaa/In-class_Ex/In-class_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1 feature and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# # province\n# adminboundary1 <- st_read(dsn = \"data/geospatial\",\n#                 layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\n# # district\n# adminboundary2 <- st_read(dsn = \"data/geospatial\",\n#                 layer = \"tha_admbnda_adm2_rtsd_20220121\")\n\n# # sub-district\n# adminboundary3 <- st_read(dsn = \"data/geospatial\",\n#                 layer = \"tha_admbnda_adm3_rtsd_20220121\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(adminboundary0, max.plot=1)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot(adminboundary1)\n# plot(adminboundary2)\n# plot(adminboundary3)\n```\n:::\n\n\n\n\n\n#### Thai Roads\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- st_read(dsn = \"data/geospatial\",\n                layer = \"hotosm_tha_roads_lines_shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `/Users/walter/code/isss626/isss626-gaa/In-class_Ex/In-class_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n```\n\n\n:::\n:::\n\n\n\n<!--\nComment out as it is slow to render\n```r\nplot(roads, max.plot=1)\n```\n-->\n\n<!--\n## Visualising the Accident Data\n\n```r\n#| echo: false\n#| eval: false\ntmap_mode(\"plot\")\nacled_sf %>%\n  filter(year == 2023 |\n           event_type == \"Political violence\") %>%\n  tm_shape()+\n  tm_dots()\ntmap_mode(\"plot\")\n```\n\n-->",
    "supporting": [
      "In-class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}