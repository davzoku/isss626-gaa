{
  "hash": "18c950097b52b8d7f22fd9d548e735c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 8\"\nsubtitle: \"In this exercise, we will go through a sample exercise for Take-Home Exercise 3B and In-Class Exercise 08, which supplement what we have learnt in Hands-On Exercise 8.\"\n# draft: true\ndate: \"Oct 21, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true # Include the source code in output\n  eval: true\n  freeze: auto\n  message: false\n  warning: false # if false, don't include warnings in the output\nformat:\n  html:\n    code-link: true\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n## Exercise Reference\n\n- NA\n\n\n## Overview\n\nIn this exercise, we will go through a sample exercise for Take-Home Exercise 3B and In-Class Exercise 08, which supplement what we have learnt in Hands-On Exercise 8.\n\n\n## Import the R Packages\n\nThe following R packages will be used in this exercise:\n\n| **Package** | **Purpose** | **Use Case in Exercise** |\n|---------------|----------------------------|------------------------------|\n| **tidyverse** | A collection of R packages for data manipulation and visualization. | Data wrangling, cleaning, and visualization tasks. |\n| **sf** | Provides tools for handling spatial data. | Importing and managing geospatial data. |\n| **httr** | Simplifies working with URLs and HTTP requests. | Accessing APIs and retrieving data from web services. |\n| **jsonlite** | Handles JSON data in R. | Parsing and working with JSON responses from APIs. |\n| **rvest** | Facilitates web scraping. | Extracting data from websites. |\n\nTo install and load these packages, use the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, httr, jsonlite, rvest)\n```\n:::\n\n\n\n## Data Wrangling\n\nThe HDB resale data can be downloaded from [here](https://data.gov.sg/datasets?query=resale&page=1&resultId=d_8b84c4ee58e3cfc0ece0d773c8ca6abc). The dataset contains resale flat prices based on registration date from Jan 2017 to Sep 2024.\n\nThe code below reads the raw CSV file containing the resale flat data and filters it to include only records from January 2023 to September 2024.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/raw_data/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n\nThe following code tidies the data by creating new columns:\n- `address`: Combines `block` and `street_name` to form a complete address.\n- `remaining_lease_yr`: Extracts the remaining lease years as an integer.\n- `remaining_lease_mth`: Extracts the remaining lease months as an integer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\n\nNext, we filter the tidy dataset to include only records from September 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy %>%\n  filter(month == \"2024-09\")\n```\n:::\n\n\n\nThen, we generate a sorted list of unique addresses from the filtered dataset. This will be used to retrieve geographical coordinates.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_selected$address))\n```\n:::\n\n\n\nIn the code below, the `get_coords` function retrieves latitude and longitude coordinates for each address in the list. It uses the OneMap API to query addresses and returns a dataframe with postal codes and geographical coordinates:\n- If a single result is found, the coordinates are retrieved and stored.\n- If multiple results are found, addresses with \"NIL\" as postal are dropped, and the top result is selected.\n- If no valid results are found, `NA` is stored.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n\n\nWe apply the function to the list of addresses and the retrieved coordinates are saved as an RDS file for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n\nwrite_rds(coords, \"data/rds/coords.rds\")\n```\n:::\n\n\n\n\nThis concludes the sample exercise on how to handle the dataset for Take-Home Exercise 3B.\n\n---\n\nWe will proceed with In-Class Exercise 08 next.\n\n\n## Import the R Packages\n\nThe following R packages will be used in this exercise:\n\n| **Package**    | **Purpose**                                                         | **Use Case in Exercise**                                          |\n|----------------|--------------------------------------------------------------------|-------------------------------------------------------------------|\n| **sf**         | Handles spatial data for vector operations.                       | Importing and manipulating geospatial data.                       |\n| **spdep**      | Provides spatial dependence analysis tools.                        | Conducting spatial autocorrelation and spatial weights analysis.  |\n| **GWmodel**    | Implements Geographically Weighted Models.                         | Building and analyzing geographically weighted regression models. |\n| **SpatialML**  | Supports machine learning models with spatial data.                | Applying machine learning techniques to spatial datasets.         |\n| **kableExtra** | Enhances table creation for displaying results.                    | Creating well-formatted tables for presenting data summaries.     |\n| **tmap**       | Creates thematic maps for spatial data visualization.              | Visualizing geospatial data and model results.                    |\n| **rsample**    | Facilitates data resampling techniques for statistical modeling.   | Splitting data into training and testing sets.                    |\n| **Metrics**    | Provides performance metrics for model evaluation.                 | Assessing accuracy, RMSE, and other evaluation metrics.           |\n| **tidyverse**  | A suite of packages for data manipulation and visualization.       | Data wrangling, cleaning, and visualization tasks.                |\n| **olsrr**      | Tools for OLS regression diagnostics and variable selection.       | Diagnosing and improving multiple linear regression models.       |\n\nTo install and load these packages, use the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, kableExtra,\n               tmap, rsample, Metrics, tidyverse, olsrr)\n```\n:::\n\n\n\n## The Data\n\nThe data file `mdata.rds` consists of the following information:\n\n| **Dataset Type**                | **Description**                                                                                                         | **Source & Format**                                                                                                   |\n|---------------------------------|-------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|\n| **Aspatial Dataset**            | HDB Resale data: A list of HDB resale transacted prices in Singapore from Jan 2017 onwards.                            | Data.gov.sg, CSV format                                                                                               |\n| **Geospatial Dataset**          | *MP14_SUBZONE_WEB_PL*: URA 2014 Master Plan Planning Subzone boundary data.                                             | Data.gov.sg, ESRI Shapefile format                                                                                    |\n| **Locational Factors with Geographic Coordinates** | Eldercare data: A list of eldercare locations in Singapore.                                                                 | Data.gov.sg, Shapefile format                                                                                        |\n|                                 | Hawker Centre data: A list of hawker centres in Singapore.                                                             | Data.gov.sg, GeoJSON format                                                                                           |\n|                                 | Parks data: A list of parks in Singapore.                                                                               | Data.gov.sg, GeoJSON format                                                                                           |\n|                                 | Supermarket data: A list of supermarkets in Singapore.                                                                 | Data.gov.sg, GeoJSON format                                                                                           |\n|                                 | CHAS Clinics data: A list of CHAS clinics in Singapore.                                                                | Data.gov.sg, GeoJSON format                                                                                           |\n|                                 | Childcare Service data: A list of childcare services in Singapore.                                                     | Data.gov.sg, GeoJSON format                                                                                           |\n|                                 | Kindergartens data: A list of kindergartens in Singapore.                                                              | Data.gov.sg, GeoJSON format                                                                                           |\n|                                 | MRT data: A list of MRT/LRT stations with names and codes.                                                             | Datamall.lta.gov.sg, Shapefile format                                                                                 |\n|                                 | Bus Stops data: A list of bus stops in Singapore.                                                                      | Datamall.lta.gov.sg, Shapefile format                                                                                 |\n| **Locational Factors without Geographic Coordinates** | Primary School data: General information on schools in Singapore.                                                    | Data.gov.sg, CSV format                                                                                               |\n|                                 | CBD Coordinates: Central Business District coordinates obtained from Google.                                           | Google                                                                                                                |\n|                                 | Shopping Malls data: A list of shopping malls in Singapore.                                                           | Wikipedia, [List of shopping malls in Singapore](https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore)  |\n|                                 | Good Primary Schools: A ranking of primary schools based on popularity.                                               | [Local Salary Forum](https://www.salary.sg/2021/best-primary-schools-2021-by-popularity)                              |\n\nTo load the dataset into R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/rds/mdata.rds\")\n```\n:::\n\n\n\n## Data Sampling\n\nNote that in this case, we use random sampling method to split the data into training and testing sets. No stratification was applied. (We should adopt a stratification method for Take-Home Exercise 3B to ensure better representation across subgroups.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(mdata, \n                              prop = 6.5/10,) \ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/rds/train_data.rds\")\nwrite_rds(test_data, \"data/rds/test_data.rds\")\n```\n:::\n\n\n\n\n### Multicolinearity Check\n\nMulticollinearity can affect the stability and interpretability of a regression model. To identify potential multicollinearity, a correlation matrix is generated for the variables in the dataset, excluding spatial components.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\n\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17]) #columns 2 to 17 to plot Correlation Matrix\n```\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\n\n\n## Building Non-Spatial Multiple Linear Regression\n\nWhen constructing predictive models, it is advisable to avoid including all variables to avoid overfitting. Instead, only the most relevant predictors that contribute to the model's performance should be selected.\n\nOn the other hand, explanatory models aim to understand relationships between variables and identify which factors have significant effects on the outcome. In such cases, including all variables can help provide a clearer picture of these relationships.\n\nIn this example, we build a non-spatial multiple linear regression model using the training data,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build model\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\n\n# Check model with olsrr\nolsrr::ols_regress(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.859       RMSE                    61604.120 \nR-Squared                   0.737       MSE                3800583670.022 \nAdj. R-Squared              0.737       Coef. Var                  14.193 \nPred R-Squared              0.737       AIC                    257320.224 \nMAE                     47485.556       SBC                    257436.117 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares           DF       Mean Square       F          Sig. \n--------------------------------------------------------------------------------\nRegression    1.100899e+14           14      7.863561e+12     2069.04    0.0000 \nResidual      3.922202e+13        10320    3800583670.022                       \nTotal         1.493119e+14        10334                                         \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                 \n------------------------------------------------------------------------------------------------------------------\n                   model          Beta    Std. Error    Std. Beta       t        Sig          lower         upper \n------------------------------------------------------------------------------------------------------------------\n             (Intercept)    107601.073     10601.261                  10.150    0.000     86820.546    128381.599 \n          floor_area_sqm      2780.698        90.579        0.164     30.699    0.000      2603.146      2958.251 \n            storey_order     14299.298       339.115        0.234     42.167    0.000     13634.567     14964.029 \n    remaining_lease_mths       344.490         4.592        0.442     75.027    0.000       335.489       353.490 \n                PROX_CBD    -16930.196       201.254       -0.586    -84.124    0.000    -17324.693    -16535.700 \n        PROX_ELDERLYCARE    -14441.025       994.867       -0.079    -14.516    0.000    -16391.157    -12490.893 \n             PROX_HAWKER    -19265.648      1273.597       -0.083    -15.127    0.000    -21762.144    -16769.151 \n                PROX_MRT    -32564.272      1744.232       -0.105    -18.670    0.000    -35983.305    -29145.240 \n               PROX_PARK     -5712.625      1483.885       -0.021     -3.850    0.000     -8621.328     -2803.922 \n               PROX_MALL    -14717.388      2007.818       -0.044     -7.330    0.000    -18653.100    -10781.675 \n        PROX_SUPERMARKET    -26881.938      4189.624       -0.035     -6.416    0.000    -35094.414    -18669.462 \nWITHIN_350M_KINDERGARTEN      8520.472       632.812        0.072     13.464    0.000      7280.038      9760.905 \n   WITHIN_350M_CHILDCARE     -4510.650       354.015       -0.074    -12.741    0.000     -5204.589     -3816.711 \n         WITHIN_350M_BUS       813.493       222.574        0.020      3.655    0.000       377.205      1249.781 \n       WITHIN_1KM_PRISCH     -8010.834       491.512       -0.102    -16.298    0.000     -8974.293     -7047.376 \n------------------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n\n### Multicolinearity Check with VIF\n\nVariance Inflation Factor (VIF) analysis is conducted to detect the presence of multicollinearity among the predictors. High VIF values suggest redundancy, indicating that some predictors might need to be removed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvif <- performance::check_collinearity(price_mlr)\n\nkable(vif,\n      caption = \"Variance Inflation Factor (VIF) Results\") %>%\n  kable_styling(font_size = 18)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 18px; margin-left: auto; margin-right: auto;\">\n<caption style=\"font-size: initial !important;\">Variance Inflation Factor (VIF) Results</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Term </th>\n   <th style=\"text-align:right;\"> VIF </th>\n   <th style=\"text-align:right;\"> VIF_CI_low </th>\n   <th style=\"text-align:right;\"> VIF_CI_high </th>\n   <th style=\"text-align:right;\"> SE_factor </th>\n   <th style=\"text-align:right;\"> Tolerance </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_low </th>\n   <th style=\"text-align:right;\"> Tolerance_CI_high </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> floor_area_sqm </td>\n   <td style=\"text-align:right;\"> 1.126308 </td>\n   <td style=\"text-align:right;\"> 1.104360 </td>\n   <td style=\"text-align:right;\"> 1.152871 </td>\n   <td style=\"text-align:right;\"> 1.061276 </td>\n   <td style=\"text-align:right;\"> 0.8878567 </td>\n   <td style=\"text-align:right;\"> 0.8673997 </td>\n   <td style=\"text-align:right;\"> 0.9055016 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> storey_order </td>\n   <td style=\"text-align:right;\"> 1.206586 </td>\n   <td style=\"text-align:right;\"> 1.181102 </td>\n   <td style=\"text-align:right;\"> 1.235657 </td>\n   <td style=\"text-align:right;\"> 1.098447 </td>\n   <td style=\"text-align:right;\"> 0.8287846 </td>\n   <td style=\"text-align:right;\"> 0.8092862 </td>\n   <td style=\"text-align:right;\"> 0.8466672 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> remaining_lease_mths </td>\n   <td style=\"text-align:right;\"> 1.363528 </td>\n   <td style=\"text-align:right;\"> 1.331762 </td>\n   <td style=\"text-align:right;\"> 1.398335 </td>\n   <td style=\"text-align:right;\"> 1.167702 </td>\n   <td style=\"text-align:right;\"> 0.7333919 </td>\n   <td style=\"text-align:right;\"> 0.7151363 </td>\n   <td style=\"text-align:right;\"> 0.7508850 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_CBD </td>\n   <td style=\"text-align:right;\"> 1.905054 </td>\n   <td style=\"text-align:right;\"> 1.852553 </td>\n   <td style=\"text-align:right;\"> 1.960788 </td>\n   <td style=\"text-align:right;\"> 1.380237 </td>\n   <td style=\"text-align:right;\"> 0.5249196 </td>\n   <td style=\"text-align:right;\"> 0.5099991 </td>\n   <td style=\"text-align:right;\"> 0.5397957 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_ELDERLYCARE </td>\n   <td style=\"text-align:right;\"> 1.178400 </td>\n   <td style=\"text-align:right;\"> 1.154108 </td>\n   <td style=\"text-align:right;\"> 1.206522 </td>\n   <td style=\"text-align:right;\"> 1.085541 </td>\n   <td style=\"text-align:right;\"> 0.8486080 </td>\n   <td style=\"text-align:right;\"> 0.8288284 </td>\n   <td style=\"text-align:right;\"> 0.8664703 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_HAWKER </td>\n   <td style=\"text-align:right;\"> 1.187828 </td>\n   <td style=\"text-align:right;\"> 1.163132 </td>\n   <td style=\"text-align:right;\"> 1.216262 </td>\n   <td style=\"text-align:right;\"> 1.089875 </td>\n   <td style=\"text-align:right;\"> 0.8418729 </td>\n   <td style=\"text-align:right;\"> 0.8221915 </td>\n   <td style=\"text-align:right;\"> 0.8597474 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MRT </td>\n   <td style=\"text-align:right;\"> 1.240457 </td>\n   <td style=\"text-align:right;\"> 1.213579 </td>\n   <td style=\"text-align:right;\"> 1.270718 </td>\n   <td style=\"text-align:right;\"> 1.113758 </td>\n   <td style=\"text-align:right;\"> 0.8061545 </td>\n   <td style=\"text-align:right;\"> 0.7869568 </td>\n   <td style=\"text-align:right;\"> 0.8240092 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_PARK </td>\n   <td style=\"text-align:right;\"> 1.195883 </td>\n   <td style=\"text-align:right;\"> 1.170847 </td>\n   <td style=\"text-align:right;\"> 1.224588 </td>\n   <td style=\"text-align:right;\"> 1.093564 </td>\n   <td style=\"text-align:right;\"> 0.8362021 </td>\n   <td style=\"text-align:right;\"> 0.8166011 </td>\n   <td style=\"text-align:right;\"> 0.8540825 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_MALL </td>\n   <td style=\"text-align:right;\"> 1.409846 </td>\n   <td style=\"text-align:right;\"> 1.376277 </td>\n   <td style=\"text-align:right;\"> 1.446409 </td>\n   <td style=\"text-align:right;\"> 1.187369 </td>\n   <td style=\"text-align:right;\"> 0.7092975 </td>\n   <td style=\"text-align:right;\"> 0.6913675 </td>\n   <td style=\"text-align:right;\"> 0.7265978 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> PROX_SUPERMARKET </td>\n   <td style=\"text-align:right;\"> 1.154751 </td>\n   <td style=\"text-align:right;\"> 1.131493 </td>\n   <td style=\"text-align:right;\"> 1.182124 </td>\n   <td style=\"text-align:right;\"> 1.074594 </td>\n   <td style=\"text-align:right;\"> 0.8659873 </td>\n   <td style=\"text-align:right;\"> 0.8459353 </td>\n   <td style=\"text-align:right;\"> 0.8837880 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_KINDERGARTEN </td>\n   <td style=\"text-align:right;\"> 1.125809 </td>\n   <td style=\"text-align:right;\"> 1.103886 </td>\n   <td style=\"text-align:right;\"> 1.152360 </td>\n   <td style=\"text-align:right;\"> 1.061042 </td>\n   <td style=\"text-align:right;\"> 0.8882499 </td>\n   <td style=\"text-align:right;\"> 0.8677846 </td>\n   <td style=\"text-align:right;\"> 0.9058910 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_CHILDCARE </td>\n   <td style=\"text-align:right;\"> 1.335594 </td>\n   <td style=\"text-align:right;\"> 1.304923 </td>\n   <td style=\"text-align:right;\"> 1.369351 </td>\n   <td style=\"text-align:right;\"> 1.155679 </td>\n   <td style=\"text-align:right;\"> 0.7487304 </td>\n   <td style=\"text-align:right;\"> 0.7302729 </td>\n   <td style=\"text-align:right;\"> 0.7663289 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_350M_BUS </td>\n   <td style=\"text-align:right;\"> 1.148544 </td>\n   <td style=\"text-align:right;\"> 1.125564 </td>\n   <td style=\"text-align:right;\"> 1.175729 </td>\n   <td style=\"text-align:right;\"> 1.071701 </td>\n   <td style=\"text-align:right;\"> 0.8706679 </td>\n   <td style=\"text-align:right;\"> 0.8505364 </td>\n   <td style=\"text-align:right;\"> 0.8884435 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> WITHIN_1KM_PRISCH </td>\n   <td style=\"text-align:right;\"> 1.550879 </td>\n   <td style=\"text-align:right;\"> 1.511876 </td>\n   <td style=\"text-align:right;\"> 1.592853 </td>\n   <td style=\"text-align:right;\"> 1.245343 </td>\n   <td style=\"text-align:right;\"> 0.6447958 </td>\n   <td style=\"text-align:right;\"> 0.6278044 </td>\n   <td style=\"text-align:right;\"> 0.6614298 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\nTo visualize the results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(vif) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex08_files/figure-html/unnamed-chunk-15-1.png){width=1152}\n:::\n:::\n\n\n\n## Predictive Modelling with MLR\n\n### Computing Adaptive Bandwidth\n\nAn adaptive bandwidth is calculated using geographically weighted regression (GWR), which allows for local variations in relationships between variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute adaptive bandwidth\nbw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n\nThen, we save this model for future use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save adaptive bandwidth\nwrite_rds(bw_adaptive, \"data/rds/bw_adaptive.rds\")\n```\n:::\n\n\n\n### Model Calibration\n\nThe GWR model is then calibrated to examine spatially varying relationships:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calibrate gwr-based hedonic pricing model\ngwr_adaptive <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw = bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n\nThen, we save this calibrated model for future use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save calibrated model\nwrite_rds(gwr_adaptive, \"data/rds/gwr_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute test data adaptive bandwidth\ngwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=test_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n\n\nTo compute the predicted values:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute predicted values\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaixwning_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw = bw_adaptive,\n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n```\n:::\n\n\n\n## Predictive Modelling with SpatialML\n\nSince the `SpatialML` package is based on the `ranger` package, coordinate data must be prepared before calibration.\n\n### Preparing Coordinate Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get coordinates from full, training and test data\ncoords <- st_coordinates(mdata)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\nAdditionally, the geometry field is removed:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop geometry\ntrain_data_nogeom <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n\n### Calibrating Random Forest and GRF Models\n\nTo calibrate a RF model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed\nset.seed(1234)\n\n# Calibrate random forest model\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\n\n# Check result\nrf\n```\n:::\n\n\n\n### Calibrating GRF Model\n\nTo calibrate a GRF model:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed\nset.seed(42)\n\n# Calibrate geographic random forest model\ngwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     bw=55,\n                     ntree = 100, # default - 500\n                     mtry = 2, # default - p/3 ~ 4\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n:::\n\n\n\nThe model can be saved and loaded for future use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save model output\nwrite_rds(gwRF_adaptive, \"data/rds/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load model output\ngwRF_adaptive <- read_rds(\"data/rds/gwRF_adaptive.rds\")\n```\n:::\n\n\n\n::: callout-tip\n\nThe global model is a `ranger` object which can provide additional insights:\n\n- **Local Variable Importance**: This metric calculates the importance of each variable for every data point, allowing us to see which predictors are more influential in different locations.\n- **Local Goodness of Fit (LGofFit)**: For each data point, the model assesses how well the local predictions match the observed values, offering insights into model performance across different areas.\n- **Forests**: Each local forest contains various metrics, such as sample size, to understand the local behavior and conditions affecting predictions.\n\n:::\n\n\n### Predict with Test Data\n\nSince the GRF model requires coordinate data as part of its input, the coordinates from the test data need to be merged with the original dataset after removing the geometry field.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(\n  test_data, coords_test) %>%\n  st_drop_geometry() \n```\n:::\n\n\n\nNext, `predict.grf()` of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                         test_data_nogeom, \n                         x.var.name=\"X\",\n                         y.var.name=\"Y\", \n                         local.w=1,\n                         global.w=0,\n                         nthreads = 4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- write_rds(gwRF_pred, \"data/rds/GRF_pred.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nGRF_pred <- read_rds(\"data/rds/GRF_pred.rds\")\nGRF_pred_df <- as.data.frame(GRF_pred)\n```\n:::\n\n\n\nTo analyze the differences between the predicted and actual values, the predictions are merged back with the test dataset to compare predicted against actual resale prices.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine predicted values with test data\ntest_data_pred <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n\n\n\nSave the combined data for future reference:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_p, \"data/rds/test_data_p.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_p <- read_rds(\"data/rds/test_data_p.rds\")\n```\n:::\n\n\n\nTo calculate Root Mean Square Error (RMSE):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_p$resale_price, \n     test_data_p$GRF_pred)\n```\n:::\n\n\n\nTo visualize the predicted vs actual value with a scatterplot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_p,\n       aes(x = GRF_pred,\n           y = resale_price)) +\n  geom_point()\n```\n:::\n\n\n\nIdeally, points should align along the diagonal line, indicating accurate predictions. Points below it show underestimation, while points above indicate overestimation of price prediction.\n\n",
    "supporting": [
      "In-class_Ex08_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}