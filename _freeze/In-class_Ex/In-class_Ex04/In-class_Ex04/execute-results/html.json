{
  "hash": "860c6bcea672a46ec051d96c8f1e0be4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 4\"\nsubtitle: \"#todo\"\n# draft: true\ndate: \"Sep 16, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true # Include the source code in output\n  eval: true\n  freeze: auto\n  message: false\n  warning: false # if false, don't include warnings in the output\nformat:\n  html:\n    code-link: true\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n\n## Exercise Reference\n\n[ISSS626 Geospatial Analytics and Applications - In-class Exercise 4: Geographically Weighted Summary Statistics - gwModel methods](https://isss626-ay2024-25aug.netlify.app/in-class_ex/in-class_ex04/in-class_ex04)\n\n## Overview\n\nIn this session, we will learn about Geographically-Weighted Models.\n\n> Geographically weighted regression (GWR) is a spatial analysis technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these predictors and an outcome of interest.\n>\n> GWR is an outgrowth of ordinary least squares regression (OLS)\n> see more: [Geographically Weighted Regression | Columbia University Mailman School of Public Health](https://www.publichealth.columbia.edu/research/population-health-methods/geographically-weighted-regression#:~:text=Courses-,Overview,and%20an%20outcome%20of%20interest.)\n\n::: callout-note\nGWModel is under active development. It supports many features such as GW discriminant analysis, GW PCA, regression models and so on.\n\nGWM is distance-based and does not support adjacency matrices.\n:::\n\n## Learning Outcome\n\n- Review techniques to merge geospatial and aspatial datasets using **dplyr** functions like `left_join()`, covered in Hands-on Exercise.\n- Convert spatial data from **sf** to **sp** format for compatibility with the **GWmodel** package.\n- Compute geographically weighted summary statistics with adaptive and fixed bandwidth using **GWmodel**.\n- Visualize geographically weighted summary statistics using **tmap**.\n\n## Import the R Packages\n\nThe following R packages will be used in this exercise:\n\n| **Package**       | **Purpose**                                                                                          | **Use Case in Exercise**                                                                                        |\n|-------------------|------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|\n| **sf**            | Handles spatial data; imports, manages, and processes vector-based geospatial data.                   | Importing and managing geospatial data, such as Hunan's county boundary shapefile.                              |\n| **GWmodel**       | Provides functions for geographically weighted regression and summary statistics.                     | Computing geographically weighted summary statistics using adaptive and fixed bandwidth methods.                 |\n| **tidyverse**     | A collection of R packages for data science tasks like data manipulation, visualization, and modeling. | Wrangling aspatial data and joining with spatial datasets.                                                      |\n| **tmap**          | Creates static and interactive thematic maps using cartographic quality elements.                      | Visualizing geographically weighted summary statistics and creating thematic maps.                              |\n| **ggstatsplot**   | Enhances plots with statistical details and facilitates data visualization.                            | Statistical graphics for analysis, comparison, and visualization of summary statistics.                         |\n| **knitr**         | Enables dynamic report generation and integration of R code with documents.                           | Formatting output and generating reports for the exercise.                                                      |\n\nTo install and load these packages, use the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, ggstatsplot, spdep, tmap, tidyverse, knitr, GWmodel)\n```\n:::\n\n\n\n\n\n## The Data\n\nThe following datasets will be used in this exercise:\n\n| **Data Set**                  | **Description**                                                                                       | **Format**         |\n|-------------------------------|-------------------------------------------------------------------------------------------------------|--------------------|\n| **Hunan County Boundary Layer** | A geospatial dataset containing Hunan's county boundaries.                                            | ESRI Shapefile     |\n| **Hunan_2012.csv**             | A CSV file containing selected local development indicators for Hunan in 2012.                        | CSV                |\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/Users/walter/code/isss626/isss626-gaa/In-class_Ex/In-class_Ex04/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\nFor admin boundaries, we will typically encounter **polygon or multipolygon** data objects.\n\nA polygon represents a single contiguous area, while a multipolygon consists of multiple disjoint areas grouped together (e.g., islands that belong to the same admin region).\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nglimpse(hunan2012)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 88\nColumns: 29\n$ County      <chr> \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changn…\n$ City        <chr> \"Yiyang\", \"Chenzhou\", \"Changde\", \"Hunan West\", \"Zhuzhou\", …\n$ avg_wage    <dbl> 30544, 28058, 31935, 30843, 31251, 28518, 54540, 28597, 33…\n$ deposite    <dbl> 10967.0, 4598.9, 5517.2, 2250.0, 8241.4, 10860.0, 24332.0,…\n$ FAI         <dbl> 6831.7, 6386.1, 3541.0, 1005.4, 6508.4, 7920.0, 33624.0, 1…\n$ Gov_Rev     <dbl> 456.72, 220.57, 243.64, 192.59, 620.19, 769.86, 5350.00, 1…\n$ Gov_Exp     <dbl> 2703.0, 1454.7, 1779.5, 1379.1, 1947.0, 2631.6, 7885.5, 11…\n$ GDP         <dbl> 13225.0, 4941.2, 12482.0, 4087.9, 11585.0, 19886.0, 88009.…\n$ GDPPC       <dbl> 14567, 12761, 23667, 14563, 20078, 24418, 88656, 10132, 17…\n$ GIO         <dbl> 9276.90, 4189.20, 5108.90, 3623.50, 9157.70, 37392.00, 513…\n$ Loan        <dbl> 3954.90, 2555.30, 2806.90, 1253.70, 4287.40, 4242.80, 4053…\n$ NIPCR       <dbl> 3528.3, 3271.8, 7693.7, 4191.3, 3887.7, 9528.0, 17070.0, 3…\n$ Bed         <dbl> 2718, 970, 1931, 927, 1449, 3605, 3310, 582, 2170, 2179, 1…\n$ Emp         <dbl> 494.310, 290.820, 336.390, 195.170, 330.290, 548.610, 670.…\n$ EmpR        <dbl> 441.4, 255.4, 270.5, 145.6, 299.0, 415.1, 452.0, 127.6, 21…\n$ EmpRT       <dbl> 338.0, 99.4, 205.9, 116.4, 154.0, 273.7, 219.4, 94.4, 174.…\n$ Pri_Stu     <dbl> 54.175, 33.171, 19.584, 19.249, 33.906, 81.831, 59.151, 18…\n$ Sec_Stu     <dbl> 32.830, 17.505, 17.819, 11.831, 20.548, 44.485, 39.685, 7.…\n$ Household   <dbl> 290.4, 104.6, 148.1, 73.2, 148.7, 211.2, 300.3, 76.1, 139.…\n$ Household_R <dbl> 234.5, 121.9, 135.4, 69.9, 139.4, 211.7, 248.4, 59.6, 110.…\n$ NOIP        <dbl> 101, 34, 53, 18, 106, 115, 214, 17, 55, 70, 44, 84, 74, 17…\n$ Pop_R       <dbl> 670.3, 243.2, 346.0, 184.1, 301.6, 448.2, 475.1, 189.6, 31…\n$ RSCG        <dbl> 5760.60, 2386.40, 3957.90, 768.04, 4009.50, 5220.40, 22604…\n$ Pop_T       <dbl> 910.8, 388.7, 528.3, 281.3, 578.4, 816.3, 998.6, 256.7, 45…\n$ Agri        <dbl> 4942.253, 2357.764, 4524.410, 1118.561, 3793.550, 6430.782…\n$ Service     <dbl> 5414.5, 3814.1, 14100.0, 541.8, 5444.0, 13074.6, 17726.6, …\n$ Disp_Inc    <dbl> 12373, 16072, 16610, 13455, 20461, 20868, 183252, 12379, 1…\n$ RORP        <dbl> 0.7359464, 0.6256753, 0.6549309, 0.6544614, 0.5214385, 0.5…\n$ ROREmp      <dbl> 0.8929619, 0.8782065, 0.8041262, 0.7460163, 0.9052651, 0.7…\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\nRecall that to do left join, we need a common identifier between the 2 data objects. The content must be the same eg. same format and same case. In Hands-on Exercise 1B, we  need to (PA, SZ) in the dataset to uppercase before we can join the data.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf, hunan2012) %>%\n  select(1:3, 7, 15, 16, 31, 32)\nhunan_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3    County GDPPC      GIO      Agri Service\n1   Changde 21098   Anxiang   Anxiang 23667   5108.9  4524.410 14100.0\n2   Changde 21100   Hanshou   Hanshou 20981  13491.0  6545.350 17727.0\n3   Changde 21101    Jinshi    Jinshi 34592  10935.0  2562.460  7525.0\n4   Changde 21102        Li        Li 24473  18402.0  7562.340 53160.0\n5   Changde 21103     Linli     Linli 25554   8214.0  3583.910  7031.0\n6   Changde 21104    Shimen    Shimen 27137  17795.0  5266.510  6981.0\n7  Changsha 21109   Liuyang   Liuyang 63118  99254.0 10844.470 26617.8\n8  Changsha 21110 Ningxiang Ningxiang 62202 114145.0 12804.480 18447.7\n9  Changsha 21111 Wangcheng Wangcheng 70666 148976.0  5222.356  6648.6\n10 Chenzhou 21112     Anren     Anren 12761   4189.2  2357.764  3814.1\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n```\n\n\n:::\n:::\n\n\n\n\n## Mapping GDPPC\n\nTo plot a chrolopleth map of geographic distribution of GDP per Capita (GDPPC) in Hunan:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasemap <- tm_shape(hunan_sf) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan_sf, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Converting to SpatialPolygonDataFrame\n\n::: callout-note\n\nGWmodel presently is built around the older sp and not sf formats for handling spatial data in R.\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>%\n  as_Spatial()\n```\n:::\n\n\n\n\n## Geographically Weighted Summary Statistics with Adaptive Bandwidths\n\nIn this section, we aim to determine the optimal adaptive bandwidth for performing Geographically Weighted Regression (GWR). Specifically, we are interested in finding the best bandwidth to use for summarizing the spatial variation in GDP per capita (GDPPC) across the Hunan region.\n\n### Determine Adaptive Bandwidth\n\nAn adaptive bandwidth allows the number of neighbors considered in the model to vary depending on the density of data points. This is particularly useful when data points are unevenly distributed across the study area.\n\nWe will use two different criteria—cross-validation (CV) and [Akaike information criterion](https://en.wikipedia.org/wiki/Akaike_information_criterion) to determine the optimal bandwidth.\n\n**The bandwidth that minimizes these metrics will be selected.**\n\n#### Cross Validation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV<- bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach= \"CV\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)  # great circle distance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n\n\n\n#### Akaike Information Criterion (AIC)\n\nNext, we use the AIC approach to determine the optimal bandwidth. AIC is a model selection criterion that balances model fit and complexity, with a lower AIC value indicating a better model.\n\nWe use the same GWR model setup, but the bandwidth is now optimized based on the AIC value instead of cross-validation.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC<- bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach= \"AIC\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Intepretation**\n\nThe output from these 2 methods indicate the number of nearest neighbour we should choose. In this case, both methods produce the same result: 22 nearest neighbours.\n\nSometimes the result may differ, and either methods is acceptable for further analysis.\n\n:::\n\n## Geographically Weighted Summary Statistics with adaptive bandwidth\n\nTo compute Geographically Weighted Summary Statistics:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss (data = hunan_sp,\n                vars = \"GDPPC\",\n                bw = bw_AIC,\n                kernel = \"bisquare\",\n                adaptive = TRUE,\n                longlat = T)\n```\n:::\n\n\n\n\n::: callout-note\n\nWe use `bw_AIC` as the bandwidth parameter, which was determined previously based on AIC optimization.\n\nAdditionally, we apply the same `bisquare` kernel for consistency with the CV and AIC computation above.\n\nThe output of the `gwss()` function is a `gwss object`, which is a **list containing localized summary statistics for GDPPC across Hunan**.\n\nNote that the abbreviation in the output refers to:\n\n- LM : local mean\n\n- LSD: local standard deviation\n\n- LVar: local variance\n\n- LSKe: standard estimations\n\n- LCV: local correlation variance\n\n:::\n\n### Preparing the output data\n\nLet's observe the `gwstat` object before converting to a suitable format for analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(gwstat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"gwss\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngwstat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n\n   ***********************Calibration information*************************\n\n   Local summary statistics calculated for variables:\n    GDPPC\n   Number of summary points: 88\n   Kernel function: bisquare \n   Summary points: the same locations as observations are used.\n   Adaptive bandwidth: 22 (number of nearest neighbours)\n   Distance metric: Great Circle distance metric is used.\n\n   ************************Local Summary Statistics:**********************\n   Summary information for Local means:\nGDPPC_LM \n    Min.  1st Qu.   Median  3rd Qu.     Max. \n13688.70 17995.43 23408.07 27865.12 49005.84 \n   Summary information for local standard deviation :\nGDPPC_LSD \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n 4282.599  6297.788  8281.756 16315.028 22568.841 \n   Summary information for local variance :\nGDPPC_LVar \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n 18340656  39662960  68633859 266187788 509352591 \n   Summary information for Local skewness:\nGDPPC_LSKe \n      Min.    1st Qu.     Median    3rd Qu.       Max. \n-0.2150599  0.9900027  1.3714638  1.8387524  3.7525953 \n   Summary information for localized coefficient of variation:\nGDPPC_LCV \n     Min.   1st Qu.    Median   3rd Qu.      Max. \n0.2000503 0.3107774 0.3829294 0.5129959 0.8018153 \n\n   ************************************************************************\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat$SDF\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 88 \nextent      : 108.7831, 114.2544, 24.6342, 30.12812  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 5\nnames       :         GDPPC_LM,        GDPPC_LSD,       GDPPC_LVar,         GDPPC_LSKe,         GDPPC_LCV \nmin values  : 13688.6986033259, 4282.59917616925, 18340655.7037255, -0.215059890053627, 0.200050258645349 \nmax values  : 49005.8382943034, 22568.8411539952, 509352591.034267,    3.7525953469342, 0.801815253056722 \n```\n\n\n:::\n:::\n\n\n\nIn particular, we are interested to extract the `SDF` data table from `gwstat`. We can convert it into a data frame and append it onto `hunan_sf`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\nhunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n\n\n### Visualising geographically weighted summary statistics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-15-1.png){width=1536}\n:::\n:::\n\n\n\n## Geographically Weighted Summary Statistics with Fixed Bandwidth\n\nSimilarly, we can use the same process to generate summary stats with fixed bandwidth.\n\n### Determine Fixed Bandwidth\n\n1. Cross-Validation\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed <- bw.gwr(GDPPC ~ 1,\n             data = hunan_sp,\n             approach = \"CV\",\n             adaptive = FALSE,\n             kernel = \"bisquare\",\n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n:::\n\n\n\n\n2. AIC\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC_fixed <- bw.gwr(GDPPC ~ 1,\n             data = hunan_sp,\n             approach =\"AIC\",\n             adaptive = FALSE,\n             kernel = \"bisquare\",\n             longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC_fixed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160.5517\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n\nNote the results differs this time.\n\nWe will just use `bw_AIC_fixed` for this example.\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_fixed <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC_fixed,\n               kernel = \"bisquare\",\n               adaptive = FALSE,\n               longlat = T)\n```\n:::\n\n\n\n\n### Preparing the output data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df_fixed <- as.data.frame(gwstat_fixed$SDF)\nhunan_gstat_fixed <- cbind(hunan_sf, gwstat_df_fixed)\n```\n:::\n\n\n\n\n### Visualising geographically weighted summary statistics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat_fixed) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 1.8,\n            legend.text.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-22-1.png){width=1536}\n:::\n:::\n\n\n\n\n## Visualizing Correlation\n\n**Business question: Is there any relationship between GDP per capita and Gross Industry Output?**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggscatterstats(\n  data = hunan2012,\n  x = Agri,\n  y = GDPPC,\n  xlab = \"Gross Agriculture Output\",\n  ylab = \"GDP per capita\",\n  label.var = County,\n  label.expression = Agri > 10000 & GDPPC > 50000,\n  point.label.args = list(alpha = 0.7, size = 4, color = \"grey50\"),\n  xfill = \"#CC79A7\",\n  yfill = \"#009E73\",\n  title = \"Relationship between GDP PC and Gross Agriculture Output\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-note\n\nNote that above shows a **conventional statistical solution** to the business question. We can also approach the same question with a geospatial approach.\n\n:::\n\n## Geographically Weighted Correlation with Adaptive Bandwidth\n\nTo come up with the geospatial analytics solution, we can repeat what we have learnt above.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# determine bandwidth\nbw <- bw.gwr(GDPPC ~ GIO,\n             data = hunan_sp,\n             approach = \"AICc\",\n             adaptive = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1870.235 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1870.852 \nAdaptive bandwidth (number of nearest neighbours): 72 AICc value: 1869.744 \nAdaptive bandwidth (number of nearest neighbours): 78 AICc value: 1869.713 \nAdaptive bandwidth (number of nearest neighbours): 82 AICc value: 1869.604 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \nAdaptive bandwidth (number of nearest neighbours): 86 AICc value: 1869.647 \nAdaptive bandwidth (number of nearest neighbours): 83 AICc value: 1869.567 \nAdaptive bandwidth (number of nearest neighbours): 84 AICc value: 1869.537 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute gwCorrelation\ngwstats <- gwss(hunan_sp,\n                vars = c(\"GDPPC\", \"GIO\"),\n                bw = bw,\n                kernel = \"bisquare\",\n                adaptive = TRUE,\n                longlat = T)\n\ngwstats$SDF\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 88 \nextent      : 108.7831, 114.2544, 24.6342, 30.12812  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs \nvariables   : 13\nnames       :         GDPPC_LM,           GIO_LM,        GDPPC_LSD,          GIO_LSD,       GDPPC_LVar,         GIO_LVar,       GDPPC_LSKe,         GIO_LSKe,         GDPPC_LCV,          GIO_LCV,    Cov_GDPPC.GIO,    Corr_GDPPC.GIO, Spearman_rho_GDPPC.GIO \nmin values  : 19131.1142970311, 10893.8161299979, 10277.2097869105, 14522.4178379531,  105621041.00417, 210900619.860099, 1.48323193793682,  2.0736607949458, 0.536791980126491, 1.00164110576375, 103845165.127288,  0.68232363208861,       0.57886543894541 \nmax values  : 30957.9353099472, 31000.8255210838, 17996.8393335404, 31051.7011545276, 323886225.997265, 964208144.590089, 2.90892414233837, 5.17918131636017, 0.648888935893182, 1.46498918439505, 417614864.583691, 0.760623282755834,       0.73344304557923 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert result to df\ngwstat_df <- as.data.frame(gwstats$SDF) %>%\n  # select(c(12,13)) %>%\n  select(c(\"Corr_GDPPC.GIO\",\"Spearman_rho_GDPPC.GIO\")) %>%\n  rename(gwCorr = Corr_GDPPC.GIO,\n         gwSpearman = Spearman_rho_GDPPC.GIO)\n\nhunan_Corr <- cbind(hunan_sf, gwstat_df)\nhunan_Corr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 10 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n     NAME_2  ID_3    NAME_3    County GDPPC      GIO      Agri Service\n1   Changde 21098   Anxiang   Anxiang 23667   5108.9  4524.410 14100.0\n2   Changde 21100   Hanshou   Hanshou 20981  13491.0  6545.350 17727.0\n3   Changde 21101    Jinshi    Jinshi 34592  10935.0  2562.460  7525.0\n4   Changde 21102        Li        Li 24473  18402.0  7562.340 53160.0\n5   Changde 21103     Linli     Linli 25554   8214.0  3583.910  7031.0\n6   Changde 21104    Shimen    Shimen 27137  17795.0  5266.510  6981.0\n7  Changsha 21109   Liuyang   Liuyang 63118  99254.0 10844.470 26617.8\n8  Changsha 21110 Ningxiang Ningxiang 62202 114145.0 12804.480 18447.7\n9  Changsha 21111 Wangcheng Wangcheng 70666 148976.0  5222.356  6648.6\n10 Chenzhou 21112     Anren     Anren 12761   4189.2  2357.764  3814.1\n      gwCorr gwSpearman                       geometry\n1  0.7486038  0.7052022 POLYGON ((112.0625 29.75523...\n2  0.7444358  0.6931584 POLYGON ((112.2288 29.11684...\n3  0.7506001  0.7106856 POLYGON ((111.8927 29.6013,...\n4  0.7529990  0.7175096 POLYGON ((111.3731 29.94649...\n5  0.7521408  0.7147542 POLYGON ((111.6324 29.76288...\n6  0.7546843  0.7224617 POLYGON ((110.8825 30.11675...\n7  0.7332991  0.6800127 POLYGON ((113.9905 28.5682,...\n8  0.7305758  0.6608931 POLYGON ((112.7181 28.38299...\n9  0.7341173  0.6716514 POLYGON ((112.7914 28.52688...\n10 0.7520181  0.7236245 POLYGON ((113.1757 26.82734...\n```\n\n\n:::\n:::\n\n\n\n\n### Visualizing Local Correlation\n\n1. Local Correlation Coefficient\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_Corr) +\n  tm_fill(\"gwCorr\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Correlation Coefficient\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-27-1.png){width=1152}\n:::\n:::\n\n\n\n::: callout-note\n**Interpretation**\n\n- The strongest correlations are found in the eastern and northern parts of the province, indicated by the darker shades.\n- The weaker correlations are located in the central and western areas, where the lighter colors predominate.\n\n:::\n\n2. Local Spearman Coefficient\n\nNote that we will observe similar trend using Local Spearman Coefficient. See notes below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_Corr) +\n  tm_fill(\"gwSpearman\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Spearman Rho\",\n            main.title.position = \"center\",\n            main.title.size = 2.0,\n            legend.text.size = 1.2,\n            legend.height = 1.50,\n            legend.width = 1.50,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-28-1.png){width=1152}\n:::\n:::\n\n\n\n\n::: callout-tip\n**Notes on local correlation coefficient and the local Spearman coefficient**:\n\n1. Local Correlation Coefficient (Pearson)\n\n- **Type**: Parametric\n  - The local correlation coefficient, often represented by Pearson's correlation coefficient, assumes that the data follows a normal distribution.\n- **Nature**: Continuous\n  - It measures the linear relationship between two continuous variables.\n- **Type of Measure**: Not Ranked\n  - The Pearson correlation is sensitive to the actual values of the data points, not their ranks. It considers both the magnitude and direction of the linear relationship.\n\n2. Local Spearman Coefficient\n\n- **Type**: Non-Parametric\n  - The local Spearman coefficient is a rank-based measure and does not assume any specific distribution for the data. It is robust to non-normality.\n- **Nature**: Continuous (based on ranks)\n  - Although it works with ranks, the coefficient itself can take any continuous value between -1 and 1, like Pearson's.\n- **Type of Measure**: Ranked\n  - The Spearman correlation is based on the ranks of the data rather than their actual values. It measures the strength and direction of a monotonic relationship between two variables.\n\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}