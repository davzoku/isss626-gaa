{
  "hash": "d089a5817d3982630645bb49bd9887a7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 10\"\nsubtitle: \"In this exercise, we will recap on the use of geocoding and learn how to work with Open Government Data.\"\n# draft: true\ndate: \"Nov 04, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true # Include the source code in output\n  eval: true\n  freeze: auto\n  message: false\n  warning: false # if false, don't include warnings in the output\nformat:\n  html:\n    code-link: true\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n## Exercise Reference\n\n- https://isss626-ay2024-25aug.netlify.app/in-class_ex/in-class_ex10/in-class_ex10#/title-slide\n\n## Learning Outcome\n\nIn this exercise, we will recap on the use of geocoding and learn how to work with Open Government Data.\n\n## Import the R Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n\n## Geocoding\n\nThe HDB resale data can be downloaded from [here](https://data.gov.sg/datasets?query=resale&page=1&resultId=d_8b84c4ee58e3cfc0ece0d773c8ca6abc). The dataset contains resale flat prices based on registration date from Jan 2017 to Sep 2024.\n\nThe code below reads the raw CSV file containing the resale flat data and filters it to include only records from January 2023 to September 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/raw_data/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n\n\nThe following code tidies the data by creating new columns: - `address`: Combines `block` and `street_name` to form a complete address. - `remaining_lease_yr`: Extracts the remaining lease years as an integer. - `remaining_lease_mth`: Extracts the remaining lease months as an integer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\n\nNext, we filter the tidy dataset to include only records from September 2024 and take the first 10 addresses as an example.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy %>%\n  filter(month == \"2024-09\")\n\nfirst_10_resale <- head(resale_selected, 10)\n```\n:::\n\n\n\nThen, we generate a sorted list of unique addresses from the filtered dataset. This will be used to retrieve geographical coordinates.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(first_10_resale$address))\nadd_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"174 ANG MO KIO AVE 4\"  \"223 ANG MO KIO AVE 1\"  \"225 ANG MO KIO AVE 1\" \n[4] \"308A ANG MO KIO AVE 1\" \"308B ANG MO KIO AVE 1\" \"314 ANG MO KIO AVE 3\" \n[7] \"320 ANG MO KIO AVE 1\"  \"321 ANG MO KIO AVE 1\"  \"331 ANG MO KIO AVE 1\" \n```\n\n\n:::\n:::\n\n\n\nIn the code below, we will perform geocoding and save the output into 2 data frames, `found` and `not_found`.\n\n`found` data frames contains data from successful API calls and `not_found` contains data with api errors etc. These data require additional care and manual geocoding may be required.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (address in add_list){\n  query <- list('searchVal'=address, 'returnGeom'='Y', \n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  \n  if ((content(res)$found)!=0){\n    tmp_df <- data.frame(content(res))[4:13]\n    tmp_df$address<- address\n    found <- rbind(found, tmp_df)\n\n  } else {\n    not_found <- rbind(not_found, data.frame(address = address))\n  }\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfound\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                         results.SEARCHVAL results.BLK_NO   results.ROAD_NAME\n1                        KEBUN BARU LINK 1            174 ANG MO KIO AVENUE 4\n2 223 ANG MO KIO AVENUE 1 SINGAPORE 560223            223 ANG MO KIO AVENUE 1\n3 225 ANG MO KIO AVENUE 1 SINGAPORE 560225            225 ANG MO KIO AVENUE 1\n4                          TECK GHEE VISTA           308A ANG MO KIO AVENUE 1\n5                          TECK GHEE VISTA           308B ANG MO KIO AVENUE 1\n6                      TECK GHEE EVERGREEN            314 ANG MO KIO AVENUE 3\n7     STAR LEARNERS @ ANG MO KIO PTE. LTD.            320 ANG MO KIO AVENUE 1\n8      NEIGHBOURHOOD POLICE POST TECK GHEE            321 ANG MO KIO AVENUE 1\n9                           MY FIRST SKOOL            331 ANG MO KIO AVENUE 1\n                      results.BUILDING\n1                    KEBUN BARU LINK 1\n2                                  NIL\n3                                  NIL\n4                      TECK GHEE VISTA\n5                      TECK GHEE VISTA\n6                  TECK GHEE EVERGREEN\n7 STAR LEARNERS @ ANG MO KIO PTE. LTD.\n8  NEIGHBOURHOOD POLICE POST TECK GHEE\n9                       MY FIRST SKOOL\n                                                                results.ADDRESS\n1                    174 ANG MO KIO AVENUE 4 KEBUN BARU LINK 1 SINGAPORE 560174\n2                                      223 ANG MO KIO AVENUE 1 SINGAPORE 560223\n3                                      225 ANG MO KIO AVENUE 1 SINGAPORE 560225\n4                     308A ANG MO KIO AVENUE 1 TECK GHEE VISTA SINGAPORE 561308\n5                     308B ANG MO KIO AVENUE 1 TECK GHEE VISTA SINGAPORE 562308\n6                  314 ANG MO KIO AVENUE 3 TECK GHEE EVERGREEN SINGAPORE 560314\n7 320 ANG MO KIO AVENUE 1 STAR LEARNERS @ ANG MO KIO PTE. LTD. SINGAPORE 560320\n8  321 ANG MO KIO AVENUE 1 NEIGHBOURHOOD POLICE POST TECK GHEE SINGAPORE 560321\n9                       331 ANG MO KIO AVENUE 1 MY FIRST SKOOL SINGAPORE 560331\n  results.POSTAL        results.X        results.Y results.LATITUDE\n1         560174 28478.5794445509 39676.8076131288 1.37509746867904\n2         560223 28534.6432265872 38676.1728609148 1.36604808445916\n3         560225  28537.680043661 38825.2326317504 1.36739612776859\n4         561308 29198.1455183588 38613.7381223254 1.36548342757106\n5         562308 29248.5946499519 38589.7120627463  1.3652661423815\n6         560314 29865.9980458226 38695.9702712912 1.36622707120636\n7         560320  29676.907292584 38625.7954039071 1.36559244608528\n8         560321 29712.2350843353 38575.9067748357 1.36514126911853\n9         560331 29941.7457938343 38240.8809963278 1.36211140145298\n  results.LONGITUDE               address\n1   103.83761896123  174 ANG MO KIO AVE 4\n2  103.838122716883  223 ANG MO KIO AVE 1\n3  103.838150007464  225 ANG MO KIO AVE 1\n4  103.844084739929 308A ANG MO KIO AVE 1\n5  103.844538059044 308B ANG MO KIO AVE 1\n6  103.850085858983  314 ANG MO KIO AVE 3\n7  103.848386744168  320 ANG MO KIO AVE 1\n8    103.8487041858  321 ANG MO KIO AVE 1\n9   103.85076647513  331 ANG MO KIO AVE 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_found\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndata frame with 0 columns and 0 rows\n```\n\n\n:::\n:::\n\n\n\nIn this example, we get all successful calls and 0 failures when performing geocoding.\n\nNext, we tidy the field names.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(found)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"results.SEARCHVAL\" \"results.BLK_NO\"    \"results.ROAD_NAME\"\n [4] \"results.BUILDING\"  \"results.ADDRESS\"   \"results.POSTAL\"   \n [7] \"results.X\"         \"results.Y\"         \"results.LATITUDE\" \n[10] \"results.LONGITUDE\" \"address\"          \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfound_filtered <- found %>%\n  select(results.BLK_NO, results.ROAD_NAME, results.POSTAL, results.X, results.Y, address) %>%\n  rename(\n    POSTAL = results.POSTAL,\n    XCOORD = results.X,\n    YCOORD = results.Y,\n    BLK_NO = results.BLK_NO,\n    ROAD_NAME = results.ROAD_NAME\n  )\nfound_filtered \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  BLK_NO           ROAD_NAME POSTAL           XCOORD           YCOORD\n1    174 ANG MO KIO AVENUE 4 560174 28478.5794445509 39676.8076131288\n2    223 ANG MO KIO AVENUE 1 560223 28534.6432265872 38676.1728609148\n3    225 ANG MO KIO AVENUE 1 560225  28537.680043661 38825.2326317504\n4   308A ANG MO KIO AVENUE 1 561308 29198.1455183588 38613.7381223254\n5   308B ANG MO KIO AVENUE 1 562308 29248.5946499519 38589.7120627463\n6    314 ANG MO KIO AVENUE 3 560314 29865.9980458226 38695.9702712912\n7    320 ANG MO KIO AVENUE 1 560320  29676.907292584 38625.7954039071\n8    321 ANG MO KIO AVENUE 1 560321 29712.2350843353 38575.9067748357\n9    331 ANG MO KIO AVENUE 1 560331 29941.7457938343 38240.8809963278\n                address\n1  174 ANG MO KIO AVE 4\n2  223 ANG MO KIO AVE 1\n3  225 ANG MO KIO AVE 1\n4 308A ANG MO KIO AVE 1\n5 308B ANG MO KIO AVE 1\n6  314 ANG MO KIO AVE 3\n7  320 ANG MO KIO AVE 1\n8  321 ANG MO KIO AVE 1\n9  331 ANG MO KIO AVE 1\n```\n\n\n:::\n:::\n\n\nNext, we join `resale` with `found` to form `resale_geocoded`. Then we convert this tibble dataframe to sf point feature data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we need to add an address column for joining\nfirst_10_resale <- first_10_resale %>%\n  mutate(address = paste(block, street_name))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_geocoded = left_join(\n  first_10_resale, found_filtered, \n  by = c('address' = 'address'))\n\nresale_geocoded\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 Ã— 19\n   month   town       flat_type block street_name    storey_range floor_area_sqm\n   <chr>   <chr>      <chr>     <chr> <chr>          <chr>                 <dbl>\n 1 2024-09 ANG MO KIO 2 ROOM    314   ANG MO KIO AVâ€¦ 01 TO 03                 44\n 2 2024-09 ANG MO KIO 2 ROOM    174   ANG MO KIO AVâ€¦ 10 TO 12                 45\n 3 2024-09 ANG MO KIO 2 ROOM    174   ANG MO KIO AVâ€¦ 04 TO 06                 45\n 4 2024-09 ANG MO KIO 3 ROOM    223   ANG MO KIO AVâ€¦ 10 TO 12                 82\n 5 2024-09 ANG MO KIO 3 ROOM    320   ANG MO KIO AVâ€¦ 04 TO 06                 73\n 6 2024-09 ANG MO KIO 3 ROOM    331   ANG MO KIO AVâ€¦ 01 TO 03                 68\n 7 2024-09 ANG MO KIO 3 ROOM    308A  ANG MO KIO AVâ€¦ 16 TO 18                 70\n 8 2024-09 ANG MO KIO 3 ROOM    321   ANG MO KIO AVâ€¦ 07 TO 09                 88\n 9 2024-09 ANG MO KIO 3 ROOM    308B  ANG MO KIO AVâ€¦ 22 TO 24                 70\n10 2024-09 ANG MO KIO 3 ROOM    225   ANG MO KIO AVâ€¦ 01 TO 03                 67\n# â„¹ 12 more variables: flat_model <chr>, lease_commence_date <dbl>,\n#   remaining_lease <chr>, resale_price <dbl>, address <chr>,\n#   remaining_lease_yr <int>, remaining_lease_mth <int>, BLK_NO <chr>,\n#   ROAD_NAME <chr>, POSTAL <chr>, XCOORD <chr>, YCOORD <chr>\n```\n\n\n:::\n:::\n\n\n\nTo convert to sf:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_geocoded_sf <- st_as_sf(resale_geocoded, \n                            coords = c(\"XCOORD\",\n                                       \"YCOORD\"),\n                            crs=3414)\n```\n:::\n\n\n\nNext we check for overlapping point features.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- resale_geocoded_sf %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n```\n:::\n\n\n\nIn the code below, `st_jitter()` of sf package is used to move the point features by 5m to avoid overlapping point features.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_geocoded_sf <- resale_geocoded_sf %>%\n  st_jitter(amount = 5)\n\nresale_geocoded_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 10 features and 17 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 28475.2 ymin: 38239.86 xmax: 29945.86 ymax: 39681.17\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 10 Ã— 18\n   month   town       flat_type block street_name    storey_range floor_area_sqm\n * <chr>   <chr>      <chr>     <chr> <chr>          <chr>                 <dbl>\n 1 2024-09 ANG MO KIO 2 ROOM    314   ANG MO KIO AVâ€¦ 01 TO 03                 44\n 2 2024-09 ANG MO KIO 2 ROOM    174   ANG MO KIO AVâ€¦ 10 TO 12                 45\n 3 2024-09 ANG MO KIO 2 ROOM    174   ANG MO KIO AVâ€¦ 04 TO 06                 45\n 4 2024-09 ANG MO KIO 3 ROOM    223   ANG MO KIO AVâ€¦ 10 TO 12                 82\n 5 2024-09 ANG MO KIO 3 ROOM    320   ANG MO KIO AVâ€¦ 04 TO 06                 73\n 6 2024-09 ANG MO KIO 3 ROOM    331   ANG MO KIO AVâ€¦ 01 TO 03                 68\n 7 2024-09 ANG MO KIO 3 ROOM    308A  ANG MO KIO AVâ€¦ 16 TO 18                 70\n 8 2024-09 ANG MO KIO 3 ROOM    321   ANG MO KIO AVâ€¦ 07 TO 09                 88\n 9 2024-09 ANG MO KIO 3 ROOM    308B  ANG MO KIO AVâ€¦ 22 TO 24                 70\n10 2024-09 ANG MO KIO 3 ROOM    225   ANG MO KIO AVâ€¦ 01 TO 03                 67\n# â„¹ 11 more variables: flat_model <chr>, lease_commence_date <dbl>,\n#   remaining_lease <chr>, resale_price <dbl>, address <chr>,\n#   remaining_lease_yr <int>, remaining_lease_mth <int>, BLK_NO <chr>,\n#   ROAD_NAME <chr>, POSTAL <chr>, geometry <POINT [m]>\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}