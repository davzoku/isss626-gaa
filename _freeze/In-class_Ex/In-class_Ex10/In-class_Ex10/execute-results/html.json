{
  "hash": "7c73b6a4c8f4b34b4cc1d847b34325cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 10\"\nsubtitle: \"In this exercise, we will recap on the use of geocoding.\"\n# draft: true\ndate: \"Nov 04, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true # Include the source code in output\n  eval: true\n  freeze: auto\n  message: false\n  warning: false # if false, don't include warnings in the output\nformat:\n  html:\n    code-link: true\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n## Exercise Reference\n\n- TBC\n\n## Learning Outcome\n\nIn this exercise, we will recap on the use of geocoding.\n\n## Import the R Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n\n## Geocoding\n\nThe HDB resale data can be downloaded from [here](https://data.gov.sg/datasets?query=resale&page=1&resultId=d_8b84c4ee58e3cfc0ece0d773c8ca6abc). The dataset contains resale flat prices based on registration date from Jan 2017 to Sep 2024.\n\nThe code below reads the raw CSV file containing the resale flat data and filters it to include only records from January 2023 to September 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/raw_data/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n:::\n\n\n\nThe following code tidies the data by creating new columns: - `address`: Combines `block` and `street_name` to form a complete address. - `remaining_lease_yr`: Extracts the remaining lease years as an integer. - `remaining_lease_mth`: Extracts the remaining lease months as an integer.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\n\nNext, we filter the tidy dataset to include only records from September 2024.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy %>%\n  filter(month == \"2024-09\")\n```\n:::\n\n\n\nThen, we generate a sorted list of unique addresses from the filtered dataset. This will be used to retrieve geographical coordinates.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_selected$address))\n```\n:::\n\n\n\nIn the code below, we will perform geocoding and save the output into 2 data frames, `found` and `not_found`.\n\n`found` data frames contains data from successful API calls and `not_found` contains data with api errors etc. These data require additional care and manual geocoding may be required.\n\nIn the example below, we will try with the first address in the `add_list`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (postcode in add_list[1]){\n  query <- list('searchVal'=postcode, 'returnGeom'='Y', \n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  if ((content(res)$found)!=0){\n    found <- rbind(found, data.frame(content(res))[4:13])\n  } else {not_found = data.frame(postcode)\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfound\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                        results.SEARCHVAL results.BLK_NO    results.ROAD_NAME\n1 1 BEDOK SOUTH AVENUE 1 SINGAPORE 460001              1 BEDOK SOUTH AVENUE 1\n  results.BUILDING                         results.ADDRESS results.POSTAL\n1              NIL 1 BEDOK SOUTH AVENUE 1 SINGAPORE 460001         460001\n         results.X        results.Y results.LATITUDE results.LONGITUDE\n1 39173.8123528324 33678.8556520101 1.32085208689731  103.933721091441\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnot_found\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndata frame with 0 columns and 0 rows\n```\n\n\n:::\n:::\n\n\n\nIn this example, we get 1 successful call and 0 failures when performing geocoding.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}