{
  "hash": "23f44f30da03647ab92ee863e102e8d4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 5\"\nsubtitle: \"In this exercise, we will perform global and local measures of spatial autocorrelation using sfdep package.\"\n# draft: true\ndate: \"Sep 23, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true # Include the source code in output\n  eval: true\n  freeze: auto\n  message: false\n  warning: false # if false, don't include warnings in the output\nformat:\n  html:\n    code-link: true\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n## Exercise Reference\n\n[ISSS626 Geospatial Analytics and Applications - In-class Exercise 5: Global and Local Measures of Spatial Autocorrelation: sfdep methods](https://isss626-ay2024-25aug.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa#/title-slide)\n\n## Overview\n\nIn this exercise, we will use the **sfdep** package to perform global and local measures of spatial autocorrelation using Hunan's spatial data. In Hands-on Exercise 5, we learnt to perform spatial autocorrelation using **spdep** package.\n\n:::callout-note\n\nThe **sfdep** and **spdep** packages in R are both designed for spatial data analysis, particularly focusing on spatial autocorrelation, but they differ in their approach and compatibility with modern R data structures.\n\n- **spdep**: This is the older and more established package for spatial dependence analysis in R. It provides functions for creating spatial weights, spatial lag models, and global and local spatial autocorrelation statistics such as Moran's I. However, **spdep** was originally built to work with the `sp` package, which uses the older `Spatial*` classes for handling spatial data.\n\n- **sfdep**: This is a newer package designed to work seamlessly with the **sf** package, which has become the standard for handling spatial data in R using simple features. **sfdep** provides an interface for spatial dependence analysis that is compatible with **sf**'s `sf` objects (simple feature geometries) and makes extensive use of **tidyverse** conventions, such as list columns, which allow for more flexible and tidy manipulation of spatial data.\n\n### Key Differences:\n\n1. **Data Structures**:\n\n   - **spdep** works with `Spatial*` objects from the `sp` package.\n   - **sfdep** works with `sf` objects from the `sf` package, which are easier to integrate with modern R workflows and the tidyverse ecosystem.\n\n2. **Integration**:\n\n   - **sfdep** is more compatible with modern workflows using the **tidyverse**, allowing for easier manipulation of data within data frames and list columns.\n   - **spdep** relies on the older base R style and is less intuitive when working with modern data pipelines.\n\n3. **Functionality**:\n   - Both packages provide similar functionalities for spatial autocorrelation, such as computing Moran's I and local Moran's I.\n   - **sfdep** introduces new functionalities that leverage list columns for easier spatial dependence operations.\n\n**sfdep can essentially be considered a wrapper around the functionality provided by spdep, designed to work with the modern sf (simple features) framework for spatial data in R.**\n:::\n\n## Learning Outcome\n\n- Perform global Moran's I test for spatial autocorrelation.\n- Compute and visualize local Moran's I and Gi\\* statistics for identifying clusters and outliers.\n- Create choropleth maps to display the results of spatial autocorrelation analysis.\n\n## Import the R Packages\n\nThe following R packages will be used in this exercise:\n\n| **Package**   | **Purpose**                                                                                            | **Use Case in Exercise**                                                           |\n| ------------- | ------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------- |\n| **sf**        | Handles spatial data; imports, manages, and processes vector-based geospatial data.                    | Importing and managing geospatial data, such as Hunan's county boundary shapefile. |\n| **sfdep**     | Provides functions for spatial autocorrelation, including Moran's I and local Moran's I.               | Performing spatial autocorrelation analysis with global and local measures.        |\n| **tidyverse** | A collection of R packages for data science tasks like data manipulation, visualization, and modeling. | Wrangling aspatial data and joining with spatial datasets.                         |\n| **tmap**      | Creates static and interactive thematic maps using cartographic quality elements.                      | Visualizing spatial analysis results and creating thematic maps.                   |\n\nTo install and load these packages, use the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, tidyverse)\n```\n:::\n\n\n\n## The Data\n\nThe following datasets will be used in this exercise:\n\n| **Data Set**                    | **Description**                                                                | **Format**     |\n| ------------------------------- | ------------------------------------------------------------------------------ | -------------- |\n| **Hunan County Boundary Layer** | A geospatial dataset containing Hunan's county boundaries.                     | ESRI Shapefile |\n| **Hunan_2012.csv**              | A CSV file containing selected local development indicators for Hunan in 2012. | CSV            |\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/Users/walter/code/isss626/isss626-gaa/In-class_Ex/In-class_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(hunan)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 88\nColumns: 8\n$ NAME_2     <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Cha…\n$ ID_3       <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 211…\n$ NAME_3     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ ENGTYPE_3  <chr> \"County\", \"County\", \"County City\", \"County\", \"County\", \"Cou…\n$ Shape_Leng <dbl> 1.869074, 2.360691, 1.425620, 3.474325, 2.289506, 4.171918,…\n$ Shape_Area <dbl> 0.10056190, 0.19978745, 0.05302413, 0.18908121, 0.11450357,…\n$ County     <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"L…\n$ geometry   <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 …\n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\nFor admin boundaries, we will typically encounter **polygon or multipolygon** data objects.\n\nA polygon represents a single contiguous area, while a multipolygon consists of multiple disjoint areas grouped together (e.g., islands that belong to the same admin region).\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\nglimpse(hunan2012)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 88\nColumns: 29\n$ County      <chr> \"Anhua\", \"Anren\", \"Anxiang\", \"Baojing\", \"Chaling\", \"Changn…\n$ City        <chr> \"Yiyang\", \"Chenzhou\", \"Changde\", \"Hunan West\", \"Zhuzhou\", …\n$ avg_wage    <dbl> 30544, 28058, 31935, 30843, 31251, 28518, 54540, 28597, 33…\n$ deposite    <dbl> 10967.0, 4598.9, 5517.2, 2250.0, 8241.4, 10860.0, 24332.0,…\n$ FAI         <dbl> 6831.7, 6386.1, 3541.0, 1005.4, 6508.4, 7920.0, 33624.0, 1…\n$ Gov_Rev     <dbl> 456.72, 220.57, 243.64, 192.59, 620.19, 769.86, 5350.00, 1…\n$ Gov_Exp     <dbl> 2703.0, 1454.7, 1779.5, 1379.1, 1947.0, 2631.6, 7885.5, 11…\n$ GDP         <dbl> 13225.0, 4941.2, 12482.0, 4087.9, 11585.0, 19886.0, 88009.…\n$ GDPPC       <dbl> 14567, 12761, 23667, 14563, 20078, 24418, 88656, 10132, 17…\n$ GIO         <dbl> 9276.90, 4189.20, 5108.90, 3623.50, 9157.70, 37392.00, 513…\n$ Loan        <dbl> 3954.90, 2555.30, 2806.90, 1253.70, 4287.40, 4242.80, 4053…\n$ NIPCR       <dbl> 3528.3, 3271.8, 7693.7, 4191.3, 3887.7, 9528.0, 17070.0, 3…\n$ Bed         <dbl> 2718, 970, 1931, 927, 1449, 3605, 3310, 582, 2170, 2179, 1…\n$ Emp         <dbl> 494.310, 290.820, 336.390, 195.170, 330.290, 548.610, 670.…\n$ EmpR        <dbl> 441.4, 255.4, 270.5, 145.6, 299.0, 415.1, 452.0, 127.6, 21…\n$ EmpRT       <dbl> 338.0, 99.4, 205.9, 116.4, 154.0, 273.7, 219.4, 94.4, 174.…\n$ Pri_Stu     <dbl> 54.175, 33.171, 19.584, 19.249, 33.906, 81.831, 59.151, 18…\n$ Sec_Stu     <dbl> 32.830, 17.505, 17.819, 11.831, 20.548, 44.485, 39.685, 7.…\n$ Household   <dbl> 290.4, 104.6, 148.1, 73.2, 148.7, 211.2, 300.3, 76.1, 139.…\n$ Household_R <dbl> 234.5, 121.9, 135.4, 69.9, 139.4, 211.7, 248.4, 59.6, 110.…\n$ NOIP        <dbl> 101, 34, 53, 18, 106, 115, 214, 17, 55, 70, 44, 84, 74, 17…\n$ Pop_R       <dbl> 670.3, 243.2, 346.0, 184.1, 301.6, 448.2, 475.1, 189.6, 31…\n$ RSCG        <dbl> 5760.60, 2386.40, 3957.90, 768.04, 4009.50, 5220.40, 22604…\n$ Pop_T       <dbl> 910.8, 388.7, 528.3, 281.3, 578.4, 816.3, 998.6, 256.7, 45…\n$ Agri        <dbl> 4942.253, 2357.764, 4524.410, 1118.561, 3793.550, 6430.782…\n$ Service     <dbl> 5414.5, 3814.1, 14100.0, 541.8, 5444.0, 13074.6, 17726.6, …\n$ Disp_Inc    <dbl> 12373, 16072, 16610, 13455, 20461, 20868, 183252, 12379, 1…\n$ RORP        <dbl> 0.7359464, 0.6256753, 0.6549309, 0.6544614, 0.5214385, 0.5…\n$ ROREmp      <dbl> 0.8929619, 0.8782065, 0.8041262, 0.7460163, 0.9052651, 0.7…\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nRecall that to do left join, we need a common identifier between the 2 data objects. The content must be the same eg. same format and same case. In Hands-on Exercise 1B, we need to (PA, SZ) in the dataset to uppercase before we can join the data.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\nglimpse(hunan)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 88\nColumns: 7\n$ NAME_2    <chr> \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chan…\n$ ID_3      <int> 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2111…\n$ NAME_3    <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ ENGTYPE_3 <chr> \"County\", \"County\", \"County City\", \"County\", \"County\", \"Coun…\n$ County    <chr> \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ GDPPC     <dbl> 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7066…\n$ geometry  <POLYGON [°]> POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 2…\n```\n\n\n:::\n:::\n\n\n\n## Visualising Choropleth Map of GDPPC of Hunan\n\nTo plot a choropleth map showing the distribution of GDPPC of Hunan province:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(hunan) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capita by county, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/hunan_choropleth-1.png){width=864}\n:::\n:::\n\n\n\n## Global Measures of Spatial Association\n\n### Deriving Queen's contiguity weights: sfdep methods\n\nTo derive the Queen's contiguity weights:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- hunan %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\nwm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\n\nNotice that `st_weights()` provides tree arguments, they are:\n\n- _nb_: A neighbor list object as created by st_neighbors().\n- _style_: Default \"W\" for row standardized weights. This value can also be \"B\", \"C\", \"U\", \"minmax\", and \"S\". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n- _allow_zero_: If TRUE, assigns zero as lagged value to zone without neighbors.\n\n:::\n\n### Computing Global Moran' I\n\nWe will use [`global_moran()`](https://sfdep.josiahparry.com/reference/global_moran) function to compute the Moran’s I value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q$wt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[2]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[3]]\n[1] 0.25 0.25 0.25 0.25\n\n[[4]]\n[1] 0.25 0.25 0.25 0.25\n\n[[5]]\n[1] 0.25 0.25 0.25 0.25\n\n[[6]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[7]]\n[1] 0.25 0.25 0.25 0.25\n\n[[8]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[9]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[10]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[11]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[12]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[13]]\n[1] 0.25 0.25 0.25 0.25\n\n[[14]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[15]]\n[1] 0.25 0.25 0.25 0.25\n\n[[16]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[17]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[18]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[19]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[20]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[21]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[22]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[23]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[24]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[25]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[26]]\n[1] 0.25 0.25 0.25 0.25\n\n[[27]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[28]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[29]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[30]]\n[1] 1\n\n[[31]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[32]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[33]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[34]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[35]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[36]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[37]]\n[1] 0.25 0.25 0.25 0.25\n\n[[38]]\n[1] 0.25 0.25 0.25 0.25\n\n[[39]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[40]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[41]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[42]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[43]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[44]]\n[1] 0.25 0.25 0.25 0.25\n\n[[45]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[46]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[47]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[48]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[49]]\n[1] 0.25 0.25 0.25 0.25\n\n[[50]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[51]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[52]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[53]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[54]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[55]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[56]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[57]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[58]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[59]]\n[1] 0.25 0.25 0.25 0.25\n\n[[60]]\n[1] 0.25 0.25 0.25 0.25\n\n[[61]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[62]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[63]]\n[1] 0.25 0.25 0.25 0.25\n\n[[64]]\n[1] 0.5 0.5\n\n[[65]]\n[1] 1\n\n[[66]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[67]]\n[1] 0.25 0.25 0.25 0.25\n\n[[68]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[69]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[70]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[71]]\n[1] 0.3333333 0.3333333 0.3333333\n\n[[72]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[73]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[74]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[75]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[76]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[77]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[78]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[79]]\n[1] 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571 0.1428571\n\n[[80]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n[[81]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[82]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n[[83]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[84]]\n[1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667\n\n[[85]]\n [1] 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909\n [7] 0.09090909 0.09090909 0.09090909 0.09090909 0.09090909\n\n[[86]]\n[1] 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111 0.1111111\n[8] 0.1111111 0.1111111\n\n[[87]]\n[1] 0.25 0.25 0.25 0.25\n\n[[88]]\n[1] 0.5 0.5\n\nattr(,\"mode\")\n[1] \"binary\"\nattr(,\"W\")\n[1] TRUE\nattr(,\"comp\")\nattr(,\"comp\")$d\n [1]  5  5  4  4  4  5  4  7  6  8  3  5  4  3  4  5  7  5  6  7  5  5  7  5  5\n[26]  4  3  5  3  1  8  8  5  3  6  6  4  4  5  6  6  7  6  4  6  3  5  5  4  5\n[51]  3  5  3  6  5  7  6  5  4  4  7  3  4  2  1  5  4  5  3  3  3  5  5  6  6\n[76]  7  7  7  7  8  6  5  9  6 11  9  4  2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI <- global_moran(\n  wm_q$GDPPC, # Target variable: GDP per capita\n  wm_q$nb, # Neighborhood structure\n  wm_q$wt # Spatial weights\n)\n\nglimpse(moranI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\n\nUnlike the `spdep` package, the output of the `global_moran()` function is a tibble data frame, making it easier to work with in the tidyverse environment.\n\n:::\n\n## Performing Global Moran's I Test\n\n::: callout-tip\n\nPreviously, we calculated the Moran's I statistic using the `global_moran()` function. However, this approach does not allow for formal hypothesis testing, as it only returns the Moran's I value, not the associated p-value or significance level. Therefore, we cannot determine whether spatial autocorrelation is statistically significant with this method.\n\n:::\n\nTo conduct a proper hypothesis test, we need to use the `global_moran_test()` function from the `sfdep` package, which computes the Moran's I statistic and also performs a permutation-based significance test. This allows us to assess whether the observed spatial autocorrelation is significantly different from what would be expected under spatial randomness.\n\nThe following code demonstrates how to perform the Moran's I test:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(\n  wm_q$GDPPC, # Target variable: GDP per capita\n  wm_q$nb, # Neighborhood structure\n  wm_q$wt # Spatial weights\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n\n\n:::\n:::\n\n\n\nThis method not only calculates the Moran's I statistic but also provides a p-value for assessing the significance of the spatial autocorrelation.\n\n::: callout-note\n\n**Observations:**\n\n- **Moran's I statistic:** 0.301, indicating moderate positive spatial autocorrelation.\n- **P-value:** 1.095e-06, highly significant, confirming strong evidence of positive spatial autocorrelation.\n\n:::\n\n## Perfoming Global Moran's I Permutation Test\n\nIn practice, a Monte Carlo simulation should be used to perform the statistical test. In the `sfdep` package, this is supported by the `global_moran_perm()` function.\n\nLet us use `set.seed()` before performing simulation. This is to ensure that the computation is reproducible.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\nNow we will perform Monte Carlo simulation using `global_moran_perm()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 99) # means running this 100 times because it started from 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n```\n\n\n:::\n:::\n",
    "supporting": [
      "In-class_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}