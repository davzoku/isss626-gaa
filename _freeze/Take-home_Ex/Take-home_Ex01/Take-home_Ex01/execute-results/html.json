{
  "hash": "1ab48bd88133eff73f6c9dfee0968465",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 1\"\nsubtitle: \"In this exercise, we will apply spatial and spatio-temporal point pattern analysis methods to identify factors affecting road traffic accidents in the Bangkok Metropolitan Region (BMR), including visualizing spatio-temporal dynamics, conducting spatial analysis using Network Spatial Point Patterns, and analyzing spatio-temporal patterns using Temporal Network Spatial Point Patterns.\"\n# draft: true\ndate: \"Sep 05, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true\n  eval: true\n  freeze: auto\n  message: false\n  warning: false\nformat:\n  html:\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n\n## Assignment Task\n\nRefer to: [ISSS626 Geospatial Analytics and Applications - Take-home Exercise 1: Geospatial Analytics for Public Good](https://isss626-ay2024-25aug.netlify.app/take-home_ex01)\n\n## Overview\n\nIn this exercise, we will apply spatial and spatio-temporal point pattern analysis methods to identify factors affecting road traffic accidents in the Bangkok Metropolitan Region (BMR), including:\n\n1. visualizing spatio-temporal dynamics, \n2. conducting spatial analysis using Network Spatial Point Patterns, and \n3. analyzing spatio-temporal patterns using Temporal Network Spatial Point Patterns.\n\n## The Analytical Questions\n\nThis study seeks to uncover the factors influencing road traffic accidents in the Bangkok Metropolitan Region (BMR) by utilizing both spatial and spatio-temporal point patterns analysis methods.\n\n> Our key questions are:\n> \n> 1. What behavioral, environmental, and temporal factors contribute to these accidents?\n> 2. What are the spatial and temporal patterns of road traffic accidents in BMR?\n> 3. Are traffic accidents in the BMR randomly distributed throughout the region?\n> 4. If the distribution is not random, where are the areas with higher concentrations of accidents?\n\n## The Data\n\nThe following 3 datasets will be used in this exercise.\n\n| **Dataset Name**                                 | **Description**                                                              | **Format**     | **Source**                                                                              |\n|--------------------------------------------------|------------------------------------------------------------------------------|----------------|-----------------------------------------------------------------------------------------|\n| Thailand Road Accident [2019-2022]               | Data on road accidents in Thailand, including details on location, severity, and date of incidents. | CSV            | [Kaggle](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) |\n| Thailand Roads (OpenStreetMap Export)            | Geospatial data showing the complete road network of Thailand, extracted from OpenStreetMap.                        | ESRI Shapefile | [Humanitarian Data Exchange (HDX)](https://data.humdata.org/dataset/hotosm_tha_roads)   |\n| Thailand - Subnational Administrative Boundaries | Geospatial dataset detailing the administrative boundaries of Thailand's provinces and districts.                   | ESRI Shapefile | [Humanitarian Data Exchange (HDX)](https://data.humdata.org/dataset/cod-ab-tha?)        |\n\n## Installing and Launching the R Packages\n\nThe following R packages will be used in this exercise:\n\n| **Package**   | **Purpose**                                                                                                | **Use Case in Exercise**                                                                                  |\n|--------------|------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|\n| **tidyverse** | A collection of packages for data manipulation, visualization, and data analysis.                          | Importing, cleaning, and transforming data for analysis.                                                    |\n| **sf**        | Imports, manages, and processes vector-based geospatial data.                                              | Handling and analyzing geospatial data such as road networks and administrative boundaries.                 |\n| **tmap**      | Creates both static and interactive thematic maps with high cartographic quality.                          | Visualizing road traffic accident locations and spatial patterns in Thailand.                               |\n| **spNetwork** | Provides tools for network-constrained spatial data analysis, such as point pattern analysis on road networks. | Conducting network spatial point pattern analysis to study traffic accident patterns along road networks.    |\n| **spatstat**  | A toolkit for spatial point pattern analysis.                                                              | Performing advanced spatial analysis, such as identifying hotspots of road traffic accidents.               |\n| **plotly**    | Creates interactive and web-ready visualizations.                                                          | Building interactive charts and maps to explore the spatio-temporal dynamics of traffic accidents.          |\n| **gtsummary** | Generates publication-ready summary tables of statistical results.                                         | Summarizing descriptive statistics and results from the analysis of road traffic accidents.                 |\n| **sparr**     | Provides tools for spatio-temporal analysis of point patterns, including kernel density estimation.        | Performing spatio-temporal analysis to assess the spread and dynamics of road traffic accidents over time.  |\n\nTo install and load these packages, use the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, spNetwork, spatstat, plotly, gtsummary, sparr)\n```\n:::\n\n\n\n\n### Reproducibilty\n\nFor reproducible results of this exercise, we will use seed value, `1234`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n\n## Import Data and Preparation\n\nIn this section, we will perform sanity checks on the raw data from from the official data sources and identify useful data for our case study area.\n\n### Thai Road Accident Data\n\nFirstly, we will import the Thai Road Accident dataset from 2019-2022 using `read_csv()` of **readr** package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"data/raw_data/thai_road_accident_2019_2022.csv\")\nrdacc_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 81,735 × 18\n   acc_code incident_datetime   report_datetime     province_th province_en     \n      <dbl> <dttm>              <dttm>              <chr>       <chr>           \n 1   571905 2019-01-01 00:00:00 2019-01-02 06:11:00 ลพบุรี        Loburi          \n 2  3790870 2019-01-01 00:03:00 2020-02-20 13:48:00 อุบลราชธานี   Ubon Ratchathani\n 3   599075 2019-01-01 00:05:00 2019-01-01 10:35:00 ประจวบคีรีขันธ์ Prachuap Khiri …\n 4   571924 2019-01-01 00:20:00 2019-01-02 05:12:00 เชียงใหม่     Chiang Mai      \n 5   599523 2019-01-01 00:25:00 2019-01-04 09:42:00 นครสวรรค์    Nakhon Sawan    \n 6   571982 2019-01-01 00:30:00 2019-01-07 12:46:00 แม่ฮ่องสอน    Mae Hong Son    \n 7   612782 2019-01-01 00:30:00 2019-10-25 14:25:00 ชุมพร        Chumphon        \n 8   599235 2019-01-01 00:35:00 2019-01-02 16:23:00 สิงห์บุรี       Sing Buri       \n 9   600643 2019-01-01 00:40:00 2019-01-11 10:01:00 สงขลา       Songkhla        \n10   599105 2019-01-01 00:45:00 2019-01-01 10:11:00 ตราด        Trat            \n# ℹ 81,725 more rows\n# ℹ 13 more variables: agency <chr>, route <chr>, vehicle_type <chr>,\n#   presumed_cause <chr>, accident_type <chr>,\n#   number_of_vehicles_involved <dbl>, number_of_fatalities <dbl>,\n#   number_of_injuries <dbl>, weather_condition <chr>, latitude <dbl>,\n#   longitude <dbl>, road_description <chr>, slope_description <chr>\n```\n\n\n:::\n:::\n\n\n\n\nFrom the output above, we can observe that **there are 18 columns in this dataset and there are 81,735 accidents recorded in this dataset**. \n\n::: {.callout-note collapse=\"true\"}\n\n### We can check data dictionary from [Kaggle](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) to understand this dataset.\n\n| **Column**                  | **Description**                                                                |\n|-----------------------------|--------------------------------------------------------------------------------|\n| acc_code                    | The accident code or identifier.                                               |\n| incident_datetime           | The date and time of the accident occurrence.                                  |\n| report_datetime             | The date and time when the accident was reported.                              |\n| province_th                 | The name of the province in Thailand, written in Thai.                         |\n| province_en                 | The name of the province in Thailand, written in English.                      |\n| agency                      | The government agency responsible for the road and traffic management.         |\n| route                       | The route or road segment where the accident occurred.                         |\n| vehicle_type                | The type of vehicle involved in the accident.                                  |\n| presumed_cause              | The presumed cause or reason for the accident.                                 |\n| accident_type               | The type or nature of the accident.                                            |\n| number_of_vehicles_involved | The number of vehicles involved in the accident.                               |\n| number_of_fatalities        | The number of fatalities resulting from the accident.                          |\n| number_of_injuries          | The number of injuries resulting from the accident.                            |\n| weather_condition           | The weather condition at the time of the accident.                             |\n| latitude                    | The latitude coordinate of the accident location.                              |\n| longitude                   | The longitude coordinate of the accident location.                             |\n| road_description            | The description of the road type or configuration where the accident occurred. |\n| slope_description           | The description of the slope condition at the accident location.               |\n:::\n\nNext, we check for null values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_counts <- sapply(rdacc_sf, function(x) sum(is.na(x)))\nnull_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   acc_code           incident_datetime \n                          0                           0 \n            report_datetime                 province_th \n                          0                           0 \n                province_en                      agency \n                          0                           0 \n                      route                vehicle_type \n                          0                           0 \n             presumed_cause               accident_type \n                          0                           0 \nnumber_of_vehicles_involved        number_of_fatalities \n                          0                           0 \n         number_of_injuries           weather_condition \n                          0                           0 \n                   latitude                   longitude \n                        359                         359 \n           road_description           slope_description \n                          0                           0 \n```\n\n\n:::\n\n```{.r .cell-code}\ndata.frame(Column = names(null_counts), Null_Count = null_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                 Column Null_Count\nacc_code                                       acc_code          0\nincident_datetime                     incident_datetime          0\nreport_datetime                         report_datetime          0\nprovince_th                                 province_th          0\nprovince_en                                 province_en          0\nagency                                           agency          0\nroute                                             route          0\nvehicle_type                               vehicle_type          0\npresumed_cause                           presumed_cause          0\naccident_type                             accident_type          0\nnumber_of_vehicles_involved number_of_vehicles_involved          0\nnumber_of_fatalities               number_of_fatalities          0\nnumber_of_injuries                   number_of_injuries          0\nweather_condition                     weather_condition          0\nlatitude                                       latitude        359\nlongitude                                     longitude        359\nroad_description                       road_description          0\nslope_description                     slope_description          0\n```\n\n\n:::\n:::\n\n\n\n\nFrom the output above, we can notice that are **359 missing data** in the `latitude` *(lat)* and `longitude` *(lon)* columns. **We will remove these rows as they make up \\<5% of the total records.**\n\nNext, we check for duplicate values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate_count <- sum(duplicated(rdacc_sf))\nduplicate_count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\nThere are **no exact duplicates** in this dataset.\n\nNext, we observe the provinces available in this dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display unique values in the \"ST\" column sorted in ascending order\nsort(unique(rdacc_sf$province_en))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Amnat Charoen\"            \"Ang Thong\"               \n [3] \"Bangkok\"                  \"buogkan\"                 \n [5] \"Buri Ram\"                 \"Chachoengsao\"            \n [7] \"Chai Nat\"                 \"Chaiyaphum\"              \n [9] \"Chanthaburi\"              \"Chiang Mai\"              \n[11] \"Chiang Rai\"               \"Chon Buri\"               \n[13] \"Chumphon\"                 \"Kalasin\"                 \n[15] \"Kamphaeng Phet\"           \"Kanchanaburi\"            \n[17] \"Khon Kaen\"                \"Krabi\"                   \n[19] \"Lampang\"                  \"Lamphun\"                 \n[21] \"Loburi\"                   \"Loei\"                    \n[23] \"Mae Hong Son\"             \"Maha Sarakham\"           \n[25] \"Mukdahan\"                 \"Nakhon Nayok\"            \n[27] \"Nakhon Pathom\"            \"Nakhon Phanom\"           \n[29] \"Nakhon Ratchasima\"        \"Nakhon Sawan\"            \n[31] \"Nakhon Si Thammarat\"      \"Nan\"                     \n[33] \"Narathiwat\"               \"Nong Bua Lam Phu\"        \n[35] \"Nong Khai\"                \"Nonthaburi\"              \n[37] \"Pathum Thani\"             \"Pattani\"                 \n[39] \"Phangnga\"                 \"Phatthalung\"             \n[41] \"Phayao\"                   \"Phetchabun\"              \n[43] \"Phetchaburi\"              \"Phichit\"                 \n[45] \"Phitsanulok\"              \"Phra Nakhon Si Ayutthaya\"\n[47] \"Phrae\"                    \"Phuket\"                  \n[49] \"Prachin Buri\"             \"Prachuap Khiri Khan\"     \n[51] \"Ranong\"                   \"Ratchaburi\"              \n[53] \"Rayong\"                   \"Roi Et\"                  \n[55] \"Sa Kaeo\"                  \"Sakon Nakhon\"            \n[57] \"Samut Prakan\"             \"Samut Sakhon\"            \n[59] \"Samut Songkhram\"          \"Saraburi\"                \n[61] \"Satun\"                    \"Si Sa Ket\"               \n[63] \"Sing Buri\"                \"Songkhla\"                \n[65] \"Sukhothai\"                \"Suphan Buri\"             \n[67] \"Surat Thani\"              \"Surin\"                   \n[69] \"Tak\"                      \"Trang\"                   \n[71] \"Trat\"                     \"Ubon Ratchathani\"        \n[73] \"Udon Thani\"               \"unknown\"                 \n[75] \"Uthai Thani\"              \"Uttaradit\"               \n[77] \"Yala\"                     \"Yasothon\"                \n```\n\n\n:::\n:::\n\n\n\n\nFrom the output above, we can notice that the dataset contains data from across 78 provinces in Thailand. Since our study area is only in [Bangkok Metropolitan Region (BMR)](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region), we will filter the data for records in \"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\" only.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# list province names in BMR\nbmr_regions <- c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\")\n```\n:::\n\n\n\n\n::: callout-note\n\nWe will perform the data preprocessing steps as follows:\n\n-   filter data for 6 provinces in BMR by `province_en`\n-   remove null lat, lon rows\n-   convert filtered data into a sf spatial object, using the lat, lon columns and setting the coordinate reference system (CRS) to EPSG [4326](https://epsg.io/4326)\n-   reproject spatial data to EPSG [32647](https://epsg.io/32647) used in Thailand. This format is in metres.\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_bmr <- rdacc_sf %>%\n  filter(province_en %in% bmr_regions) %>%\n  filter (!is.na(longitude) & longitude != \"\",\n          !is.na(latitude ) & latitude != \"\") %>%  \n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %>%\n  st_transform(crs=32647)\n```\n:::\n\n\n\n\n### Thailand Subnational Administration Boundary\n\nThe Thailand subnational administrative boundaries dataset includes four levels:\n- country (level 0), \n- province (level 1), \n- district (level 2), and \n- sub-district (level 3). \n\nFor this analysis, we will focus on the 6 provinces in the Bangkok Metropolitan Region (BMR) using level 2 boundaries as it provides a finer level of detail and allows for a more granular understanding of spatial patterns and accident hotspots within the Bangkok Metropolitan Region (BMR).\n\nThe data will be loaded with `st_read()` and transformed to EPSG:32647 (UTM Zone 47N, meters).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundary <- st_read(dsn = \"data/raw_data\", \n                # try different layer\n                # 0 country\n                # layer = \"tha_admbnda_adm0_rtsd_20220121\") %>%      \n                # 1 province\n                #layer = \"tha_admbnda_adm1_rtsd_20220121\") %>% \n                # 2 district\n                layer = \"tha_admbnda_adm2_rtsd_20220121\") %>% \n  st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `/Users/walter/code/isss626/isss626-gaa/Take-home_Ex/Take-home_Ex01/data/raw_data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(admin_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n\nLet's observe this dataset for useful attributes to filter for BMR region from the national boundary data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(admin_boundary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 928\nColumns: 20\n$ Shape_Leng <dbl> 0.08541733, 0.13413177, 0.67634217, 0.08588647, 0.30172202,…\n$ Shape_Area <dbl> 0.0004504685, 0.0009501914, 0.0198588627, 0.0003369561, 0.0…\n$ ADM2_EN    <chr> \"Phra Nakhon\", \"Dusit\", \"Nong Chok\", \"Bang Rak\", \"Bang Khen…\n$ ADM2_TH    <chr> \"พระนคร\", \"ดุสิต\", \"หนองจอก\", \"บางรัก\", \"บางเขน\", \"บางกะปิ\", \"ป…\n$ ADM2_PCODE <chr> \"TH1001\", \"TH1002\", \"TH1003\", \"TH1004\", \"TH1005\", \"TH1006\",…\n$ ADM2_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Bangkok\", \"Ban…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหานคร\", \"กรุงเทพมหาน…\n$ ADM1_PCODE <chr> \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH10\", \"TH…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((662263.2 15..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n\n\nSimilar to the road accident csv file, we can filter for the BMR region using `ADM1_EN`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundary_bmr <- admin_boundary %>% \n  select(\"ADM1_EN\") %>% \n  filter(ADM1_EN %in% bmr_regions)\n```\n:::\n\n\n\n\nNext, we save the filtered data in RDS format for quick loading in future analyses.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(admin_boundary_bmr, file = \"data/rds/admin_boundary_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_boundary_bmr <-read_rds(\"data/rds/admin_boundary_bmr.rds\")\n```\n:::\n\n\n\n\nLet’s visualize the administrative boundaries map using **tmap**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n\ntm_shape(admin_boundary_bmr) +\n  tm_fill(col = \"ADM1_EN\", title = \"Region\") +\n  tm_borders() +\n  tm_layout(main.title = \"BMR Administrative Boundaries\",\n            main.title.position = \"center\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/admin_boundary_bmr-1.png){width=672}\n:::\n:::\n\n\n\n\n### Road Lines\n\nNext, we will use `st_read()` import the Thailand Roads dataset\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- st_read(dsn = \"data/raw_data\", \n                layer = \"hotosm_tha_roads_lines_shp\")\n```\n:::\n\n\n\n\n::: callout-note\n\nWe observed that **this dataset has over 2 million features**. \n\nThe geospatial data is in the form of `MULTILINESTRING`, representing multiple connected line segments. Using `st_cast(\"LINESTRING\")` simplifies the geometry by converting these into single line segments (`LINESTRING`), making spatial operations, such as length calculations and spatial joins, easier for analysis. \n\nWe also assigned the correct CRS with `st_set_crs()` before transforming the data to the desired EPSG:32647 projection.\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_sf <- st_set_crs(roads, 4326) %>% \n  st_transform(crs = 32647) %>% \n  st_cast(\"LINESTRING\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(roads_sf)\n```\n:::\n\n\n\n\nNext, we can observe some data attributes of this dataset such as `highway` types.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display unique values in the \"highway\" column sorted in ascending order\nsort(unique(roads_sf$highway))\n```\n:::\n\n````{=html}\n<!-- \n\nintend to check distribution but this takes forever.\n\n```\nhighway_distribution <- roads_sf %>%\n  count(highway)\n\nhighway_distribution\n```\n\n-->\n````\n\n\n\n\nFor the purpose of this study, we will focus on the 6 **Intercity** highway classifications: see [WikiProject Thailand - OpenStreetMap Wiki](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhighway_types <- c(\"motorway\", # controlled-access\n                  \"trunk\", # uncontrolled-access\n                  \"primary\", # 3-digit national highway\n                  \"secondary\", # 4-digit national highway\n                  \"tertiary\", # all rural roads\n                  \"unclassified\" # lowest rank of usable public roads\n                  ) \n\nroads_sf_filtered <- roads_sf %>%\n  select(\"highway\") %>% \n  filter(highway %in% highway_types)\n```\n:::\n\n\n\n\nAfter filtering for Intercity highway types, we use `st_intersection()` to find the roads within BMR region.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_bmr <- st_intersection(roads_sf_filtered,\n                            admin_boundary_bmr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# raw roads rows\nraw_size <- dim(roads_sf)[1]\n# roads rows after filter for 6 intercity types\nfiltered_size <- dim(roads_sf_filtered)[1]\n# roads size after filter for bmr region only\nbmr_size <- dim(roads_bmr)[1]   \n\nreduction_filtered <- raw_size - filtered_size\nreduction_bmr <- raw_size - bmr_size \n\nreduction_filtered_percent <- (reduction_filtered / raw_size) * 100\nreduction_bmr_percent <- (reduction_bmr / raw_size) * 100\n\ncat(\"Raw Size:\", raw_size, \"\\n\")\ncat(\"Filtered Size:\", filtered_size, \"\\n\")\ncat(\"BMR Size:\", bmr_size, \"\\n\\n\")\n\ncat(\"Reduction from roads_sf to roads_sf_filtered:\\n\")\ncat(\"Percentage reduction:\", round(reduction_filtered_percent, 2), \"%\\n\\n\")\n\ncat(\"Reduction from roads_sf to roads_bmr:\\n\")\ncat(\"Percentage reduction:\", round(reduction_bmr_percent, 2), \"%\\n\")\n```\n:::\n\n````{=html}\n<!-- \n\n> Raw Size: 2792362 \n> Filtered Size: 202820 \n> BMR Size: 27760 \n\n> Reduction from roads_sf to roads_sf_filtered:\n> Percentage reduction: 92.74 %\n\n> Reduction from roads_sf to roads_bmr:\n> Percentage reduction: 99.01 %\n\n--!>\n````\n\n\n\n\n\n::: callout-note\nIn this study, we focus on the 6 intercity highway types within the Bangkok Metropolitan Region (BMR).\n\nFirst, we filter the data by highway types and then narrow it down to the BMR region. \n**This method results in a 99.01% reduction in data size, from 2,792,362 road features to 27,760.**\n\nAlternatively, we could have first isolated the BMR region and then analyzed the distribution of highway types before filtering. However, we chose not to use this approach, as the `st_intersection()` step would be significantly more time-consuming.\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(roads_bmr, \"data/rds/roads_bmr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads_bmr <- read_rds(\"data/rds/roads_bmr.rds\")\n```\n:::\n\n\n\n\n## Feature Engineering\n\nAfter going through all the 3 datasets, we have a better sense of the dataset that we are working with. In this section, we will transform certain columns to more usable formats and feature engineer new columns to aid our analysis:\n\n- break down `incident_datetime` to various *factors*\n\n- add `season` column to capture 3 seasons: Refer to [Bangkok - Wikipedia](https://en.wikipedia.org/wiki/Bangkok#Climate)\n  - March to May: Hot\n  - Jun to Oct: Rainy\n  - Nov to Feb: Cool\n\n- add `peak_period` to capture peak hour patterns: Refer to [How Do You Beat Bangkok Traffic?](https://www.drivecarrental.com/blog/2023/10/05/how-do-you-beat-bangkok-traffic/#:~:text=Like%20most%20cities%2C%207%3A00,00%20to%207%3A00%20PM.) \n  - Morning Peak: 7-9 am \n  - Evening Peak: 4-7 pm\n\n- add `songkran_7_dead_days` columns to capture 7 deadly days of songkran period: Refer to: [25 deaths in 234 road accidents recorded on 1st of Songkran’s ‘7 dangerous days’](https://www.nationthailand.com/thailand/general/40037198), \n  - 7 Deadly Days of Songkran: 11-17 Apr each year\n\n- Remove unused columns such as `province_th` and so on.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\naccidents_bmr_ft <- accidents_bmr %>%\n  # extract month number (1 = January, 12 = December)\n  mutate(month_number = month(incident_datetime)) %>%\n  \n  # extract month as factor (\"Jan\", \"Feb\")\n  mutate(month_factor = month(incident_datetime, label = TRUE, abbr = TRUE)) %>%\n  \n  # extract day of month\n  mutate(day_of_month = day(incident_datetime)) %>%\n  \n  # extract the day of the week (1 = Mon)\n  mutate(day_of_week = wday(incident_datetime, week_start = 1)) %>%\n  \n  # extract year\n  mutate(year = year(incident_datetime)) %>%\n  \n  # extract time (HH:MM:SS)\n  mutate(time = format(incident_datetime, format = \"%H:%M:%S\")) %>%\n  \n  # add season col\n  mutate(season = case_when(\n    month_number %in% c(3, 4, 5) ~ \"Hot\",          # March to May\n    month_number %in% c(6, 7, 8, 9, 10) ~ \"Rainy\", # June to October\n    month_number %in% c(11, 12, 1, 2) ~ \"Cool\"     # November to February\n  )) %>%\n  \n  # add peak period col (7-9 am or 4-7 pm)\n  mutate(peak_period = case_when(\n    format(incident_datetime, \"%H:%M:%S\") >= \"07:00:00\" & format(incident_datetime, \"%H:%M:%S\") <= \"09:00:00\" ~ \"Morning Peak\",\n    format(incident_datetime, \"%H:%M:%S\") >= \"16:00:00\" & format(incident_datetime, \"%H:%M:%S\") <= \"19:00:00\" ~ \"Evening Peak\",\n    TRUE ~ \"Off-Peak\"\n  )) %>%\n  \n  # Add column to identify Songkran's \"7 Deadly Days\"\n  mutate(songkran_7_dead_days = month_number == 4 & day_of_month >= 11 & day_of_month <= 17) %>%\n  # drop unused columns\n  select(-c(\"province_th\", \n            \"incident_datetime\", \n            \"report_datetime\",\n            \"route\",\n            \"agency\"))  \n\naccidents_bmr_ft\n```\n:::\n\n\n\nThen, we save this processed accident data in RDS data format for future analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(accidents_bmr_ft, \"data/rds/accidents_bmr_ft.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_bmr_ft <- read_rds(\"data/rds/accidents_bmr_ft.rds\")\n```\n:::\n\n\n\n\n## Exploratory Data Analysis (EDA)\n\nIn this section, we conduct an Exploratory Data Analysis (EDA) to visualize the trends and distribution of road accidents in Thailand from 2019 to 2022. A combination of plots and choropleth maps will be used to reveal key patterns and insights.\n\n### Overall Plot\n\nFirst, we will plot the 3 datasets onto a single choropleth map to gain a general understanding.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntmap_mode('plot')\n\ntm_shape(admin_boundary_bmr) + \n  tm_polygons(col = \"ADM1_EN\", alpha = 0.6, border.col = \"black\", lwd = 0.7, title = \"Region\") +\n  tm_shape(roads_bmr) +\n  tm_lines(col = \"darkgreen\", lwd = 1.5, alpha = 0.8) +                                       \n  tm_shape(accidents_bmr_ft) + \n  tm_dots(col = \"red\", size = 0.05, alpha = 0.5) +                                                \n  tm_layout(\n    main.title = \"Road Traffic Accidents in Bangkok Metropolitan Region (2019-2022)\",\n    main.title.position = c(\"center\", \"top\"), \n    frame = FALSE,\n    legend.outside = TRUE,               \n    legend.position = c(\"right\", \"bottom\"), \n    title.size = 0.8,     \n    legend.text.size = 1, \n    legend.title.size = 1 \n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/overall_tmap-1.png){width=1152}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The majority of accidents are concentrated along the Intercity road network.\n\n- This suggests that the 6 existing Intercity highway types provide sufficient coverage, and we don't require to add more highway types from the original roads dataset for this study.\n\n:::\n\n### Visualize Geographic Distribution of Accidents by Year\n\nNext, we use choropleth maps and stacked bar charts to explore the distribution of road traffic accidents across the BMR from 2019 to 2022.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntmap_mode('plot')\n\ntm_shape(admin_boundary_bmr) + \n  tm_polygons(border.col = \"darkgray\", alpha = 0.5) +\ntm_shape(roads_bmr) + \n  tm_lines(col = \"darkgreen\", lwd = 0.7) +\ntm_shape(accidents_bmr_ft) + \n  tm_dots(size = 0.2, col = \"red\", alpha = 0.6) +\n# facet by year\ntm_facets(by = \"year\") +\ntm_layout(\n  main.title = \"Accident Trends by Year in Bangkok Metropolitan Region (2019-2022)\",\n  main.title.size = 1.5, \n  main.title.position = c(\"center\", \"top\"), \n  frame = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/tmap_by_years-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Calculate total accidents by year\naccidents_by_year <- accidents_bmr_ft %>%\n  st_drop_geometry() %>%                  \n  group_by(year) %>%\n  summarize(total_accidents = n())\n\n# Calculate total accidents by province and year\naccidents_by_province_year <- accidents_bmr_ft %>%\n  st_drop_geometry() %>%                  \n  group_by(year, province_en) %>%\n  summarize(total_accidents = n()) %>%\n  ungroup()\n\n# Summarize total accidents for each year (for trendline)\ntotal_accidents_by_year <- accidents_by_province_year %>%\n  group_by(year) %>%\n  summarize(total_accidents = sum(total_accidents))\n\n# create stacked bar chart with trendline\nfig_accidents_by_year_province <- plot_ly() %>%\n  # add stack bar chart\n  add_trace(\n    data = accidents_by_province_year,\n    x = ~year,\n    y = ~total_accidents,\n    color = ~province_en,\n    type = 'bar',\n    text = ~paste(province_en, \": \", total_accidents), \n    hoverinfo = 'text', \n    name = ~province_en \n  ) %>%\n  # add trendline\n  add_trace(\n    data = total_accidents_by_year,\n    x = ~year,\n    y = ~total_accidents,\n    type = 'scatter',\n    mode = 'lines+markers',\n    line = list(color = 'black', dash = 'dash'),\n    marker = list(color = 'black', size = 6), \n    name = 'Total Accidents Trend'\n  ) %>%\n  layout(\n    barmode = 'stack',\n    title = \"Total Accidents by Year and Province with Trendline\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Total Accidents\"),\n    legend = list(title = list(text = \"Province\")) \n  )\n\nfig_accidents_by_year_province\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-1b4ff99564eb6e8884a5\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1b4ff99564eb6e8884a5\">{\"x\":{\"visdat\":{\"112f6742105db\":[\"function () \",\"plotlyVisDat\"],\"112f62407a86d\":[\"function () \",\"data\"],\"112f672c29e95\":[\"function () \",\"data\"]},\"cur_data\":\"112f672c29e95\",\"attrs\":{\"112f62407a86d\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"color\":{},\"type\":\"bar\",\"text\":{},\"hoverinfo\":\"text\",\"name\":{},\"inherit\":true},\"112f672c29e95\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"color\":\"black\",\"dash\":\"dash\"},\"marker\":{\"color\":\"black\",\"size\":6},\"name\":\"Total Accidents Trend\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"barmode\":\"stack\",\"title\":\"Total Accidents by Year and Province with Trendline\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Year\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Total Accidents\"},\"legend\":{\"title\":{\"text\":\"Province\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[2019,2020,2021,2022],\"y\":[1422,1585,1281,1801],\"type\":\"bar\",\"text\":[\"Bangkok :  1422\",\"Bangkok :  1585\",\"Bangkok :  1281\",\"Bangkok :  1801\"],\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\"],\"name\":\"Bangkok\",\"marker\":{\"color\":\"rgba(102,194,165,1)\",\"line\":{\"color\":\"rgba(102,194,165,1)\"}},\"textfont\":{\"color\":\"rgba(102,194,165,1)\"},\"error_y\":{\"color\":\"rgba(102,194,165,1)\"},\"error_x\":{\"color\":\"rgba(102,194,165,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[316,254,186,135],\"type\":\"bar\",\"text\":[\"Nakhon Pathom :  316\",\"Nakhon Pathom :  254\",\"Nakhon Pathom :  186\",\"Nakhon Pathom :  135\"],\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\"],\"name\":\"Nakhon Pathom\",\"marker\":{\"color\":\"rgba(252,141,98,1)\",\"line\":{\"color\":\"rgba(252,141,98,1)\"}},\"textfont\":{\"color\":\"rgba(252,141,98,1)\"},\"error_y\":{\"color\":\"rgba(252,141,98,1)\"},\"error_x\":{\"color\":\"rgba(252,141,98,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[154,242,256,175],\"type\":\"bar\",\"text\":[\"Nonthaburi :  154\",\"Nonthaburi :  242\",\"Nonthaburi :  256\",\"Nonthaburi :  175\"],\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\"],\"name\":\"Nonthaburi\",\"marker\":{\"color\":\"rgba(141,160,203,1)\",\"line\":{\"color\":\"rgba(141,160,203,1)\"}},\"textfont\":{\"color\":\"rgba(141,160,203,1)\"},\"error_y\":{\"color\":\"rgba(141,160,203,1)\"},\"error_x\":{\"color\":\"rgba(141,160,203,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[391,489,557,486],\"type\":\"bar\",\"text\":[\"Pathum Thani :  391\",\"Pathum Thani :  489\",\"Pathum Thani :  557\",\"Pathum Thani :  486\"],\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\"],\"name\":\"Pathum Thani\",\"marker\":{\"color\":\"rgba(231,138,195,1)\",\"line\":{\"color\":\"rgba(231,138,195,1)\"}},\"textfont\":{\"color\":\"rgba(231,138,195,1)\"},\"error_y\":{\"color\":\"rgba(231,138,195,1)\"},\"error_x\":{\"color\":\"rgba(231,138,195,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[431,486,655,669],\"type\":\"bar\",\"text\":[\"Samut Prakan :  431\",\"Samut Prakan :  486\",\"Samut Prakan :  655\",\"Samut Prakan :  669\"],\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\"],\"name\":\"Samut Prakan\",\"marker\":{\"color\":\"rgba(166,216,84,1)\",\"line\":{\"color\":\"rgba(166,216,84,1)\"}},\"textfont\":{\"color\":\"rgba(166,216,84,1)\"},\"error_y\":{\"color\":\"rgba(166,216,84,1)\"},\"error_x\":{\"color\":\"rgba(166,216,84,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[275,230,183,327],\"type\":\"bar\",\"text\":[\"Samut Sakhon :  275\",\"Samut Sakhon :  230\",\"Samut Sakhon :  183\",\"Samut Sakhon :  327\"],\"hoverinfo\":[\"text\",\"text\",\"text\",\"text\"],\"name\":\"Samut Sakhon\",\"marker\":{\"color\":\"rgba(255,217,47,1)\",\"line\":{\"color\":\"rgba(255,217,47,1)\"}},\"textfont\":{\"color\":\"rgba(255,217,47,1)\"},\"error_y\":{\"color\":\"rgba(255,217,47,1)\"},\"error_x\":{\"color\":\"rgba(255,217,47,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[2989,3286,3118,3593],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"color\":\"black\",\"dash\":\"dash\"},\"marker\":{\"color\":\"black\",\"size\":6,\"line\":{\"color\":\"rgba(227,119,194,1)\"}},\"name\":\"Total Accidents Trend\",\"error_y\":{\"color\":\"rgba(227,119,194,1)\"},\"error_x\":{\"color\":\"rgba(227,119,194,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- Overall, accident trends indicate a general upward trajectory over the years.\n- The total number of accidents increased from 2019 to 2022, with a slight dip in 2021.\n- Bangkok consistently recorded the highest number of accidents each year.\n- Pathum Thani and Samut Prakan also contributed significantly to the accident counts.\n- The number of accidents in 2022 saw a noticeable rise, particularly in Bangkok and Samut Sakhon.\n\n:::\n\n### Visualize Geographic Distribution of Accidents by Month\n\nNext, we visualize the distribution of accidents by months and seasons.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntmap_mode('plot')\n\ntm_shape(admin_boundary_bmr) + \n  tm_polygons(border.col = \"darkgray\", alpha = 0.5) +\ntm_shape(roads_bmr) + \n  tm_lines(col = \"darkgreen\", lwd = 0.7) +\ntm_shape(accidents_bmr_ft) + \n  tm_dots(size = 0.2, col = \"red\", alpha = 0.6) +\n# facet by month_factor\ntm_facets(by = \"month_factor\") +\ntm_layout(\n  main.title = \"Accident Trends by Month in Bangkok Metropolitan Region (2019-2022)\",\n  main.title.size = 1.5, \n  main.title.position = c(\"center\", \"top\"), \n  frame = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/tmap_by_month-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# compute accidents by month, season\naccidents_by_month <- accidents_bmr_ft %>%\n  st_drop_geometry() %>%                  \n  group_by(month_factor, season) %>%\n  summarize(total_accidents = n()) %>%\n  ungroup()\n\n\nfig_accidents_by_month_bar <- plot_ly() %>%\n  # add bar chart\n  add_trace(\n    data = accidents_by_month,\n    x = ~month_factor,                   \n    y = ~total_accidents,                \n    color = ~season,                     \n    # Assign colors to each season\n    colors = c('Cool' = 'lightblue', 'Hot' = 'red3', 'Rainy' = 'royalblue3'), \n    type = 'bar',                        \n    name = ~season                       \n  ) %>%\n  # Add  trendline\n  add_trace(\n    data = accidents_by_month,\n    x = ~month_factor,\n    y = ~total_accidents,\n    type = 'scatter',\n    mode = 'lines+markers',              \n    line = list(color = 'black', dash = 'dash'), \n    marker = list(color = 'black', size = 6), \n    name = 'Trendline'                  \n  ) %>%\n  layout(\n    title = \"Accidents by Month in Bangkok Metropolitan Region (2019-2022)\",\n    xaxis = list(title = \"Month\"),\n    yaxis = list(title = \"Total Accidents\"),\n    barmode = 'group',                 \n    legend = list(title = list(text = \"Season\"))\n  )\nfig_accidents_by_month_bar\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-8f836166d559454ecd73\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8f836166d559454ecd73\">{\"x\":{\"visdat\":{\"112f61cbe2c74\":[\"function () \",\"plotlyVisDat\"],\"112f6958826a\":[\"function () \",\"data\"],\"112f611da01f1\":[\"function () \",\"data\"]},\"cur_data\":\"112f611da01f1\",\"attrs\":{\"112f6958826a\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"color\":{},\"colors\":[\"lightblue\",\"red3\",\"royalblue3\"],\"type\":\"bar\",\"name\":{},\"inherit\":true},\"112f611da01f1\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"color\":\"black\",\"dash\":\"dash\"},\"marker\":{\"color\":\"black\",\"size\":6},\"name\":\"Trendline\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Accidents by Month in Bangkok Metropolitan Region (2019-2022)\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Month\",\"type\":\"category\",\"categoryorder\":\"array\",\"categoryarray\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Total Accidents\"},\"barmode\":\"group\",\"legend\":{\"title\":{\"text\":\"Season\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[\"Jan\",\"Feb\",\"Nov\",\"Dec\"],\"y\":[1149,963,1084,1343],\"type\":\"bar\",\"name\":\"Cool\",\"marker\":{\"color\":\"rgba(173,216,230,1)\",\"line\":{\"color\":\"rgba(173,216,230,1)\"}},\"textfont\":{\"color\":\"rgba(173,216,230,1)\"},\"error_y\":{\"color\":\"rgba(173,216,230,1)\"},\"error_x\":{\"color\":\"rgba(173,216,230,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"Mar\",\"Apr\",\"May\"],\"y\":[1023,1266,909],\"type\":\"bar\",\"name\":\"Hot\",\"marker\":{\"color\":\"rgba(205,0,0,1)\",\"line\":{\"color\":\"rgba(205,0,0,1)\"}},\"textfont\":{\"color\":\"rgba(205,0,0,1)\"},\"error_y\":{\"color\":\"rgba(205,0,0,1)\"},\"error_x\":{\"color\":\"rgba(205,0,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\"],\"y\":[878,1022,1048,1038,1263],\"type\":\"bar\",\"name\":\"Rainy\",\"marker\":{\"color\":\"rgba(58,95,205,1)\",\"line\":{\"color\":\"rgba(58,95,205,1)\"}},\"textfont\":{\"color\":\"rgba(58,95,205,1)\"},\"error_y\":{\"color\":\"rgba(58,95,205,1)\"},\"error_x\":{\"color\":\"rgba(58,95,205,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"y\":[1149,963,1023,1266,909,878,1022,1048,1038,1263,1084,1343],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"color\":\"black\",\"dash\":\"dash\"},\"marker\":{\"color\":\"black\",\"size\":6,\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"name\":\"Trendline\",\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The cool season (January, November, and December) also shows relatively high accident counts, particularly in December, which concide with the holidays season.\n- The rainy season (June to October) has a relatively steady trend of accidents, with no significant peaks or drops.\n- April stands out with the highest number of accidents, potentially influenced by the Songkran festival.\n\n:::\n\n#### Special Mention: Songkran\n\nIn this special section, we highlight the impact of the **Songkran festival** on road accidents in April, a period that is known for increased travel and, consequently, heightened risk on the roads. For meaningful comparison, we compute the **average daily accident rate** during the **7 \"deadly days\" of Songkran** versus the rest of April (non-Songkran days) from 2019 to 2022. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncompute_average_daily_accident_rate <- function(data) {\n  # filter data for April\n  april_data <- data %>%\n    st_drop_geometry() %>%\n    filter(month_factor == \"Apr\") %>%\n    group_by(year, songkran_7_dead_days) %>%\n    summarize(total_accidents = n(), .groups = 'drop') %>%\n    mutate(\n      days_count = ifelse(songkran_7_dead_days, 7, 30 - 7),\n      # Compute the average daily accident rate\n      average_daily_accidents = total_accidents / days_count,  \n      songkran_label = ifelse(songkran_7_dead_days, \"Songkran\", \"Non-Songkran Days\")\n    ) %>%\n    select(year, songkran_label, average_daily_accidents) \n\n  return(april_data)\n}\n\naverage_daily_accident_rate <- compute_average_daily_accident_rate(accidents_bmr_ft)\n\nfig_accidents_songkran <- plot_ly(\n  data = average_daily_accident_rate,\n  x = ~year,                          \n  y = ~average_daily_accidents,       \n  color = ~songkran_label,         \n  # Color by Songkran label (During Songkran vs. Non-Songkran Days)\n  colors = c('Songkran' = 'tomato1', 'Non-Songkran Days' = 'royalblue3'), \n  type = 'bar',                        \n  name = ~songkran_label              \n) %>%\n  layout(\n    title = \"Average Daily Accident Rate in April During Songkran vs. Non-Songkran Days (2019-2022)\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Average Daily Accidents\"),\n    barmode = 'group',              \n    legend = list(title = list(text = \"Day Type\"))\n  )\n\nfig_accidents_songkran\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-0d7db73d03839427d3b7\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0d7db73d03839427d3b7\">{\"x\":{\"visdat\":{\"112f6647b8ed2\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"112f6647b8ed2\",\"attrs\":{\"112f6647b8ed2\":{\"x\":{},\"y\":{},\"name\":{},\"color\":{},\"colors\":[\"tomato1\",\"royalblue3\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Average Daily Accident Rate in April During Songkran vs. Non-Songkran Days (2019-2022)\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Year\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Average Daily Accidents\"},\"barmode\":\"group\",\"legend\":{\"title\":{\"text\":\"Day Type\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[2019,2020,2021,2022],\"y\":[9.4782608695652169,6.5652173913043477,10.217391304347826,8.7826086956521738],\"name\":\"Non-Songkran Days\",\"type\":\"bar\",\"marker\":{\"color\":\"rgba(58,95,205,1)\",\"line\":{\"color\":\"rgba(58,95,205,1)\"}},\"textfont\":{\"color\":\"rgba(58,95,205,1)\"},\"error_y\":{\"color\":\"rgba(58,95,205,1)\"},\"error_x\":{\"color\":\"rgba(58,95,205,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[17.142857142857142,12.857142857142858,17.142857142857142,18.571428571428573],\"name\":\"Songkran\",\"type\":\"bar\",\"marker\":{\"color\":\"rgba(255,99,71,1)\",\"line\":{\"color\":\"rgba(255,99,71,1)\"}},\"textfont\":{\"color\":\"rgba(255,99,71,1)\"},\"error_y\":{\"color\":\"rgba(255,99,71,1)\"},\"error_x\":{\"color\":\"rgba(255,99,71,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- Songkran days (in red) consistently show a higher average daily accident rate compared to non-Songkran days (in blue) across all years (2019-2022).\n- Non-Songkran days have a relatively steady accident rate across all years, remaining below 10 accidents per day.\n- In 2020, due to the COVID-19 pandemic restrictions, Songkran celebrations were suspended. This likely explains the significantly lower accident rates for both day types in 2020.\n\n:::\n\n### Visualize Geographic Distribution of Accidents by Day of Week\n\nNext, we visualize the distribution of accidents by day of week to observe the accident trends.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntmap_mode('plot')\n\ntm_shape(admin_boundary_bmr) + \n  tm_polygons(border.col = \"darkgray\", alpha = 0.5) +\ntm_shape(roads_bmr) + \n  tm_lines(col = \"darkgreen\", lwd = 0.7) +\ntm_shape(accidents_bmr_ft) + \n  tm_dots(size = 0.2, col = \"red\", alpha = 0.6) +\n# facet by day of week\ntm_facets(by = \"day_of_week\") +\ntm_layout(\n  main.title = \"Accident Trends by Days of Week in BMR (2019-2022)\",\n  main.title.size = 1.5, \n  main.title.position = c(\"center\", \"top\"), \n  frame = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/tmap_by_day-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Compute accidents by day of the week and group by weekday or weekend\naccidents_by_day <- accidents_bmr_ft %>%\n  st_drop_geometry() %>%\n  mutate(\n    day_type = case_when(\n      day_of_week %in% c(6, 7) ~ \"Weekend\",\n      TRUE ~ \"Weekday\"\n    )\n  ) %>%\n  group_by(day_of_week, day_type) %>%\n  summarize(total_accidents = n()) %>%\n  ungroup()\n\nfig_accidents_by_day_bar <- plot_ly() %>%\n  # Add the bar chart\n  add_trace(\n    data = accidents_by_day,\n    x = ~day_of_week,                    \n    y = ~total_accidents,               \n    color = ~day_type,                   \n    # assign color by weekday, weekend\n    colors = c('Weekday' = 'orange', 'Weekend' = 'seagreen'), \n    type = 'bar',                        \n    name = ~day_type                     \n  ) %>%\n  # Add a trendline\n  add_trace(\n    data = accidents_by_day,\n    x = ~day_of_week,\n    y = ~total_accidents,\n    type = 'scatter',\n    mode = 'lines+markers',              \n    line = list(color = 'black', dash = 'dash'), \n    marker = list(color = 'black', size = 6), \n    name = 'Trendline'                  \n  ) %>%\n  layout(\n    title = \"Accidents by Day of the Week in Bangkok Metropolitan Region (2019-2022)\",\n    xaxis = list(title = \"Day of the Week\", tickvals = 1:7, ticktext = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")),\n    yaxis = list(title = \"Total Accidents\"),\n    barmode = 'group',                 \n    legend = list(title = list(text = \"Day Type\"))\n  )\n\nfig_accidents_by_day_bar\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-c2e3fede5c798441fdae\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c2e3fede5c798441fdae\">{\"x\":{\"visdat\":{\"112f654bc0376\":[\"function () \",\"plotlyVisDat\"],\"112f63876370\":[\"function () \",\"data\"],\"112f62d914fdf\":[\"function () \",\"data\"]},\"cur_data\":\"112f62d914fdf\",\"attrs\":{\"112f63876370\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"color\":{},\"colors\":[\"orange\",\"seagreen\"],\"type\":\"bar\",\"name\":{},\"inherit\":true},\"112f62d914fdf\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"x\":{},\"y\":{},\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"color\":\"black\",\"dash\":\"dash\"},\"marker\":{\"color\":\"black\",\"size\":6},\"name\":\"Trendline\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Accidents by Day of the Week in Bangkok Metropolitan Region (2019-2022)\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Day of the Week\",\"tickvals\":[1,2,3,4,5,6,7],\"ticktext\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"]},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Total Accidents\"},\"barmode\":\"group\",\"legend\":{\"title\":{\"text\":\"Day Type\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[1,2,3,4,5],\"y\":[1813,1774,1745,1753,2061],\"type\":\"bar\",\"name\":\"Weekday\",\"marker\":{\"color\":\"rgba(255,165,0,1)\",\"line\":{\"color\":\"rgba(255,165,0,1)\"}},\"textfont\":{\"color\":\"rgba(255,165,0,1)\"},\"error_y\":{\"color\":\"rgba(255,165,0,1)\"},\"error_x\":{\"color\":\"rgba(255,165,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[6,7],\"y\":[2052,1788],\"type\":\"bar\",\"name\":\"Weekend\",\"marker\":{\"color\":\"rgba(46,139,87,1)\",\"line\":{\"color\":\"rgba(46,139,87,1)\"}},\"textfont\":{\"color\":\"rgba(46,139,87,1)\"},\"error_y\":{\"color\":\"rgba(46,139,87,1)\"},\"error_x\":{\"color\":\"rgba(46,139,87,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[1,2,3,4,5,6,7],\"y\":[1813,1774,1745,1753,2061,2052,1788],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"line\":{\"color\":\"black\",\"dash\":\"dash\"},\"marker\":{\"color\":\"black\",\"size\":6,\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"name\":\"Trendline\",\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- Weekdays (in orange) show a relatively consistent number of total accidents across Monday to Thursday, with a slight increase towards Friday.\n- Both Fridays and Saturdays show high accident numbers suggesting a potential rise in traffic volume or risky driving behavior leading into the weekend.\n- The trendline reflects an upward trend from Monday, peaking on Friday, and then declining over the weekend, particularly on Sunday.\n\n:::\n\n### Visualize Geographic Distribution of Accidents by Peak Period\n\nNext, we visualize the distribution of accidents by peak period.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntmap_mode('plot')\n\ntm_shape(admin_boundary_bmr) + \n  tm_polygons(border.col = \"darkgray\", alpha = 0.5) +\ntm_shape(roads_bmr) + \n  tm_lines(col = \"darkgreen\", lwd = 0.7) +\ntm_shape(accidents_bmr_ft) + \n  tm_dots(size = 0.2, col = \"red\", alpha = 0.6) +\n# facet by peak_period\ntm_facets(by = \"peak_period\") +\ntm_layout(\n  main.title = \"Accident Trends by Peak Period in BMR (2019-2022)\",\n  main.title.size = 1.5, \n  main.title.position = c(\"center\", \"top\"), \n  frame = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/tmap_by_peak_period-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Group data by year and peak period type\naccidents_by_year_peak_period <- accidents_bmr_ft %>%\n  st_drop_geometry() %>%\n  group_by(year, peak_period) %>%\n  summarize(total_accidents = n(), .groups = 'drop') %>%\n  mutate(\n    # Calculate the number of hours for each peak period type\n    hours_count = case_when(\n      peak_period == \"Morning Peak\" ~ 2,  # 7-9 AM (2 hours)\n      peak_period == \"Evening Peak\" ~ 3,  # 4-7 PM (3 hours)\n      peak_period == \"Off-Peak\" ~ 19      # Remaining hours in a day\n    ),\n    average_accidents_per_hour = total_accidents / hours_count  # Compute average accident rate per hour\n  )\n\n\nfig_accidents_trend <- plot_ly(\n  data = accidents_by_year_peak_period,\n  x = ~year,                              \n  y = ~average_accidents_per_hour,        \n  color = ~peak_period,                    \n  colors = c('Morning Peak' = 'tomato1', 'Evening Peak' = 'orange', 'Off-Peak' = 'lightblue'),\n  type = 'bar',                       \n  mode = 'lines+markers',                 \n  name = ~peak_period                      \n) %>%\n  layout(\n    title = \"Average Accident Rate per Hour by Peak Period Type Over the Years\",\n    xaxis = list(title = \"Year\"),\n    yaxis = list(title = \"Average Accidents per Hour\"),\n    legend = list(title = list(text = \"Peak Period\"))\n  )\n\n# Display the plot\nfig_accidents_trend\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-a77ad32f6b82562872f5\" style=\"width:100%;height:433px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-a77ad32f6b82562872f5\">{\"x\":{\"visdat\":{\"112f61cade737\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"112f61cade737\",\"attrs\":{\"112f61cade737\":{\"x\":{},\"y\":{},\"mode\":\"lines+markers\",\"name\":{},\"color\":{},\"colors\":[\"tomato1\",\"orange\",\"lightblue\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"bar\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"Average Accident Rate per Hour by Peak Period Type Over the Years\",\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Year\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Average Accidents per Hour\"},\"legend\":{\"title\":{\"text\":\"Peak Period\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[2019,2020,2021,2022],\"y\":[145.66666666666666,173.66666666666666,149.33333333333334,168.66666666666666],\"mode\":\"lines+markers\",\"name\":\"Evening Peak\",\"type\":\"bar\",\"marker\":{\"color\":\"rgba(255,165,0,1)\",\"line\":{\"color\":\"rgba(255,165,0,1)\"}},\"textfont\":{\"color\":\"rgba(255,165,0,1)\"},\"error_y\":{\"color\":\"rgba(255,165,0,1)\"},\"error_x\":{\"color\":\"rgba(255,165,0,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[158,216.5,165.5,171],\"mode\":\"lines+markers\",\"name\":\"Morning Peak\",\"type\":\"bar\",\"marker\":{\"color\":\"rgba(255,99,71,1)\",\"line\":{\"color\":\"rgba(255,99,71,1)\"}},\"textfont\":{\"color\":\"rgba(255,99,71,1)\"},\"error_y\":{\"color\":\"rgba(255,99,71,1)\"},\"error_x\":{\"color\":\"rgba(255,99,71,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[2019,2020,2021,2022],\"y\":[117.68421052631579,122.73684210526316,123.10526315789474,144.47368421052633],\"mode\":\"lines+markers\",\"name\":\"Off-Peak\",\"type\":\"bar\",\"marker\":{\"color\":\"rgba(173,216,230,1)\",\"line\":{\"color\":\"rgba(173,216,230,1)\"}},\"textfont\":{\"color\":\"rgba(173,216,230,1)\"},\"error_y\":{\"color\":\"rgba(173,216,230,1)\"},\"error_x\":{\"color\":\"rgba(173,216,230,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The Morning Peak consistently shows the highest average accident rate per hour across all years, peaking sharply in 2020.\n- Evening Peak follows closely, with slightly lower accident rates compared to the Morning Peak but remaining higher than Off-Peak periods.\n- Off-Peak accident rates are consistently lower across all years.\n- The year 2020 stands out with the highest accident rates across all peak periods, especially in the Morning Peak.\n- Overall, both Morning and Evening Peak periods exhibit higher accident rates compared to Off-Peak periods, highlighting rush hours as critical times for road accidents.\n\n:::\n\n### Visualize Geographic Distribution of Accidents by Weather Conditions\n\nNext, we visualize the distribution of accidents by weak conditions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntmap_mode('plot')\n\ntm_shape(admin_boundary_bmr) + \n  tm_polygons(border.col = \"darkgray\", alpha = 0.5) +\ntm_shape(roads_bmr) + \n  tm_lines(col = \"darkgreen\", lwd = 0.7) +\ntm_shape(accidents_bmr_ft) + \n  tm_dots(size = 0.2, col = \"red\", alpha = 0.6) +\n# facet by weather\ntm_facets(by = \"weather_condition\") +\ntm_layout(\n  main.title = \"Accident Trends by Weather in BMR (2019-2022)\",\n  main.title.size = 1.5, \n  main.title.position = c(\"center\", \"top\"), \n  frame = FALSE\n)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/tmap_by_weather-1.png){width=1152}\n:::\n:::\n\n\n\n\nWe noticed that most of accident data is recorded during clear conditions, followed by rainy conditions. We will discuss our observations in the following section with other factors.\n\n### Visualize Other Factors\n\nIn this section, we consolidated our remaining observations of the accident dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nselected_data <- accidents_bmr_ft %>%\n  st_drop_geometry() %>%\n  select(presumed_cause, accident_type, road_description, weather_condition, vehicle_type)\n\ntheme_gtsummary_compact()\n\nselected_data %>% \n  tbl_summary(missing_text = \"NA\", sort=all_categorical(FALSE) ~ \"frequency\") %>% \n  add_n() %>% \n  modify_caption(\"**Table of Variable Summary**\") %>%\n  bold_labels()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"pzveloiefp\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#pzveloiefp table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#pzveloiefp thead, #pzveloiefp tbody, #pzveloiefp tfoot, #pzveloiefp tr, #pzveloiefp td, #pzveloiefp th {\n  border-style: none;\n}\n\n#pzveloiefp p {\n  margin: 0;\n  padding: 0;\n}\n\n#pzveloiefp .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 13px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#pzveloiefp .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#pzveloiefp .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#pzveloiefp .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#pzveloiefp .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#pzveloiefp .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#pzveloiefp .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#pzveloiefp .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#pzveloiefp .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#pzveloiefp .gt_group_heading {\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#pzveloiefp .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#pzveloiefp .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#pzveloiefp .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#pzveloiefp .gt_row {\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#pzveloiefp .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#pzveloiefp .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#pzveloiefp .gt_last_summary_row {\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_first_grand_summary_row {\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_last_grand_summary_row_top {\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#pzveloiefp .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#pzveloiefp .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 1px;\n  padding-bottom: 1px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#pzveloiefp .gt_left {\n  text-align: left;\n}\n\n#pzveloiefp .gt_center {\n  text-align: center;\n}\n\n#pzveloiefp .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#pzveloiefp .gt_font_normal {\n  font-weight: normal;\n}\n\n#pzveloiefp .gt_font_bold {\n  font-weight: bold;\n}\n\n#pzveloiefp .gt_font_italic {\n  font-style: italic;\n}\n\n#pzveloiefp .gt_super {\n  font-size: 65%;\n}\n\n#pzveloiefp .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#pzveloiefp .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#pzveloiefp .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#pzveloiefp .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#pzveloiefp .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#pzveloiefp .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#pzveloiefp .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#pzveloiefp .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#pzveloiefp div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <caption><div data-qmd-base64=\"KipUYWJsZSBvZiBWYXJpYWJsZSBTdW1tYXJ5Kio=\"><div class='gt_from_md'><p><strong>Table of Variable Summary</strong></p>\n</div></div></caption>\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;div data-qmd-base64=&quot;KipDaGFyYWN0ZXJpc3RpYyoq&quot;&gt;&lt;div class='gt_from_md'&gt;&lt;p&gt;&lt;strong&gt;Characteristic&lt;/strong&gt;&lt;/p&gt;&#10;&lt;/div&gt;&lt;/div&gt;\"><div data-qmd-base64=\"KipDaGFyYWN0ZXJpc3RpYyoq\"><div class='gt_from_md'><p><strong>Characteristic</strong></p>\n</div></div></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;div data-qmd-base64=&quot;KipOKio=&quot;&gt;&lt;div class='gt_from_md'&gt;&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/p&gt;&#10;&lt;/div&gt;&lt;/div&gt;\"><div data-qmd-base64=\"KipOKio=\"><div class='gt_from_md'><p><strong>N</strong></p>\n</div></div></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;div data-qmd-base64=&quot;KipOID0gMTIsOTg2Kio=&quot;&gt;&lt;div class='gt_from_md'&gt;&lt;p&gt;&lt;strong&gt;N = 12,986&lt;/strong&gt;&lt;/p&gt;&#10;&lt;/div&gt;&lt;/div&gt;&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;line-height: 0;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><div data-qmd-base64=\"KipOID0gMTIsOTg2Kio=\"><div class='gt_from_md'><p><strong>N = 12,986</strong></p>\n</div></div><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height: 0;\"><sup>1</sup></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">presumed_cause</td>\n<td headers=\"n\" class=\"gt_row gt_center\">12,986</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    speeding</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">10,143 (78%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    other</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">957 (7.4%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    cutting in closely by people/vehicles/animals</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">621 (4.8%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    vehicle equipment failure</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">365 (2.8%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    falling asleep</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">221 (1.7%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    driving under the influence of alcohol</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">118 (0.9%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    running red lights/traffic signals</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">96 (0.7%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    tailgating</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">83 (0.6%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    abrupt lane change</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">59 (0.5%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    unfamiliarity with the route/unskilled driving</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">53 (0.4%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    illegal overtaking</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">50 (0.4%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    failure to yield/signal</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">33 (0.3%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    debris/obstruction on the road</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">29 (0.2%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    failure to yield right of way</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">21 (0.2%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    worn-out/tire blowout</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">19 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    overloaded vehicle</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">18 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    reversing vehicle</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">15 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    dangerous curve</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">14 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    sudden stop</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">14 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    slippery road</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">8 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    brake/anti-lock brake system failure</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">7 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    driving in the wrong lane</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">6 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    loss of control</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">6 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    failure to signal enter/exit parking</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">5 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    using mobile phone while driving</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">4 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    disabled vehicle without proper signals/signs</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">3 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    insufficient light</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">3 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    road in poor condition</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">2 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    straddling lanes</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">2 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    disabled vehicle without proper signals</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    ignoring stop sign while leaving intersection</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    inadequate visibility</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    medical condition</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    no presumed cause related to driver</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    no road divider lines</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    no traffic signs</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    obstruction in sight</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    repair/construction on the road</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    using psychoactive substances</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    vehicle electrical system failure</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">accident_type</td>\n<td headers=\"n\" class=\"gt_row gt_center\">12,986</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    rear-end collision</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">6,877 (53%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    rollover/fallen on straight road</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">3,916 (30%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    other</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">859 (6.6%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    collision with obstruction (on road surface)</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">459 (3.5%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    rollover/fallen on curved road</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">415 (3.2%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    side collision</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">139 (1.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    pedestrian collision</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">121 (0.9%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    head-on collision (not overtaking)</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">102 (0.8%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    collision at intersection corner</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">75 (0.6%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    collision during overtaking</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">12 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    turning/retreating collision</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">11 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">road_description</td>\n<td headers=\"n\" class=\"gt_row gt_center\">12,986</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    straight road</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">11,084 (85%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    other</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1,004 (7.7%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    wide curve</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">488 (3.8%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    grade-separated intersection/ramps</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">150 (1.2%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    y-intersection</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">73 (0.6%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    t-intersection</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">66 (0.5%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    connecting to public/commercial area</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">43 (0.3%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    sharp curve</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">41 (0.3%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    merge lane</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">11 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    connecting to private area</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">8 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    four-way intersection</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">6 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    u-turn area</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">5 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    connecting to school area</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">4 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    roundabout</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">3 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">weather_condition</td>\n<td headers=\"n\" class=\"gt_row gt_center\">12,986</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    clear</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">11,711 (90%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    rainy</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1,166 (9.0%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    dark</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">81 (0.6%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    other</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">22 (0.2%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    foggy</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">4 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    land slide</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    natural disaster</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\" style=\"font-weight: bold;\">vehicle_type</td>\n<td headers=\"n\" class=\"gt_row gt_center\">12,986</td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\"><br /></td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    private/passenger car</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">4,486 (35%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    4-wheel pickup truck</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">3,522 (27%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    motorcycle</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1,687 (13%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    other</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1,088 (8.4%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    large truck with trailer</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">998 (7.7%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    6-wheel truck</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">472 (3.6%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    7-10-wheel truck</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">389 (3.0%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    van</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">154 (1.2%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    large passenger vehicle</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">76 (0.6%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    passenger pickup truck</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">63 (0.5%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    bicycle</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">18 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    pedestrian</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">18 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    motorized tricycle</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">14 (0.1%)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">    tractor/agricultural vehicle</td>\n<td headers=\"n\" class=\"gt_row gt_center\"><br /></td>\n<td headers=\"stat_0\" class=\"gt_row gt_center\">1 (&lt;0.1%)</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"3\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;line-height: 0;\"><sup>1</sup></span> <div data-qmd-base64=\"biAoJSk=\"><div class='gt_from_md'><p>n (%)</p>\n</div></div></td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- **Top Causes of Accidents: Behavioral Factors**\n  - **Speeding** is the leading presumed cause, responsible for **78%** of accidents (10,143 cases). This is a clear indication that driver behavior is the primary factor.\n  - Other behavioral causes include **cutting in closely** (4.8%), **driving under the influence of alcohol** (0.9%), and **tailgating** (0.6%).\n\n- **Minor Contribution from Road Conditions**\n  - Road conditions such as **slippery roads**, **debris**, and **road in poor condition** account for a very small portion of the accidents (<1%).\n\n- **Weather Conditions**\n  - **Clear weather** dominates in **90%** of cases (as visualized in earlier section), while **rainy conditions** account for only **9%** of accidents. Adverse weather such as **foggy** or **dark conditions** plays a negligible role.\n\n- **Accident Types**\n  - Most accidents are **rear-end collisions** (53%) and **rollovers on straight roads** (30%), again pointing towards driver behavior on straightforward road networks.\n\n- **Road Types**\n  - **Straight roads** are where the vast majority (85%) of accidents occur.\n  \n- **Vehicle Types**\n  - The majority of accidents involve private/passenger cars (35%) and 4-wheel pickup trucks (27%), followed by Motorcycles (13%)\n\nIn summary, based on this dataset, we can observe that **behavioral factors** like speeding are overwhelmingly the top causes of accidents, while road conditions and weather play a much smaller role.\n\n:::\n\n## Spatial Measures of Central Tendency\n\n In this section, we are interested in identifying the centrality of road traffic accidents within the Bangkok Metropolitan Region (BMR) by computing two key spatial measures: the **mean center** and the **median center**. \n \nThe mean centre represents the average location of all accident points in the region while the median center which is less influenced by outliers, provides a more robust indication of where accidents tend to cluster, unaffected by unusually high or low values in specific areas.\n \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract coordinates\naccidents_xy <- st_coordinates(accidents_bmr_ft)\n\nmean_center <- accidents_xy %>%\n  colMeans()\n\nmean_center\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        X         Y \n 668399.5 1523495.8 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian_center <- accidents_xy %>%\n  apply(2, median)\n\nmedian_center\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        X         Y \n 673446.1 1520755.0 \n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\nThe similarity between the mean center and median center suggests that the distribution of road accidents in the Bangkok Metropolitan Region is relatively balanced, with no significant outliers skewing the spatial patterns.\n\n:::\n\n### Spatial Measures of Central Tendency Over the Years\n\nIn this section, we are interested to observe in what direction has the mean centre of the Thailand road accidents moved over the years.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmean_median_by_year <- accidents_bmr_ft %>%\n  group_by(year) %>%\n  summarise(\n    mean_center_x = mean(st_coordinates(geometry)[, 1]),\n    mean_center_y = mean(st_coordinates(geometry)[, 2]),\n    median_center_x = median(st_coordinates(geometry)[, 1]),\n    median_center_y = median(st_coordinates(geometry)[, 2])\n  )\n\nplot(st_geometry(admin_boundary_bmr), main = \"Mean Centers of Accidents in BMR over the Years\")\n\npoints(accidents_xy[, 1], accidents_xy[, 2], cex = 0.7, pch = 21)\n\ncolors <- c(\"goldenrod2\", \"sienna2\", \"hotpink1\", \"red1\")\nyears <- unique(accidents_bmr_ft$year)\n\nfor (i in 1:nrow(mean_median_by_year)) {\n  points(mean_median_by_year$mean_center_x[i], mean_median_by_year$mean_center_y[i], \n         pch = '*', col = colors[i], cex = 4, lwd = 2)\n}\n\nlegend(\"topright\", legend = paste0(\"Year: \", years), col = colors, pch = '*', \n       pt.cex = 1.5, title = \"Centers\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/mean_center_over_years-1.png){width=1152}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The mean centers of accidents in BMR over the years from 2019 to 2022 are relatively close to each other within the Bangkok province, indicating that the central tendency of accidents has not shifted dramatically during this period.\n- The points show a slight progression towards the southeast over time. This may suggest a gradual shift in the concentration of accidents towards a different district of the Bangkok province.\n\n:::\n\n## Spatial Point Pattern Analysis (SPPA)\n\nIn this section, we will conduct Spatial Point Pattern Analysis (SPPA) using the `spatstat` package to quantify the spatial distribution of road traffic accidents in the Bangkok Metropolitan Region (BMR). This method determines whether accidents are randomly distributed, clustered, or follow a regular pattern. \n\nTo explore this, we will test the **Complete Spatial Randomness (CSR) hypothesis**, which assumes accidents occur independently and uniformly across the region.\n\nWe will apply three SPPA methods:\n\n1. **First-Order SPPA**: This examines broader trends in accident intensity using techniques like Kernel Density Estimation (KDE) to identify \"hot spots\" and assess clustering or regularity.\n\n2. **Second-Order SPPA**: Tools like Ripley’s K-function, G, F, and L functions will be applied to assess spatial dependence at varying distances, helping to detect clustering or dispersion.\n\n3. **Network-Constrained SPPA**: This method analyzes accident patterns along road networks, recognizing that accidents are restricted to roads. It offers a more realistic view of clustering based on the actual network structure.\n\n\n> The key questions in this section are:\n>\n> 1. Are the road accidents in BMR randomly distributed throughout the region?\n> 2. If not, where are the areas with higher accident concentrations?\n\n## Converting sf Format into ppp format\n\nBefore we can perform spatial point analysis with **spatstat**, we will convert the sf objects into ppp object using `as.ppp()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert to ppp and rescale from m to km)\naccidents_ppp.km <- rescale(as.ppp(accidents_bmr_ft), 1000, \"km\")\n```\n:::\n\n\n\n\nNext, we check for duplicated entries within the point pattern object. Using `unmark`, we are only comparing the coordinates, regardless of marks.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(accidents_ppp.km, rule=\"unmark\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nSince there may be overlapping points due to accidents occurring at the same location, we apply a random jitter to the points. This reduces overlap by introducing slight random shifts, and we summarize the jittered point pattern to verify the changes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_ppp_jit.km <- rjitter(accidents_ppp.km, \n                                        retry=TRUE, \n                                        nsim=1, \n                                        drop=TRUE)\n\nsummary(accidents_ppp_jit.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12986 points\nAverage intensity 1.218049 points per square km\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3834532 4314457 6092694 7570954 \n\nWindow: rectangle = [591.2775, 710.1661] x [1486.8457, 1576.5205] km\n                    (118.9 x 89.67 km)\nWindow area = 10661.3 square km\nUnit of length: 1 km\n```\n\n\n:::\n:::\n\n\n\nNext we create the **owin** object which is the administrative boundary of the Bangkok Metropolitan Region (BMR). We also rescale the boundary to match the units used in the point pattern (kilometers).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nowin_bmr.km <- rescale(as.owin(admin_boundary_bmr), 1000)\nowin_bmr.km\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [587.8935, 712.4405] x [1484.4137, 1579.0763] units\n```\n\n\n:::\n:::\n\n\n\n\nAfter defining the observation window, we subset the jittered point pattern to include only the accident points that fall within the boundary of the BMR. \n\nWe then summarize the resulting point pattern to ensure that the filtering was successful.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_owin.km <- accidents_ppp_jit.km[owin_bmr.km]\nsummary(accidents_owin.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  12981 points\nAverage intensity 1.69266 points per square km\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 571882 3788970 3835196 4314334 6092693 7570954 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587.8935, 712.4405] x [1484.4137, 1579.0763] km\n                     (124.5 x 94.66 km)\nWindow area = 7668.99 square km\nUnit of length: 1 km\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n\n\n\nNext, we generate the plot of the spatial distribution of road accidents within the BMR boundary.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(accidents_owin.km)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/owin_plot_1-1.png){width=768}\n:::\n:::\n\n\n\n\n## First Order Spatial Point Pattern Analysis \n\nIn this section, we conduct first-order Spatial Point Pattern Analysis (SPPA) using the **spatstat** package to explore the intensity of traffic accidents. The analysis will include:\n\n- **Kernel Density Estimation (KDE):** Estimating accident intensity for visualizing and understanding spatial concentration of accident points.\n- **Nearest Neighbour Analysis:** To confirm spatial patterns by calculating nearest-neighbour statistics.\n\n### Kernel Density Estimation (KDE)\n\nKernel Density Estimation (KDE) provides a smooth estimate of the intensity of point processes, allowing us to visualize accident density hotspots. In this step, we experiment with different automatic bandwidth selection methods to determine the most suitable one for our analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.CvL(accidents_ppp_jit.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  sigma \n31.4123 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.scott(accidents_ppp_jit.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n sigma.x  sigma.y \n4.530017 3.322396 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.ppl(accidents_ppp_jit.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    sigma \n0.4197952 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.diggle(accidents_ppp_jit.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     sigma \n0.04745292 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# try different bandwidth methods\n# par(mfrow=c(2,2))\npar(mfrow=c(1,2))\nkde_accidents_bw_km <- density(accidents_ppp_jit.km, \n                               sigma = bw.diggle,\n                               edge=TRUE,kernel='gaussian')\n\nkde_accidents_ppl_km <- density(accidents_ppp_jit.km, \n                               sigma = bw.ppl,\n                               edge=TRUE,kernel='gaussian')\n\n# kde_accidents_cvl_km <- density(accidents_ppp_jit.km, \n#                               sigma = bw.CvL,\n#                               edge=TRUE,kernel='gaussian')\n\n#kde_accidents_scott_km <- density(accidents_ppp_jit.km, \n#                               sigma = bw.scott,\n#                               edge=TRUE,kernel='gaussian')\n\nplot(kde_accidents_bw_km)\nplot(kde_accidents_ppl_km)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/kde_accidents_bw_km_compare-1.png){width=768}\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#plot(kde_accidents_cvl_km)\n#plot(kde_accidents_scott_km)\n```\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The Diggle algorithm give the narrower bandwidth, making it ideal for identifying precise accident clusters in this study, as it captures spatial details without excessive smoothing.\n\n:::\n\n### Comparing Spatial Point Patterns using KDE\n\nIn this section, we will compare KDE of road accidents across provinces in BMR. This comparison allows us to visually explore the variation in accident intensity across the provinces using KDE.\n\nWe first create a list of owin objects for each province, rescaling the spatial windows to kilometers. Then we subset the jittered point pattern of road accidents for each province and compute the KDE for each region using `bw.diggle`. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# make individual owins\nbmr_owins <- lapply(bmr_regions, function(region) {\n  rescale(as.owin(admin_boundary_bmr %>% filter(ADM1_EN == region)), 1000)\n})\n\nnames(bmr_owins) <- bmr_regions\n\n\naccidents_ppps <- lapply(bmr_owins, function(owin) {\n  accidents_ppp_jit.km[owin]\n})\n\ndensities <- lapply(seq_along(bmr_regions), function(i) {\n  region <- bmr_regions[i]\n  density(accidents_ppps[[region]], \n          sigma = bw.diggle, \n          edge = TRUE, \n          kernel = \"gaussian\")\n})\nnames(densities) <- bmr_regions\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npar(mfrow = c(3, 2), mar = c(5, 5, 2, 1))\n\n# suppress lapply output\ninvisible(lapply(seq_along(densities), function(i) {\n  region <- names(densities)[i]\n  plot(densities[[i]], main = region)\n}))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/kde_accidents_province_compare-1.png){width=1152}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- Accidents appears to cluster along the major highways of each province.\n\n- **Bangkok** and **Samut Prakan** have the highest KDE values for accidents, with densities reaching up to 500 and 600, respectively, primarily along major highways; while **Nakhon Pathom** and **Nonthaburi** have lower KDE values among the 6 provinces.\n\n:::\n\n### Nearest Neighbour Analysis: Clark-Evans Test\n\nAfter performing the first-order spatial point pattern analysis, we move on to **Nearest Neighbour Analysis** using the **Clark-Evans test** to quantitatively assess whether the traffic accident distribution follows a random, clustered, or dispersed pattern. This test complements the visual insights gained from the Kernel Density Estimation (KDE) by providing statistical evidence for spatial clustering.\n\n- The **Clark-Evans aggregation index (R)** compares the observed mean nearest neighbour distance to the expected distance under Complete Spatial Randomness (CSR). \n- If **R = 1**, the points are randomly distributed. \n- If **R < 1**, the points exhibit clustering. \n- If **R > 1**, the points are more regularly spaced, suggesting spatial dispersion.\n\nThe test hypotheses are:\n\n- **$H_0$**: The traffic accidents are randomly distributed.\n- **$H_1$**: The traffic accidents are not randomly distributed (i.e., they are clustered or ordered).\n\n\nWe use the **95% confidence interval** for decision-making.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(accidents_ppp.km,\n                correction=\"none\",\n                clipregion=\"owin_bmr.km\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accidents_ppp.km\nR = 0.16207, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nThe result of the Clark-Evans test shows:\n\n- **R = 0.16207**, which is significantly less than 1, indicating that the traffic accidents exhibit strong spatial clustering.\n- The **p-value < 2.2e-16**, which is much lower than the 0.05 significance level, thus we reject the null hypothesis (**$H_0$**).\n\n**The traffic accidents are not randomly distributed but are clustered**, confirming that certain areas or road segments in the Bangkok Metropolitan Region (BMR) have significantly higher concentrations of accidents.\n:::\n\n### Clark-Evans Test for Individual Provinces\n\nNext, we perform the Clark-Evans test for each province in the BMR to assess the spatial distribution of traffic accidents.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq_along(accidents_ppps)) {\n  accidents_pr_ppp <- accidents_ppps[[i]]\n  \n  cat(\"\\n##\", bmr_regions[i], \"\\n\")  # Print the region name for clarity\n  print(\n    clarkevans.test(accidents_pr_ppp,\n                    correction=\"none\",\n                    clipregion=NULL,\n                    alternative=c(\"two.sided\"),\n                    nsim=99)\n  )\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n## Bangkok \n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accidents_pr_ppp\nR = 0.17623, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\n## Nonthaburi \n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accidents_pr_ppp\nR = 0.41798, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\n## Nakhon Pathom \n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accidents_pr_ppp\nR = 0.30852, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\n## Pathum Thani \n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accidents_pr_ppp\nR = 0.28094, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\n## Samut Prakan \n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accidents_pr_ppp\nR = 0.18842, p-value < 2.2e-16\nalternative hypothesis: two-sided\n\n\n## Samut Sakhon \n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  accidents_pr_ppp\nR = 0.27484, p-value < 2.2e-16\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n\n:::callout-note \n\n**Observations:**\n\n- **Bangkok**:  \n  - R = 0.17306, p-value < 2.2e-16  \n  - The R-value is significantly less than 1, indicating strong clustering of accidents in the province. The very low p-value confirms the clustering pattern is statistically significant.\n\n- **Nonthaburi**:  \n  - R = 0.41915, p-value < 2.2e-16  \n  - There is moderate clustering in Nonthaburi, though the clustering is less intense than in Bangkok. The p-value indicates this pattern is statistically significant.\n\n- **Nakhon Pathom**:  \n  - R = 0.30873, p-value < 2.2e-16  \n  - The results show moderate clustering of accidents in this province. The clustering is stronger than in Nonthaburi but still less pronounced than in Bangkok.\n\n- **Pathum Thani**:  \n  - R = 0.27889, p-value < 2.2e-16  \n  - There is moderate clustering of accidents in Pathum Thani, with an R-value similar to that of Nakhon Pathom, indicating a non-random pattern of accident distribution.\n\n- **Samut Prakan**:  \n  - R = 0.191, p-value < 2.2e-16  \n  - Samut Prakan exhibits strong clustering of accidents, with an R-value similar to Bangkok, suggesting accident hotspots in the province. This is confirmed by the extremely low p-value.\n\n- **Samut Sakhon**:  \n  - R = 0.27326, p-value < 2.2e-16  \n  - The results indicate moderate clustering of accidents in this province, similar to Pathum Thani and Nakhon Pathom, suggesting multiple local accident clusters.\n\n\nIn summary, we **reject the null hypothesis across all provinces in the BMR**. The Clark-Evans test results show that traffic accidents are **not randomly distributed** but are strongly **clustered**. Bangkok and Samut Prakan exhibit the highest levels of clustering, while the other provinces show moderate clustering. \n\n:::\n\n## Second Order Spatial Point Pattern Analysis\n\nIn this section, we will focus on the **K-function** to analyze the overall pattern of clustering or dispersion of road accidents across various distances. We opt for the K-function due to its ability to capture the disc-like accumulation of points, making it ideal for understanding broader clustering trends over various distances.\n\n### Compute K-Function Estimate for BMR\n\nFirst, we will compute the K-function to estimate the spatial relationships between accidents across the BMR.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nK_BMR = Kest(accidents_ppp.km, correction = \"Ripley\")\nplot(K_BMR, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(km)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/k_bmr-1.png){width=768}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The K-function shows strong clustering of accidents across multiple distances, as the empirical curve is significantly above the Poisson process line.\n- Clustering exists at both local and broader spatial scales.\n\n:::\n\n### Perform Complete Spatial Randomness Test\n\nTo further analyze whether the distribution of accidents deviates from Complete Spatial Randomness (CSR), we conduct a hypothesis test with the following hypotheses:\n\n- $H_0$: The distribution of accidents is randomly distributed across the BMR.\n- $H_1$: The distribution of accidents is not randomly distributed (i.e., clustered or dispersed).\n\nWe use a 95% confidence interval for this test.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nbmr_K.csr <- envelope(accidents_ppp.km, Kest, nsim = 49, rank = 1,  glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 49 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, \n49.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot(bmr_K.csr, . - r ~ r, xlab=\"d (km)\", ylab=\"K(d)-r\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/k_bmr_csr-1.png){width=768}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The empirical K-function  lies above the theoretical K-function , indicating significant clustering of accidents across all distances.\n\n- The envelope (shaded area) confirms that the observed clustering is statistically significant, as the empirical K-function remains outside the bounds expected under complete spatial randomness.\n\n- Thus we will reject the null hypothesis.\n\n:::\n\n\n## Network Constrained Spatial Point Pattern Analysis\n\nNetwork-Constrained Spatial Point Pattern Analysis (SPPA) is highly relevant for studying road accidents because these events are restricted to occurring along specific networks such as highways. Traditional spatial analysis techniques assume that events can occur anywhere in a continuous space, which is not realistic for accidents that are confined to road networks. By focusing on the structure and connectivity of roads, **network-constrained methods** provide more accurate insights into the spatial distribution of accidents, identifying high-risk areas such as intersections, highway segments, or urban streets.\n\nIn this section, we will use the **spNetwork** package to compute **Network Kernel Density Estimation (NKDE)**. NKDE estimates the density of accidents while considering the network structure, offering a more realistic view of accident hotspots along the road network.\n\n### Preparing the Lixels Objects\n\nBefore computing NKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with `lixelize_lines()` of spNetwork. \n\n::: callout-note\n\n**Choice of lixel length**\nInitially, We chosen lixel length of 100 and mindist of 50, based on recommended settings from related research: [Visualizing Traffic Accident Hotspots Based on Spatial-Temporal Network Kernel Density Estimation](https://www.researchgate.net/publication/327634813_Visualizing_Traffic_Accident_Hotspots_Based_on_Spatial-Temporal_Network_Kernel_Density_Estimation).\n\nHowever, after visualizing the NKDE results, the shorter lixel length failed to reveal meaningful trends, likely due to an overly detailed segmentation of the network. To correct this, we increased the lixel length by an order of magnitude, allowing for a broader view and better identification of accident patterns at a larger scale.\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter for linestring only else error\nroads_bmr<- roads_bmr %>%\n  filter(st_geometry_type(.) == \"LINESTRING\")\n\nlixels <- lixelize_lines(lines = roads_bmr,\n                         # increase by 1 magnitude\n                         lx_length = 5000,\n                         mindist = 2500)\n```\n:::\n\n\n\n\nNext, we will use `lines_center()` of **spNetwork** to generate a SpatialPointsDataFrame (i.e. samples) with line centre points.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples <- lines_center(lixels)\n```\n:::\n\n\n\n\nTo compute the NKDE:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndensities <- nkde(\n  lines = roads_bmr, \n  events = accidents_bmr_ft,\n  w = rep(1, nrow(accidents_bmr_ft)),\n  samples = samples,\n  kernel_name = \"quartic\",\n  # increase by 1 magnitude\n  bw = 2250,\n  div = \"bw\",\n  method = \"simple\", \n  digits = 1, \n  tol = 1,\n  grid_shape = c(10,10), \n  max_depth = 8,\n  # agg = 5, \n  sparse = TRUE,\n  verbose = TRUE)\n```\n:::\n\n\n\nWe will save the computation output as RDS data format for future analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(densities, \"data/rds/densities_2250.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndensities <- read_rds(\"data/rds/densities_2250.rds\")\n```\n:::\n\n\n\n\nTo visualise the NKDE values, we have to perform a few preparation steps.\n\n1. Insert the computed density values (i.e. densities) into samples and lixels objects as density field. Rescale the density values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsamples$density <- densities\nlixels$density <- densities\nsamples$density <- samples$density*1000\nlixels$density <- lixels$density*1000\n```\n:::\n\n\n\n\n2. Use **tmap** to visualize the NKDE output.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncus_palette <- colorRampPalette(c(\"lightyellow\", \"red\"))\n\ntm_shape(admin_boundary_bmr) +\n  tm_polygons(col = \"white\", border.col = \"black\") +\n  tm_shape(lixels) +\n  tm_lines(col = \"density\", palette = cus_palette(10), style = \"cont\", lwd = 2) + \n  tm_layout(\n    title = \"Network Kernel Density of Road Accidents in BMR\",\n    title.size = 1.5,\n    title.position = c(\"center\", \"top\"),\n    frame = FALSE, \n    legend.position = c(\"left\", \"bottom\"),\n    legend.title.size = 1.0,\n    legend.text.size = 0.8\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/nkde_plot-1.png){width=768}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations:**\n\n- The density patterns tend to follow major highways and key intersections, particularly in the central and central-eastern areas of Bangkok Metropolitan Region (BMR), where the density of road accidents is higher.\n\n:::\n\n## Spatial Temporal Point Pattern Analysis\n\nSpatio-temporal analysis combines both spatial and temporal aspects to reveal how events like road traffic accidents vary over time and location. \n\nIn this section, we use Spatio-temporal Kernel Density Estimation (STKDE) to visualize accident densities across space and time, capturing fluctuations in accident intensity throughout different periods. \n\n> The key questions in this section are:\n>\n> 1. Are the locations of accidents in BMR spatial and spatio-temporally independent?\n> 2. If not, where and when the observed accident locations tend to cluster?\n\n**For this analysis, we will focus on 2022 as it has the highest accident rate from our EDA results above.**\n\n### Computing STKDE by Month\n\nWe first filter the dataset to include only the road accidents that occurred in the year 2022.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_month_2022  <- accidents_bmr_ft %>%\n  filter(year == 2022) %>%\n  select(month_number)\n```\n:::\n\n\n\n\nNext, we convert the filtered accident data into a point pattern object (ppp) for spatial analysis. To ensure the plot scaling is more readable and appropriate for our analysis, we rescale the spatial units from meters to kilometers.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_month_2022_ppp <- as.ppp(accidents_month_2022)\n# rescale from m to km\naccidents_month_2022_ppp.km <- rescale(accidents_month_2022_ppp, 1000, \"km\")\n```\n:::\n\n\n\n\nNext, we check for duplicated entries within the point pattern object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(accidents_month_2022_ppp.km))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nSince there may be overlapping points due to accidents occurring at the same location, we apply a random jitter to the points. This reduces overlap by introducing slight random shifts, and we summarize the jittered point pattern to verify the changes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_month_2022_ppp_jit.km <- rjitter(accidents_month_2022_ppp.km, \n                                        retry=TRUE, \n                                        nsim=1, \n                                        drop=TRUE)\n\nsummary(accidents_month_2022_ppp_jit.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  3593 points\nAverage intensity 0.3520227 points per square km\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    4.00    7.00    6.99   10.00   12.00 \n\nWindow: rectangle = [595.5406, 709.36] x [1486.8457, 1576.5205] km\n                    (113.8 x 89.67 km)\nWindow area = 10206.7 square km\nUnit of length: 1 km\n```\n\n\n:::\n:::\n\n\n\n\nNext we create the **owin** object which is the administrative boundary of the Bangkok Metropolitan Region (BMR). We also rescale the boundary to match the units used in the point pattern (kilometers).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nowin_bmr <- as.owin(admin_boundary_bmr)\nowin_bmr.km <- rescale(owin_bmr, 1000)\nowin_bmr.km\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nwindow: polygonal boundary\nenclosing rectangle: [587.8935, 712.4405] x [1484.4137, 1579.0763] units\n```\n\n\n:::\n:::\n\n\n\n\nAfter defining the observation window, we subset the jittered point pattern to include only the accident points that fall within the boundary of the BMR. \n\nWe then summarize the resulting point pattern to ensure that the filtering was successful.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_month_2022_owin.km <- accidents_month_2022_ppp_jit.km[owin_bmr.km]\nsummary(accidents_month_2022_owin.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  3592 points\nAverage intensity 0.4683796 points per square km\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.989  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587.8935, 712.4405] x [1484.4137, 1579.0763] km\n                     (124.5 x 94.66 km)\nWindow area = 7668.99 square km\nUnit of length: 1 km\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n\n\n\nNext, we generate the plot of the spatial distribution of road accidents within the BMR boundary.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(accidents_month_2022_owin.km)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/stkde_owin_plot-1.png){width=768}\n:::\n:::\n\n\n\n\nNext, we perform a Spatio-temporal Kernel Density Estimation (STKDE) on the accident data. This analysis estimates the density of road accidents in both spatial and temporal dimensions, allowing us to observe how accident densities vary over time and across locations. We then summarize the STKDE output.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(accidents_month_2022_owin.km)\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 4.8827 (spatial)\n  lambda = 0.0285 (temporal)\n\nNo. of observations\n  3592 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587.8935, 712.4405] x [1484.414, 1579.076]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [5.335629e-16, 0.002847148]\n```\n\n\n:::\n:::\n\n\n\n\nFinally, we plot the results of the spatio-temporal KDE for each month of the year 2022. These plots illustrate the monthly variation in road accident densities across the Bangkok Metropolitan Region.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(4,3), mar = c(2, 2, 2, 2))\n\nfor(i in seq(1, 12)){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\", i))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/st_kde_2022-1.png){width=1152}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Month 1:** The accident hotspots are primarily concentrated in the central BMR, with moderate intensity and slight diffusion towards the outer areas.\n\n**Month 2-7:** Generally, there is a lower intensity of hotspots during this periods\n\n**Month 8-11**: Bangkok remains the area of highest accident density; the clusters are seen to increase in size.\n\n**Month 12:** Accident density peaks towards the end of the year, with a notable increase in the central region, especially in December. Surrounding areas also show a rise in accident activity, likely due to higher traffic or adverse conditions during this holiday time. see [Bangkok Post - Road deaths rise to 256 after 5 days of New Year holiday travel](https://www.bangkokpost.com/thailand/general/1826889/road-deaths-rise-to-256-after-5-days-of-new-year-holiday-travel)\n\n:::\n\n### Observing the Impact of the \"7 Deadly Days\" of Songkran using STKDE\n\nIn this section, we apply Spatio-temporal Kernel Density Estimation (STKDE) to analyze accident patterns during the 7 Deadly Days of Songkran in April 2022. By focusing on the month of April, particularly the Songkran festival, STKDE allows us to capture and visualize how accident densities vary spatially and temporally (before, during and after the festival).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_april_2022  <- accidents_bmr_ft %>%\n  filter(year == 2022, month_number == 4) %>%\n  select(day_of_month)\n\naccidents_april_2022_ppp.km <- rescale(as.ppp(accidents_april_2022), 1000, \"km\")\n```\n:::\n\n\n\n\nNext, we check for duplicated entries within the point pattern object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(accidents_april_2022_ppp.km, rule=\"unmark\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\nSince there may be overlapping points due to accidents occurring at the same location, we apply a random jitter to the points. This reduces overlap by introducing slight random shifts, and we summarize the jittered point pattern to verify the changes. Then, we subset the jittered point pattern to include only the accident points that fall within the boundary of the BMR.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccidents_april_2022_ppp_jit.km <- rjitter(accidents_april_2022_ppp.km, \n                                        retry=TRUE, \n                                        nsim=1, \n                                        drop=TRUE)\n\naccidents_april_2022_owin.km <- accidents_april_2022_ppp_jit.km[owin_bmr.km]\nsummary(accidents_april_2022_owin.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  331 points\nAverage intensity 0.04316082 points per square km\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    1.0    10.5    14.0    15.3    21.0    30.0 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587.8935, 712.4405] x [1484.4137, 1579.0763] km\n                     (124.5 x 94.66 km)\nWindow area = 7668.99 square km\nUnit of length: 1 km\nFraction of frame area: 0.65\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(accidents_april_2022_owin.km, \n     main = \"Spatial Distribution of Road Accidents in April 2022 (BMR)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/accidents_april_2022_owin_km-1.png){width=768}\n:::\n:::\n\n\n\n\nNext, we perform a **Spatio-temporal Kernel Density Estimation (STKDE) on the accident data for April 2022**. This analysis estimates the density of road accidents in both spatial and temporal dimensions, allowing us to observe how accident densities vary across locations for the month of April.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde_april <- spattemp.density(accidents_april_2022_owin.km)\nsummary(st_kde_april)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 7.7139 (spatial)\n  lambda = 1.513 (temporal)\n\nNo. of observations\n  331 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587.8935, 712.4405] x [1484.414, 1579.076]\n\nTemporal bound\n  [1, 30]\n\nEvaluation\n  128 x 128 x 30 trivariate lattice\n  Density range: [4.084262e-14, 3.13749e-05]\n```\n\n\n:::\n:::\n\n\n\nFinally, we plot the results of the spatio-temporal KDE for each day of April 2022. These plots illustrate the monthly variation in road accident densities across the Bangkok Metropolitan Region.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndays_per_plot <- 6\n\ntotal_days <- 30\n\nfor (i in seq(1, total_days, by = days_per_plot)) {\n  # (2 rows, 3 columns)\n  par(mfrow = c(2, 3), mar = c(2, 2, 2, 2))\n  \n  for (day in i:(i + days_per_plot - 1)) {\n    if (day > total_days) break\n    \n    # Highlight Songkran period (April 11-17)\n    if (day >= 11 & day <= 17) {\n      plot(st_kde_april, day, \n           override.par = FALSE, \n           fix.range = TRUE, \n           main = paste(\"April 2022\", day, \"(Songkran)\"), \n           col.main = \"red\")\n    } else {\n      plot(st_kde_april, day, \n           override.par = FALSE, \n           fix.range = TRUE, \n           main = paste(\"April 2022\", day))\n    }\n  }\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/stkde_songkran-1.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/stkde_songkran-2.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/stkde_songkran-3.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/stkde_songkran-4.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/stkde_songkran-5.png){width=1152}\n:::\n:::\n\n\n\n\n::: callout-note\n\n**Observations for April 2022:**\n\n- **1st to 10th April**: \n  - The highest density of accidents remains concentrated in the central region of the Bangkok Metropolitan Area (BMR), with some variation day-to-day. \n  - A pattern of increasing intensity is seen leading up to the Songkran festival.\n\n- **Songkran Festival (11th to 17th April)**:\n  - **11th to 13th April**: Significant increase in accident density during the Songkran holiday, particularly in central and southern areas.\n  - **14th to 17th April**: Accident hotspots during the Songkran period appear to expand further, possibly due to higher travel activities and road congestion.\n  - The Songkran period highlights the most critical accident-prone days, showing a stark rise in traffic incidents.\n\n- **18th to 30th April**:\n  - Accident density slightly decreases after the Songkran period but remains concentrated in similar central zones.\n  - Post-Songkran accident rates maintain a moderate level.\n\n:::\n\n## Conclusion\n\nThe analysis of road traffic accidents in the Bangkok Metropolitan Region (BMR) provided insights into both spatial and temporal patterns of these incidents. By the data processing steps, we added columns such as seasons, peak periods, and Songkran holidays, capturing key factors that may influence accident trends.\n\n**Spatial analysis** revealed significant clustering of accidents in the central urban areas of Bangkok and Samut Prakan. These provinces exhibited the highest Kernel Density Estimates (KDE), indicating they are major hotspots for road traffic accidents.The Clark-Evans test and second-order spatial point pattern analysis further confirmed that traffic accidents in the BMR are not randomly distributed but instead follow a clustered pattern. The consistently low R values and highly significant p-values across all six provinces underscored this spatial clustering, highlighting the concentration of accidents in certain areas. Using Network Kernel Density Estimation (NKDE), we observed that accidents are concentrated along specific road segments, particularly major highways and intersections.\n\n**Spatio-temporal KDE** provided insights into how accident patterns vary over time. The analysis captured monthly trends, revealing that accident density fluctuates throughout the year, with higher concentrations observed at the beginning and end of the year, particularly in December. This suggests seasonal influences, such as changes in traffic patterns or road conditions during the holiday season. The subsequent analysis highlighted a sharp increase in accident density during the Songkran festival (April 11-17), a time of heightened travel activity. From the STKDE plots, we can observe clear spikes in density during this period.\n\nIn summary, the findings of this study highlight the non-random, spatially clustered distribution of road accidents in the BMR. We hope this comprehensive spatial-temporal analysis will support policymakers in implementing data-driven strategies that effectively mitigate road accidents in the region. \n\n## References\n\n- [WikiProject Thailand - OpenStreetMap Wiki](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification)\n- [Bangkok - Wikipedia](https://en.wikipedia.org/wiki/Bangkok#Climate)\n- [How Do You Beat Bangkok Traffic?](https://www.drivecarrental.com/blog/2023/10/05/how-do-you-beat-bangkok-traffic/#:~:text=Like%20most%20cities%2C%207%3A00,00%20to%207%3A00%20PM.) \n- [25 deaths in 234 road accidents recorded on 1st of Songkran’s ‘7 dangerous days’](https://www.nationthailand.com/thailand/general/40037198)\n- [SPATIAL STATISTICS](https://storymaps.arcgis.com/stories/76bdb6993b79427caf8d89737c2e6761)\n- [Chapter 6 Studying spatial point patterns | Crime Mapping in R](https://maczokni.github.io/crime_mapping_textbook/studying-spatial-point-patterns.html)\n- [Visualizing Traffic Accident Hotspots Based on Spatial-Temporal Network Kernel Density Estimation](https://www.researchgate.net/publication/327634813_Visualizing_Traffic_Accident_Hotspots_Based_on_Spatial-Temporal_Network_Kernel_Density_Estimation)\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}