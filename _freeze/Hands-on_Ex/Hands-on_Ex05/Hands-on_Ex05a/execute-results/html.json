{
  "hash": "ec2afaf01994780bb310c5ce0a5d0e5d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"5A: Global Measures of Spatial Autocorrelation\"\nsubtitle: \"In this exercise, we will learn to compute Global Measures of Spatial Autocorrelation using the **spdep** package, including Moran's I and Geary's C tests, spatial correlograms, and their statistical interpretation.\"\n# draft: true\ndate: \"Sep 10, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true\n  eval: true\n  freeze: true\n  message: false\n  warning: false\nformat:\n  html:\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n## Exercise 5A Reference\n\n[R for Geospatial Data Science and Analytics - 9  Global Measures of Spatial Autocorrelation](https://r4gdsa.netlify.app/chap09.html)\n\n## Overview\n\nIn this exercise, we will learn to compute Global Measures of Spatial Autocorrelation using the **spdep** package, including Moran's I and Geary's C tests, spatial correlograms, and their statistical interpretation.\n\n## Learning Outcome\n\n-   Import geospatial data using the **sf** package\n-   Import CSV data using the **readr** package\n-   Perform relational joins using the **dplyr** package\n-   Compute Global Spatial Autocorrelation (GSA) statistics using the **spdep** package\n    -   Moran's I test and Monte Carlo simulation\n    -   Geary's C test and Monte Carlo simulation\n-   Plot Moran scatterplot and spatial correlograms\n-   Interpret GSA statistics correctly\n\n## The Analytical Question\n\nIn spatial policy planning, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. In this study, we will apply spatial statistical methods to examine the distribution of development in Hunan Province, China, using a selected indicator (e.g., GDP per capita).\n\n> Our key questions are:\n> \n> 1. Is development evenly distributed geographically?\n> 2. If not, is there evidence of spatial clustering?\n> 3. If clustering exists, where are these clusters located?\n\n## The Data\n\nThe following 2 datasets will be used in this exercise.\n\n| **Data Set**                | **Description**                                                  | **Format**     |\n|-----------------|---------------------------------------|----------------|\n| Hunan county boundary layer | Geospatial data set representing the county boundaries of Hunan  | ESRI Shapefile |\n| Hunan_2012.csv              | Contains selected local development indicators for Hunan in 2012 | CSV            |\n\n## Installing and Launching the R Packages\n\nThe following R packages will be used in this exercise:\n\n| **Package**   | **Purpose**                                                                                                | **Use Case in Exercise**                                                                                  |\n|--------------|-----------------------------|-----------------------------|\n| **sf**        | Imports, manages, and processes vector-based geospatial data.                                              | Handling vector geospatial data such as the Hunan county boundary layer in shapefile format.              |\n| **spdep**     | Provides functions for spatial dependence analysis, including spatial weights and spatial autocorrelation. | Computing spatial weights and creating spatially lagged variables.                                        |\n| **tmap**      | Creates static and interactive thematic maps using cartographic quality elements.                          | Visualizing regional development indicators and plotting maps showing spatial relationships and patterns. |\n| **tidyverse** | A collection of packages for data science tasks such as data manipulation, visualization, and modeling.    | Importing CSV files, wrangling data, and performing relational joins.                                     |\n\nTo install and load these packages, use the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse)\n```\n:::\n\n\n\n## Import Data and Preparation\n\nIn this section, we will perform 3 necessary steps to prepare the data for analysis.\n\n::: callout-note\nThe data preparation is the same as previous exercise such as [Exercise 4A](/hands-on_ex/hands-on_ex04/hands-on_ex04a).\n:::\n\n### Import Geospatial Shapefile\n\nFirstly, we will use [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/Users/walter/code/isss626/isss626-gaa/Hands-on_Ex/Hands-on_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n### Import Aspatial csv File\n\nNext, we will import *Hunan_2012.csv* into R by using `read_csv()` of **readr** package. The output is R dataframe class.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n\n### Perform Relational Join\n\nThen, we will perform a `left_join()` to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n```\n:::\n\n\n\n### Visualizing Regional Development Indicator\n\nTo visualize the regional development indicator, we can prepare a base map and a choropleth map to show the distribution of GDPPC 2012 (GDP per capita) by using `qtm()` of **tmap** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(col = \"grey\") +\n  tm_layout(main.title = \"Equal Interval Classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(col = \"grey\") +\n  tm_layout(main.title = \"Equal Quantile Classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05a_files/figure-html/unnamed-chunk-5-1.png){width=1536}\n:::\n:::\n\n\n\n::: callout-note\n**Observations**\n\nOn the left plot, we perform **equal interval classification** which divides the range of GDPPC into five equal-sized intervals. This method ensures that the difference between the maximum and minimum value within each class is the same.\n\n**The equal interval classification method is best used for continuous datasets such as precipitation or temperature.**\n\nThe advantage of the equal interval classification method is that it creates a legend that is easy to interpret and present to a nontechnical audience. The primary disadvantage is that certain datasets will end up with most of the data values falling into only one or two classes, while few to no values will occupy the other classes.\n\n------------------------------------------------------------------------\n\nOn the right plot, we perform **equal quantile classification** which divides the regions into five classes such that each class contains approximately the same number of regions. This method adjusts the intervals to ensure an equal number of regions per class, which might result in unequal interval sizes.\n\n**The equal quantile classification is best for data that is evenly distributed across its range.**\n\nAs there are 88 counties in Hunan, each class in the quantile classification methodology will contain 88 / 5 = 17.6 different counties. The advantage to this method is that it often excels at emphasizing the relative position of the data values (i.e., which counties contain the top 20 percent of the Hunan population). The primary disadvantage of the quantile classification methodology is that features placed within the same class can have wildly differing values, particularly if the data are not evenly distributed across its range. In addition, the opposite can also happen whereby values with small range differences can be placed into different classes, suggesting a wider difference in the dataset than actually exists.\n\nFor more info, see [Data Classification](https://saylordotorg.github.io/text_essentials-of-geographic-information-systems/s10-03-data-classification.html#:~:text=The%20equal%20interval,such%20as%20precipitation%20or%20temperature.)\n:::\n\n## Global Measures of Spatial Autocorrelation\n\nIn this section, we will compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n### Computing Contiguity Spatial Weights\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\n\nIn the code block below, the `poly2nb()` function from the **spdep** package calculates contiguity weight matrices for the study area by identifying regions that share boundaries.\n\nBy default, `poly2nb()` uses the \"Queen\" criteria, which considers any shared boundary or corner as a neighbor (equivalent to setting `queen = TRUE`). If we want to restrict the criteria to shared boundaries only (excluding corners), set `queen = FALSE`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n\n\n:::\n:::\n\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n### Row-standardised Weights Matrix\n\nNext, we need to assign weights to each neighboring polygon. In this case, we'll use equal weights (style=\"W\"), where each neighboring polygon gets a weight of **1/(number of neighbors)**. This means we take the value for each neighbor and divide it by the total number of neighbors, then sum these weighted values to calculate a summary measure, such as weighted income.\n\nWhile this equal weighting approach is straightforward and easy to understand, it has a limitation: **polygons on the edges of the study area have fewer neighbors, which can lead to over- or underestimation of the actual spatial relationships (spatial autocorrelation) in the data.**\n\n::: callout-tip\nFor simplicity, we use the style=\"W\" option in this example, but keep in mind that other, potentially more accurate methods are available, such as style=\"B\".\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\n- The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.\n\n-   *style* can take values \"W\", \"B\", \"C\", \"U\", \"minmax\" and \"S\". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\n\n-   The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\n:::\n\n## Global Measures of Spatial Autocorrelation: Moran's I\n\nIn this section, you will learn how to perform Moran's I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.\n\n::: callout-note\n\nSpatial Autocorrelation, specifically Global Moran’s I, is a statistical measure used to evaluate the degree to which similar values in a dataset are clustered together or dispersed across a geographic space.\n\nIn simpler terms, it measures whether similar values occur near each other (positive autocorrelation) or if dissimilar values are found near each other (negative autocorrelation).\n\nGlobal Moran’s I takes into account both the locations of features and the values associated with those features. It computes an index value (Moran’s I), a z-score, and a p-value to determine the statistical significance of the observed spatial pattern\n\n**Intepreting Moran's I index**\n\nThe Moran’s I index ranges from -1 to +1. A value close to +1 indicates clustering of similar values, a value close to -1 indicates dispersion of similar values, and a value near 0 suggests a random spatial pattern2.\n\n-   **Positive Moran’s I**: Indicates that high values are near other high values, and low values are near other low values.\n-   **Negative Moran’s I**: Indicates that high values are near low values and vice versa.\n-   **Zero Moran’s I**: Suggests no spatial autocorrelation, implying a random distribution.\n\nFor more info, see [How Spatial Autocorrelation (Global Moran's I) works—ArcGIS Pro \\| Documentation](https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/h-how-spatial-autocorrelation-moran-s-i-spatial-st.htm)\n:::\n\n### Moran's I test\n\nTo assess whether there is significant spatial autocorrelation in the GDP per capita (GDPPC) across regions, we use **Moran's I test**. The test is performed using the [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) function from the **spdep** package.\n\n-   **Null Hypothesis (**$H_0$): There is no spatial autocorrelation in GDP per capita across the regions (Moran's I = 0).\n-   **Alternative Hypothesis (**$H_1$): There is positive spatial autocorrelation in GDP per capita (Moran's I \\> 0).\n\nWe will use an **alpha value (α) of 0.05 (95% confidence level)** to determine the statistical significance.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n**Question: What statistical conclusion can you draw from the output above?**\n\n-   The value of Moran's I is 0.3007, a positive number, indicating positive spatial autocorrelation. This means that regions with similar GDP per capita (GDPPC) values tend to be geographically close to each other.\n\n-   The p-value is 1.095e-06, which is much smaller than our alpha value of 0.05. This provides strong evidence against the null hypothesis of no spatial autocorrelation.\n\nTherefore, We will **reject the null hypothesis at 95% confidence interval** because the p-value is smaller than our chosen alpha value.\n:::\n\n### Computing Monte Carlo Moran's I\n\nIn this example, we explore the spatial distribution of Hunan GDPPC by county for the state of Hunan using the Monte Carlo approach. A total of 1000 simulation will be performed. We will perform the same hypothesis testing described above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n**Question: What statistical conclusion can you draw from the output above?**\n\n-   The value of Moran's I is 0.30075, which is a positive number, indicating positive spatial autocorrelation. This suggests that regions with similar GDP per capita (GDPPC) values are geographically close to each other.\n\n- The p-value obtained from the Monte Carlo simulation is 0.001, which is much smaller than our alpha value of 0.05. This provides strong evidence against the null hypothesis of no spatial autocorrelation.\n\nTherefore, we will **reject the null hypothesis at 95% confidence interval** because the p-value is smaller than our chosen alpha value.\n:::\n\n### Visualising Monte Carlo Moran's I\n\nIt is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code block below.\n\nWe will first observe the summary report of the Monte Carlo Moran's I output before visualizing the plots using `ggplot2` and base R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean of the first 999 simulated Moran's I values\nmean(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01504572\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the variance of the first 999 simulated Moran's I values\nvar(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.004371574\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n```\n\n\n:::\n:::\n\n\n::: panel-tabset\n\n#### ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data.frame(x = bperm$res), aes(x = x)) + \n  geom_histogram(binwidth = diff(range(bperm$res)) / 20,\n                 fill = \"grey\",\n                 color = \"black\") +\n  geom_vline(xintercept = 0,\n             color = \"red\", \n             linetype = \"solid\") +\n  labs(x = \"Simulated Moran's I\",\n       y = \"Frequency\",\n       title = \"Histogram of Simulated Moran's I Values\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05a_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n#### base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm$res, \n     freq = TRUE,         # Show the frequency (count) on y-axis\n     breaks = 20,         # Set the number of bins\n     xlab = \"Simulated Moran's I\")\n\n# Add vertical red line at 0 to indicate the mean under the null hypothesis of no autocorrelation\nabline(v = 0, \n       col = \"red\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05a_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n::: callout-note\n**Question: What statistical conclusion can you draw from the output above?**\n\nThe observed Moran's I value (0.30075) lies outside the range of most simulated values, indicating that it is an outlier compared to the expected distribution under the null hypothesis, which are centered around the expected value of 0.0 under the null hypothesis of no spatial autocorrelation. The histogram shows that most of the simulated values of Moran's I are clustered around the mean of -0.01504572, with a variance of 0.004371574.\n\nSince the observed Moran's I value is significantly greater than the bulk of the simulated values and given the p-value from the test is very small (p < 0.05), there is strong evidence against the null hypothesis.\n\nThere is significant positive spatial autocorrelation in the GDP per capita (GDPPC) across regions, as indicated by the Moran's I test. This suggests that regions with similar GDPPC values are more likely to be geographically clustered.\n\n:::\n\n## Global Measures of Spatial Autocorrelation: Geary's C\n\nIn this section, we will perform Geary's C statistics testing by using appropriate functions of **spdep** package.\n\n### Geary's C test\n\nAnother popular index of global spatial autocorrelation is Geary’s C which is a cousin to the Moran’s I. \n\n::: callout-note\n\nGeary’s C, also known as Geary’s contiguity ratio, is used to assess the degree of spatial autocorrelation in a dataset.\n\nIt is particularly sensitive to local variations in spatial data, making it suitable for analyzing patterns within smaller areas.\n\n**Interpreting Geary's C Values**\n\n**Geary's C values range from 0 to 2.** Under the null hypothesis of no spatial autocorrelation, the expected value of Geary’s C is 1.\n\n- **Values < 1**: Indicate positive spatial autocorrelation, meaning similar values are clustered together.\n\n- **Values = 1**: Suggest a random spatial pattern with no autocorrelation.\n\n- **Values > 1**: Indicate negative spatial autocorrelation, meaning dissimilar values are clustered together.\n\n:::\n\n> While Moran's I and Geary's C are both measures of global spatial autocorrelation, they are slightly different. Geary's C uses the sum of squared distances whereas Moran's I uses standardized spatial covariance.\n>\n> Unlike Moran's I, which focuses on global patterns, Geary's C emphasizes local variations and can reveal nuances in spatial relationships.\n>\n> For more info: [Geary's C](https://en.wikipedia.org/wiki/Geary%27s_C#:~:text=While%20Moran's%20I%20and%20Geary's,I%20uses%20standardized%20spatial%20covariance.), [Geary's C](https://library.fiveable.me/key-terms/geospatial-engineering/gearys-c)\n\nSimilarly, to assess whether there is significant spatial autocorrelation in the GDP per capita (GDPPC) across regions, we can performGeary's C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.\n\n- **Null Hypothesis ($H_o$):** There is no spatial autocorrelation in GDP per capita across the regions (Geary's C = 1).\n- **Alternative Hypothesis ($H_1$):** There is positive spatial autocorrelation in GDP per capita (Geary's C < 1).\n\nWe will use an **alpha value (α) of 0.05 (95% confidence level)** to determine the statistical significance.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(hunan$GDPPC, listw=rswm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Question: What statistical conclusion can you draw from the output above?**\n\n- The value of Geary's C statistic is 0.6907, which is less than the expected value of 1.0. This indicates positive spatial autocorrelation, meaning regions with similar GDP per capita (GDPPC) values tend to be geographically close to each other.\n\n- The p-value is 0.0001526, which is much smaller than our alpha value of 0.05. This provides strong evidence against the null hypothesis of no spatial autocorrelation.\n\nTherefore, we will reject the null hypothesis at 95% confidence interval because the p-value is smaller than our chosen alpha value. \n:::\n\n### Computing Monte Carlo Geary's C\n\nSimilar to Moran’s I, it is best to test the statistical significance of Geary’s C using a Monte Carlo simulation.\n\nTo perform permutation test for Geary's C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n\n**Question: What statistical conclusion can you draw from the output above?**\n\n- The value of Geary's C statistic is 0.6907, which is less than the expected value of 1.0. This indicates positive spatial autocorrelation, meaning regions with similar GDP per capita (GDPPC) values tend to be geographically close to each other.\n\n- The p-value from the Monte Carlo simulation is 0.001, which is much smaller than our alpha value of 0.05. This provides strong evidence against the null hypothesis of no spatial autocorrelation.\n\nTherefore, we will **reject the null hypothesis at 95% confidence** because the p-value is smaller than our chosen alpha value.\n\n:::\n\n### Visualising the Monte Carlo Geary's C\n\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code block below.\n\nWe will first observe the summary report of the Geary's C output before visualizing the plots using `ggplot2` and base R.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean of the first 999 simulated geary's c values\nmean(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.004402\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate the variance of the first 999 simulated geary's c values\nvar(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.007436493\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n```\n\n\n:::\n:::\n\n\n::: panel-tabset\n\n#### ggplot2\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data.frame(x = bperm$res), aes(x = x)) + \n  geom_histogram(binwidth = diff(range(bperm$res)) / 20,\n                 color = \"black\", \n                 fill = \"grey\") + \n  geom_vline(xintercept = 1, \n             color = \"red\") + \n  labs(x = \"Simulated Geary's C\", \n       y = \"Frequency\",\n       title = \"Histogram of Simulated Geary's C Values\")       \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05a_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n#### base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary's C\")\nabline(v=1, col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n::: callout-note\n**Question: What statistical conclusion can you draw from the output above?**\n\nThe observed Geary's C value (0.69072) lies outside the range of most simulated values, which are centered around the expected value of 1.0 under the null hypothesis of no spatial autocorrelation. The histogram shows that most of the simulated values of Geary's C are clustered around the mean of 1.0044, with a variance of 0.0074.\n\nSince the observed Geary's C value is significantly lower than the bulk of the simulated values and the p-value from the test is very small (p < 0.05), there is strong evidence against the null hypothesis.\n\nThere is significant positive spatial autocorrelation in the GDP per capita (GDPPC) across regions, as indicated by the Geary's C test. This suggests that regions with similar GDPPC values are more likely to be geographically clustered.\n:::\n\n## Spatial Correlogram\n\nSpatial correlograms are useful for examining patterns of spatial autocorrelation in your data or model residuals. They show how the correlation between pairs of spatial observations changes as the distance (lag) between them increases. Essentially, they are plots of a spatial autocorrelation index (such as Moran's I or Geary's C) against distance.\n\nWhile correlograms are not as fundamental as variograms—a core concept in geostatistics—they serve as powerful exploratory and descriptive tools. In fact, for examining spatial patterns, correlograms can provide more detailed insights than variograms.\n\n\n### Compute Moran's I Correlogram\n\nIn the code below, we use the [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) function from the **spdep** package to compute a 6-lag spatial correlogram for GDP per capita (GDPPC). This function calculates global spatial autocorrelation using Moran's I. The base R **plot()** function is then used to visualize the correlogram.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order = 6, \n                          method = \"I\", \n                          style = \"W\")\nplot(MI_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05a_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nHowever, simply plotting the output does not provide a complete interpretation because not all autocorrelation values may be statistically significant. Therefore, it is important to examine the full analysis report by printing the results.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(MI_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n**Question: What statistical observation can you draw from the plot above?**\n\nThe spatial correlogram shows Moran's I values for different distance lags, which indicate how spatial autocorrelation in GDP per capita (GDPPC) changes as the distance between regions increases. \n\n1. **Significant Positive Spatial Autocorrelation at Shorter Distances:**\n   - For lags 1 and 2, Moran's I values are significantly positive (0.30075 and 0.20601, respectively). The p-values for these lags are very small (p < 0.001). This suggests that regions with similar GDPPC values tend to be clustered together at these shorter distances.\n\n2. **Decreasing and Insignificant Spatial Autocorrelation at Moderate Distances:**\n   - At lag 3, Moran's I value is 0.06683, with the confidence interval still above zero, indicating weak but significant positive spatial autocorrelation (p < 0.05).\n   - At lag 4, Moran's I value further decreases to 0.02995. The p-value (0.226) is not significant, suggesting that spatial autocorrelation is not statistically significant at this distance.\n\n3. **Significant Negative Spatial Autocorrelation at Longer Distances:**\n   - For lags 5 and 6, Moran's I values become negative (-0.15305 and -0.11871, respectively). The p-values for these lags are very small (p < 0.001 and p < 0.01, respectively), indicating statistically significant negative spatial autocorrelation. This means that regions with dissimilar GDPPC values tend to be found farther apart.\n\n:::\n\n### Compute Geary's C Correlogram and Plot\n\nSimilarly, we can use `sp.correlogram()` of **spdep** package to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C and the **plot()** of base Graph is then used to plot the output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05a_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code block below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(GC_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Question: What statistical observation can you draw from the plot above?**\n\nThe spatial correlogram shows Geary's C values for different distance lags, illustrating how spatial autocorrelation in GDP per capita (GDPPC) changes with distance:\n\n1. **Significant Positive Spatial Autocorrelation at Shorter Distances:**\n   - For lags 1 and 2, Geary's C values (0.6907 and 0.7630, respectively). This indicates significant positive spatial autocorrelation, suggesting that similar GDPPC values are clustered together at shorter distances (p < 0.05).\n\n2. **Insignificant Autocorrelation at Moderate Distances:**\n   - At lags 3 and 4, Geary's C values are close to 1.0 (0.9397 and 1.0098), and their confidence intervals include 1, indicating no significant spatial autocorrelation (p > 0.05).\n\n3. **Significant Negative Spatial Autocorrelation at Longer Distances:**\n   - At lag 5, Geary's C value (1.2008) is significantly greater than 1.0, with the confidence interval not crossing 1, indicating significant negative spatial autocorrelation (p < 0.05). This suggests that dissimilar GDPPC values are more likely to be found at longer distances.\n\n4. **No Significant Spatial Autocorrelation at the Furthest Distance:**\n   - At lag 6, Geary's C value (1.0773) is slightly above 1, but the confidence interval includes 1, indicating no significant spatial autocorrelation (p > 0.05).\n\n\n:::",
    "supporting": [
      "Hands-on_Ex05a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}