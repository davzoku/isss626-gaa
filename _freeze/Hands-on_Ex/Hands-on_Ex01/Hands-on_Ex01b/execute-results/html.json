{
  "hash": "198264da606dc3dbe585df8424a25bd2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"1B: Thematic Mapping and GeoVisualisation with R\"\nsubtitle: \"In this exercise, we will learn to create thematic maps and perform geovisualization in R using the tmap package, including data preparation, classification, color schemes, and advanced mapping techniques.\"\ndate: \"Aug 24, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true\n  eval: true\n  freeze: auto  \n  message: false\n  warning: false\nformat:\n  html:\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n\n## Exercise 1B Reference\n\n[R for Geospatial Data Science and Analytics - 2Â  Thematic Mapping and GeoVisualisation with R](https://r4gdsa.netlify.app/chap02.html)\n\n## Overview\n\nIn general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices.\n\nMeanwhile, geovisualization leverages graphical representation to make places, phenomena, or processes visible, tapping into our spatial cognition and visual processing abilities.\n\n## Learning Outcome\n\n-   Understanding thematic mapping and geovisualization concepts.\n-   Installing and using the `tmap` package for creating choropleth maps.\n-   Importing and preparing geospatial and attribute data using `sf` and `readr` packages.\n-   Wrangling data with `dplyr` and `tidyr` to prepare for mapping.\n-   Performing georelational joins between geospatial and attribute data.\n-   Creating quick and advanced thematic maps using `tmap` elements and functions.\n-   Customizing map layouts, color schemes, and data classification methods.\n-   Plotting small multiple maps and mapping spatial objects meeting specific criteria.\n\n## The Data\n\nThe following data sources will be used in this exercise:\n\n| Dataset                                                                                                                                | Source                                                              | Description                                                                                                                        | Format         |\n|----------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------|----------------|\n| **Master Plan 2014 Subzone Boundary (Web) (`MP14_SUBZONE_WEB_PL`)**                                                                    | [data.gov.sg](https://www.data.gov.sg/)                             | Geospatial data representing the geographical boundaries of Singapore's planning subzones based on URA Master Plan 2014.           | ESRI Shapefile |\n| **Singapore Residents by Planning Area / Subzone, Age Group, Sex, and Type of Dwelling (2011-2020) (`respopagesextod2011to2020.csv`)** | [Department of Statistics, Singapore](https://www.singstat.gov.sg/) | Aspatial data containing demographic information; fields `PA` and `SZ` can be used to link to the `MP14_SUBZONE_WEB_PL` shapefile. | CSV            |\n\nThis table summarizes the datasets required, including their descriptions, sources, and formats.\n\n## Installing and Loading the R Packages\n\nThe following R packages will be used in this exercise:\n\n| Package   | Purpose                                                        | Use Case in Exercise                                 |\n|-----------|----------------------------------------------------------------|------------------------------------------------------|\n| **tmap**  | Thematic mapping for visualizing geospatial data.              | Creating and customizing thematic maps.              |\n| **sf**    | Handling geospatial data in simple features format.            | Importing, managing, and processing geospatial data. |\n| **readr** | Importing delimited text files (part of `tidyverse`).          | Loading CSV data files.                              |\n| **tidyr** | Tidying data into a usable format (part of `tidyverse`).       | Reshaping and organizing data.                       |\n| **dplyr** | Data wrangling and transformation tasks (part of `tidyverse`). | Manipulating and transforming datasets.              |\n\nTo install and load these packages in R, use the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n\n\n## Import Geospatial Data into R\n\nThe code block below uses st_read() function of sf package to import the `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/geospatial\",\n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/walter/code/isss626/isss626-gaa/Hands-on_Ex/Hands-on_Ex01/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\n\nWhen you display mpsz, only the first ten records are shown because R, by default, limits the number of printed rows to make output more manageable and readable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n\n\n### Importing Attribute Data into R\n\nNext, *respopagsex2011to2020.csv* file is imported into RStudio and save the file into an R dataframe called *popdata*.\n\nThe task will be performed by using *read_csv()* function of **readr** package as shown in the code block below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n```\n:::\n\n\n\n\n### Data Preparation\n\nBefore a thematic map can be prepared, it is required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\n-   YOUNG: age group 0 to 4 until age groyup 20 to 24,\n-   ECONOMY ACTIVE: age group 25-29 until age group 60-64,\n-   AGED: age group 65 and above,\n-   TOTAL: all age group, and\n-   DEPENDENCY: the ratio between young and aged against economy active group\n\n#### Data wrangling\n\nThe following data wrangling and transformation functions will be used:\n\n-   *pivot_wider()* of **tidyr** package, and\n-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Filter the data for the year 2020\npopdata2020 <- popdata %>%\n  filter(Time == 2020)\n\n# Step 2: Group the data by PA (Planning Area), SZ (Subzone), and AG (Age Group)\npopdata2020 <- popdata2020 %>%\n  group_by(PA, SZ, AG)\n\n# Step 3: Summarize the data by calculating the total population (POP) for each group\npopdata2020 <- popdata2020 %>%\n  summarise(POP = sum(Pop)) %>%\n  ungroup()\n\n# Step 4: Reshape the data from long to wide format, with age groups as column names\npopdata2020 <- popdata2020 %>%\n  pivot_wider(names_from = AG, values_from = POP)\n\n# Step 5: Calculate the YOUNG population (sum of selected age groups)\npopdata2020 <- popdata2020 %>%\n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[14]))\n\n# Step 6: Calculate the ECONOMICALLY ACTIVE population (sum of selected age groups)\npopdata2020 <- popdata2020 %>%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15]))\n\n# Step 7: Calculate the AGED population (sum of selected age groups)\npopdata2020 <- popdata2020 %>%\n  mutate(AGED = rowSums(.[16:21]))\n\n# Step 8: Calculate the TOTAL population (sum of all age groups)\npopdata2020 <- popdata2020 %>%\n  mutate(TOTAL = rowSums(.[3:21]))\n\n# Step 9: Calculate the DEPENDENCY ratio (ratio of YOUNG and AGED to ECONOMY ACTIVE)\npopdata2020 <- popdata2020 %>%\n  mutate(DEPENDENCY = (YOUNG + AGED) / `ECONOMY ACTIVE`)\n\n# Step 10: Select the relevant columns to be retained in the final dataset\npopdata2020 <- popdata2020 %>%\n  select(PA, SZ, YOUNG, `ECONOMY ACTIVE`, AGED, TOTAL, DEPENDENCY)\n```\n:::\n\n\n\n\n#### Joining the attribute data and geospatial data\n\nBefore performing a georelational join, one additional step is necessary: converting the values in the PA and SZ fields to uppercase. This is because the PA and SZ fields contain both upper- and lowercase letters, whereas the SUBZONE_N and PLN_AREA_N fields are in uppercase.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ),\n          .funs = list(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n\n\nNext, the left_join() function from the dplyr package is used to merge the geographic data and attribute table, using the planning subzone names (e.g. SUBZONE_N and SZ) as the common identifier.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n\n\n::: callout-note\n**Key Takeaway:**\n\nThe left_join() function from the dplyr package is applied to ensure that the resulting output remains a simple features data frame, with mpsz as the left table.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"data/rds/\", recursive = TRUE)\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n\n\n## Choropleth Mapping Geospatial Data Using *tmap*\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\nThere are two methods for creating thematic maps using tmap:\n\n-   Using `qtm()` for quick thematic map plotting.\n-   Using individual tmap elements for creating highly customizable maps.\n\n### Plotting a choropleth map quickly by using *qtm()*\n\nThe easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.\n\nThe following code draws a standard choropleth map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-note\n**Key Takeaway:**\n\n-   tmap_mode(\"plot\") is used to generate a static map. To enable interactive mode, use the \"view\" option.\n-   The fill argument is used to map the attribute to be visualized (in this case, DEPENDENCY).\n:::\n\n### Creating a choropleth map by using *tmap*'s elements\n\nWhile `qtm()` is useful for quickly and easily drawing choropleth maps, its drawback is the limited control over the aesthetics of individual layers. To create a high-quality, cartographic choropleth map like the one shown below, it's recommended to use the individual elements provided by *tmap*.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nIn the following sub-section, more *tmap* functions will be used to plot these elements.\n\n#### Drawing a base map\n\nThe basic building block of **tmap** is *tm_shape()* followed by one or more layer elemments such as *tm_fill()* and *tm_polygons()*.\n\nIn the code block below, *tm_shape()* is used to define the input data (i.e *mpsz_pop2020*) and *tm_polygons()* is used to draw the planning subzone polygons\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Drawing a choropleth map using *tm_polygons()*\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as *Dependency* to *tm_polygons()*.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-note\nKey takeaways from *tm_polygons()*:\n\n-   The default method for interval binning when creating a choropleth map is \"pretty.\" A detailed explanation of the data classification methods available in **tmap** will be covered in sub-section 4.3.\n-   The default color palette used is `YlOrRd` from ColorBrewer. More information on color schemes will be explored in sub-section 4.4.\n-   Missing values are automatically represented with a grey shade by default.\n:::\n\n#### Drawing a choropleth map using *tm_fill()* and \\*tm_border()\\*\\*\n\nActually, *tm_polygons()* is a wraper of *tm_fill()* and *tm_border()*. *tm_fill()* shades the polygons by using the default colour scheme and *tm_borders()* adds the borders of the shapefile onto the choropleth map.\n\nThe code block below draws a choropleth map by using *tm_fill()* alone.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code block below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\nNote that light-gray border lines have been added on the choropleth map.\n\nThe *alpha* option specifies a transparency value ranging from 0 (completely transparent) to 1 (not transparent). By default, the col's alpha value is used (usually 1).\n\nBeside *alpha* argument, there are three other arguments for *tm_borders()*, they are:\n\n-   *col* = border colour,\n-   *lwd* = border line width. The default is 1, and\n-   *lty* = border line type. The default is \"solid\".\n\n### Data classification methods of **tmap**\n\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\n\n**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.\n\nTo define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.\n\n#### Plotting choropleth maps with built-in classification methods\n\nThe code block below shows a quantile data classification that used 5 classes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nIn the code block below, *equal* data classification method is used.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-note\n**Observation:** The distribution of quantile data classification method are more evenly distributed then equal data classification method.\n:::\n\n::: callout-warning\n**Warning: Maps Lie!**\n:::\n\n**Exercise: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.**\n\nThe tabs below shows the choropleth maps drawn using different classifications methods with the same number of classes (n=5).\n\n::: panel-tabset\n#### quantile\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n#### equal\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n#### pretty\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n#### jenks\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n#### sd\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n#### hclust\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n#### fisher\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n#### bclust\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n```\n\n\n:::\n:::\n\n\n\n\n#### kmeans\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::: callout-note\n**Observation:** Different data classification methods produce varying color patterns. Methods like *pretty*, *equal*, and *sd* are more sensitive to outliers, often resulting in fewer distinct areas on the map. In contrast, methods like *quantile*, *jenks*, and *kmeans* create more evenly distributed colors. Therefore, choosing the right classification method based on data distribution is crucial to avoid misleading representations in choropleth maps.\n:::\n\n**Exercise: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?**\n\nThe tabs below show choropleth maps with `kmeans` classification method. The numbers of classes used are (2, 6, 10, 20).\n\n::: panel-tabset\n#### n=2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n#### n=6\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n#### n=10\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n#### n=20\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::: callout-note\n**Observation:** Using different class numbers within the same classification method affects the map's coloring. With n=2, outliers dominate, resulting in only one distinct area. Increasing the class count distributes the data more evenly across the map.\n:::\n\n#### Plotting choropleth map with custom break\n\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).\n\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code block below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6751  0.7288  0.8084  0.8092 19.0000      92 \n```\n\n\n:::\n:::\n\n\n\n\nBased on the results, we choose breakpoints at 0.60, 0.70, 0.80, and 0.90, with the minimum at 0 and maximum at 1. Our breaks vector is c(0, 0.60, 0.70, 0.80, 0.90, 1.00).\n\nNow, we will plot the choropleth map with the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n### Colour Scheme\n\n**tmap** supports colour ramps either user-defined or a set of predefined colour ramps from the **RColorBrewer** package.\n\n#### Using ColourBrewer palette\n\nTo apply a specific color palette, assign it to the palette argument in `tm_fill()` as shown below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\nNotice that the choropleth map is shaded in green.\n\nTo reverse the colour shading, add a \"-\" prefix.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n### Map Layouts\n\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n#### Map Legend\n\nIn **tmap**, there are several legend options for adjusting the placement, format, and style of the legend.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"jenks\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Map style\n\n**tmap** allows extensive customization of layout settings, accessible through the `tmap_style()` function. The code below demonstrates the use of the classic style.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Cartographic Furniture\n\nBeside map style, **tmap** also also provides arguments to draw other map furniture such as compass, scale bar and grid lines. In the following example, *tm_compass()*, *tm_scale_bar()* and *tm_grid()* are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n\nTo reset the default style, use the code below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n\n\n### Drawing Small Multiple Choropleth Maps\n\n**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\nIn **tmap**, small multiple maps can be created through three methods:\n\n-   Assigning multiple values to an aesthetic argument.\n-   Defining a grouping variable with `tm_facets()`.\n-   Creating multiple stand-alone maps with `tmap_arrange()`.\n\n#### Assigning Multiple Values to an Aesthetic Argument\n\nIn this example, small multiple choropleth maps are created by defining ***ncols*** in **tm_fill()**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\nThis example creates small multiple choropleth maps by assigning multiple values to at least one of the aesthetic arguments:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"),\n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Grouping by a Variable with *tm_facets()*\n\nThis example generates multiple small maps by using `tm_facets()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) +\n  tm_facets(by=\"REGION_N\",\n            free.coords=TRUE,\n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"),\n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Creating Stand-alone Maps with *tmap_arrange()*\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with **tmap_arrange()**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+\n  tm_polygons(\"AGED\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n### Mapping Spatial Object by Meeting a Selection Criterion\n\nInstead of creating small multiple choropleth map, you can also use selection function to map spatial objects meeting the selection criterion.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\n## References\n\n### All about **tmap** package\n\n-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)\n-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)\n-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)\n-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)\n-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)\n-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)\n\n### Geospatial Data Wrangling\n\n-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)\n-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)\n-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)\n\n### Data Wrangling\n\n-   [dplyr](https://dplyr.tidyverse.org/)\n-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n-   [tidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)\n",
    "supporting": [
      "Hands-on_Ex01b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}