{
  "hash": "1e3af75919be0ad9c39c36dfbec869fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"10A: Processing and Visualising Flow Data\"\nsubtitle: \"In this exercise, we will explore the concept of spatial interaction, and learn how to build an OD (origin/destination) matrix.\"\n# draft: true\ndate: \"Sep 29, 2024\"\ndate-modified: \"last-modified\"\nauthor: Teng Kok Wai (Walter)\nexecute:\n  echo: true\n  eval: true\n  freeze: true\n  message: false\n  warning: false\nformat:\n  html:\n    code-link: true\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n\n\n## Exercise 10A Reference\n\n[R for Geospatial Data Science and Analytics - 15  Processing and Visualising Flow Data](https://r4gdsa.netlify.app/chap15)\n\n## Overview\n\nIn this exercise, we will explore the concept of spatial interaction, and learn how to build an OD (origin/destination) matrix.\n\nSpatial interaction represent the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.\n\n> An OD matrix, or spatial interaction matrix, represents each spatial interaction as a discrete origin/destination pair, where each pair corresponds to a cell in the matrix; the rows denote the locations (centroids) of origin, and the columns represent the locations (centroids) of destination.\n\n## Learning Outcome\n\n-   Import and extract OD data for a selected time interval.\n-   Import and save geospatial data (bus stops and planning subzones) into sf tibble data frame objects.\n-   Populate planning subzone codes into bus stops sf tibble data frames.\n-   Construct desire lines geospatial data from the OD data.\n-   Visualize passenger volume by origin and destination bus stops using the desire lines data.\n\n## The Data\n\nThe following datasets will be used in this exercise:\n\n| **Data Set** | **Description** | **Format** |\n|------------------|-------------------------------------|------------------|\n| Passenger Volume by Origin Destination Bus Stops | OD data set representing the volume of passengers traveling between bus stops. | CSV |\n| BusStop | Geospatial data providing the locations of bus stops as of the last quarter of 2022. | ESRI Shapefile |\n| MPSZ-2019 | Geospatial data providing the sub-zone boundary of the URA Master Plan 2019. | ESRI Shapefile |\n\n## Installing and Launching the R Packages\n\nThe following R packages will be used in this exercise:\n\n| **Package** | **Purpose** | **Use Case in Exercise** |\n|------------------|---------------------------|---------------------------|\n| **sf** | Handles vector-based geospatial data. | Importing, processing, and transforming geospatial data, such as bus stop locations and sub-zone boundaries. |\n| **tidyverse** | A collection of packages for data science tasks such as data manipulation, visualization, and modeling. | Importing and wrangling OD and geospatial data, and visualizing analysis outputs. |\n| **tmap** | Creates static and interactive thematic maps using cartographic quality elements. | Visualizing passenger flows and geographic clusters in a cartographic format. |\n| **stplanr** | Provides functions for transport planning and modeling. | Creating geographic desire lines from OD data and solving transport-related problems. |\n| **DT** | Provides an R interface to the JavaScript library DataTables for interactive table display. | Displaying data tables in an interactive format within the HTML output. |\n\nTo install and load these packages, use the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tmap, sf, DT, stplanr, tidyverse, knitr)\n```\n:::\n\n\n\n## Preparing the Flow Data\n\n### Importing the OD data\n\nFirst, we import the *Passenger Volume by Origin Destination Bus Stops* dataset using `read_csv()` from the **readr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus <- read_csv(\"data/aspatial/origin_destination_bus_202408.csv\")\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,760,081\nColumns: 7\n$ YEAR_MONTH          <chr> \"2024-08\", \"2024-08\", \"2024-08\", \"2024-08\", \"2024-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/…\n$ TIME_PER_HOUR       <dbl> 18, 7, 19, 9, 5, 12, 23, 15, 12, 13, 7, 9, 17, 15,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <chr> \"76201\", \"10351\", \"76061\", \"14271\", \"54581\", \"1008…\n$ DESTINATION_PT_CODE <chr> \"76079\", \"13201\", \"75371\", \"07021\", \"66471\", \"1007…\n$ TOTAL_TRIPS         <dbl> 6, 7, 1, 2, 1, 145, 2, 78, 2, 1, 3, 1, 2, 3, 5, 3,…\n```\n\n\n:::\n:::\n\n\n\n*odbus* tibble data frame shows that the values in `ORIGIN_PT_CODE` and `DESTINATON_PT_CODE` are in character data type, we will convert themm into factor data type.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)\nglimpse(odbus)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,760,081\nColumns: 7\n$ YEAR_MONTH          <chr> \"2024-08\", \"2024-08\", \"2024-08\", \"2024-08\", \"2024-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/…\n$ TIME_PER_HOUR       <dbl> 18, 7, 19, 9, 5, 12, 23, 15, 12, 13, 7, 9, 17, 15,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <fct> 76201, 10351, 76061, 14271, 54581, 10089, 67231, 5…\n$ DESTINATION_PT_CODE <fct> 76079, 13201, 75371, 07021, 66471, 10079, 67179, 5…\n$ TOTAL_TRIPS         <dbl> 6, 7, 1, 2, 1, 145, 2, 78, 2, 1, 3, 1, 2, 3, 5, 3,…\n```\n\n\n:::\n:::\n\n\n\n### Extracting the Study Data\n\nFor the purpose of this exercise, we extract commuting flows on weekdays between 6 and 9 a.m. and sum the trips.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nodbus6_9 <- odbus %>%\n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%\n  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n```\n:::\n\n\n\nThe table below shows the head content of `odbus6_9`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatatable(head(odbus6_9, 10))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-99b698606393e02c8d2f\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-99b698606393e02c8d2f\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[\"01012\",\"01012\",\"01012\",\"01012\",\"01012\",\"01012\",\"01012\",\"01012\",\"01012\",\"01012\"],[\"01112\",\"01113\",\"01121\",\"01211\",\"01311\",\"07371\",\"60011\",\"60021\",\"60031\",\"60159\"],[224,179,91,77,229,9,2,10,50,20]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>ORIGIN_PT_CODE<\\/th>\\n      <th>DESTINATION_PT_CODE<\\/th>\\n      <th>TRIPS<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"ORIGIN_PT_CODE\",\"targets\":1},{\"name\":\"DESTINATION_PT_CODE\",\"targets\":2},{\"name\":\"TRIPS\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n### Saving and loading the data\n\nWe save the filtered data for future use in RDS format.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(odbus6_9, \"data/rds/odbus6_9.rds\")\nodbus6_9 <- read_rds(\"data/rds/odbus6_9.rds\")\n```\n:::\n\n\n\n## Working with Geospatial Data\n\nFor this exercise, two geospatial datasets will be used:\n\n-   **BusStop**: Contains the locations of bus stops as of Q4 2022.\n-   **MPSZ-2019**: Provides the sub-zone boundaries from the URA Master Plan 2019.\n\nBoth datasets are in ESRI shapefile format.\n\n### Importing Geospatial Data\n\nThe code below imports the geospatial data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop <- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BusStop' from data source \n  `/Users/walter/code/isss626/isss626-gaa/Hands-on_Ex/Hands-on_Ex10/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/walter/code/isss626/isss626-gaa/Hands-on_Ex/Hands-on_Ex10/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- write_rds(mpsz, \"data/rds/mpsz.rds\")\n```\n:::\n\n\n\n## Geospatial Data Wrangling\n\n### Combining BusStop and MPSZ\n\nThe code below joins the planning subzone codes from `mpsz` to the bus stops in `busstop`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbusstop_mpsz <- st_intersection(busstop, mpsz) %>%\n  select(BUS_STOP_N, SUBZONE_C) %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndatatable(head(busstop_mpsz, 10))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-d19112456537d0d9f6ac\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d19112456537d0d9f6ac\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1332\",\"5045\",\"774\",\"782\",\"841\",\"997\",\"1324\",\"2249\",\"2523\",\"2965\"],[\"13099\",\"13089\",\"13211\",\"13139\",\"06151\",\"13109\",\"13119\",\"06169\",\"06159\",\"04321\"],[\"RVSZ05\",\"RVSZ05\",\"SRSZ01\",\"SRSZ01\",\"SRSZ01\",\"SRSZ01\",\"SRSZ01\",\"SRSZ01\",\"SRSZ01\",\"SRSZ01\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>BUS_STOP_N<\\/th>\\n      <th>SUBZONE_C<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"BUS_STOP_N\",\"targets\":1},{\"name\":\"SUBZONE_C\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(busstop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5166\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(busstop_mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5161\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n-   `st_intersection()` performs a point-and-polygon overlay.\n-   `select()` keeps only `BUS_STOP_N` and `SUBZONE_C` fields.\n-   Five bus stops outside Singapore are excluded.\n:::\n\nSave the result as an RDS file:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.rds\")\n```\n:::\n\n\n\nNext, append the subzone codes to the `odbus6_9` dataset:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- left_join(odbus6_9, busstop_mpsz, by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %>%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE, ORIGIN_SZ = SUBZONE_C, DESTIN_BS = DESTINATION_PT_CODE)\n```\n:::\n\n\n\nCheck for duplicate records:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduplicate <- od_data %>%\n  group_by_all() %>%\n  filter(n() > 1) %>%\n  ungroup()\n\nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,464 × 4\n   ORIGIN_BS DESTIN_BS TRIPS ORIGIN_SZ\n   <chr>     <fct>     <dbl> <chr>    \n 1 09047     02029         2 ORSZ02   \n 2 09047     02029         2 ORSZ02   \n 3 09047     02049        49 ORSZ02   \n 4 09047     02049        49 ORSZ02   \n 5 09047     02089        46 ORSZ02   \n 6 09047     02089        46 ORSZ02   \n 7 09047     02151        95 ORSZ02   \n 8 09047     02151        95 ORSZ02   \n 9 09047     02161        35 ORSZ02   \n10 09047     02161        35 ORSZ02   \n# ℹ 1,454 more rows\n```\n\n\n:::\n:::\n\n\n\nSince duplicates exist, we will remove them:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(od_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 240554\n```\n\n\n:::\n\n```{.r .cell-code}\nod_data <- unique(od_data)\nnrow(od_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 239822\n```\n\n\n:::\n:::\n\n\n\nNow, append the destination subzone codes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data <- left_join(od_data, busstop_mpsz, by = c(\"DESTIN_BS\" = \"BUS_STOP_N\")) %>%\n  rename(DESTIN_SZ = SUBZONE_C) %>%\n  drop_na() %>%\n  group_by(ORIGIN_SZ, DESTIN_SZ) %>%\n  summarise(MORNING_PEAK = sum(TRIPS))\n\nod_data_fii <- od_data\n```\n:::\n\n\n\nFinally, save the cleaned data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(od_data_fii, \"data/rds/od_data_fii.rds\")\nod_data_fii <- read_rds(\"data/rds/od_data_fii.rds\")\n```\n:::\n\n\n\n## Visualising Spatial Interaction\n\nIn this section, we will prepare a desire line by using **stplanr** package.\n\n### Removing Intra-Zonal Flows\n\nWe will exclude flows within the same zone to focus on inter-zonal flows. The code below removes these intra-zonal flows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data_fij <- od_data[od_data$ORIGIN_SZ != od_data$DESTIN_SZ,]\n```\n:::\n\n\n\n::: callout-tip\nThe comma in the code `od_data1 <- od_data[od_data$ORIGIN_SZ != od_data$DESTIN_SZ,]` is crucial because it specifies that you are subsetting the rows of the data frame based on a condition, while keeping all the columns.\n:::\n\nSave the result for future use:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(od_data_fij, \"data/rds/od_data_fij.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nod_data_fij <- read_rds(\"data/rds/od_data_fij.rds\")\n```\n:::\n\n\n\n### Creating Desire Lines\n\n::: callout-note\nDesire lines are used to illustrate on a map the flows of people or goods from point to point based on the values from a matrix.\n:::\n\nNext, we use `od2line()` from the **stplanr** package to generate desire lines:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflowLine <- od2line(flow = od_data_fij, \n                    zones = mpsz,\n                    zone_code = \"SUBZONE_C\")\n\nflowLine\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 20625 features and 3 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 5105.594 ymin: 25813.33 xmax: 46654.41 ymax: 49552.79\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   ORIGIN_SZ DESTIN_SZ MORNING_PEAK                       geometry\n1     AMSZ01    AMSZ02        10895 LINESTRING (29501.77 39419....\n2     AMSZ01    AMSZ03        15626 LINESTRING (29501.77 39419....\n3     AMSZ01    AMSZ04         2865 LINESTRING (29501.77 39419....\n4     AMSZ01    AMSZ05         8166 LINESTRING (29501.77 39419....\n5     AMSZ01    AMSZ06         2309 LINESTRING (29501.77 39419....\n6     AMSZ01    AMSZ07         1446 LINESTRING (29501.77 39419....\n7     AMSZ01    AMSZ08         2572 LINESTRING (29501.77 39419....\n8     AMSZ01    AMSZ09         2380 LINESTRING (29501.77 39419....\n9     AMSZ01    AMSZ10          287 LINESTRING (29501.77 39419....\n10    AMSZ01    AMSZ11          741 LINESTRING (29501.77 39419....\n```\n\n\n:::\n:::\n\n\n\nSave the generated desire lines:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(flowLine, \"data/rds/flowLine.rds\")\n\nflowLine <- read_rds(\"data/rds/flowLine.rds\")\n```\n:::\n\n\n\n### Filtering High-Volume Flows\n\nTo simplify the visual output and focus on significant flows, we filter for high-volumes flows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(flowLine$MORNING_PEAK)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n     1.0     16.0     84.0    993.9    429.0 218070.0 \n```\n\n\n:::\n:::\n\n\n\nFor example, we can visualize flow greater than or equal to 2000 as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons() +\nflowLine %>%  \n  # filter for 2000\n  filter(MORNING_PEAK >= 2000) %>%  \ntm_shape() +\n  tm_lines(lwd = \"MORNING_PEAK\",\n           style = \"quantile\",\n           scale = c(0.1, 1, 3, 5, 7, 10),\n           n = 6)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex10a_files/figure-html/viz_high_flow-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#           alpha = 0.3)\n```\n:::\n",
    "supporting": [
      "Hands-on_Ex10a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}